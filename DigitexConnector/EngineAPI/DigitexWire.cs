// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: messages-public.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DigitexWire {

  /// <summary>Holder for reflection information generated from messages-public.proto</summary>
  public static partial class MessagesPublicReflection {

    #region Descriptor
    /// <summary>File descriptor for messages-public.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessagesPublicReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVtZXNzYWdlcy1wdWJsaWMucHJvdG8SDGRpZ2l0ZXhfd2lyZSIpCgdEZWNp",
            "bWFsEg8KB3ZhbHVlNjQYJCABKAMSDQoFc2NhbGUYJSABKA0ijAIKEVBsYWNl",
            "T3JkZXJNZXNzYWdlEisKCm9yZGVyX3R5cGUYICABKA4yFy5kaWdpdGV4X3dp",
            "cmUuT3JkZXJUeXBlEiUKBHNpZGUYISABKA4yFy5kaWdpdGV4X3dpcmUuT3Jk",
            "ZXJTaWRlEhAKCGxldmVyYWdlGCIgASgNEi0KCGR1cmF0aW9uGCMgASgOMhsu",
            "ZGlnaXRleF93aXJlLk9yZGVyRHVyYXRpb24SJAoFcHJpY2UYJiABKAsyFS5k",
            "aWdpdGV4X3dpcmUuRGVjaW1hbBInCghxdWFudGl0eRgnIAEoCzIVLmRpZ2l0",
            "ZXhfd2lyZS5EZWNpbWFsEhMKCmlzX2Nsb3NpbmcYmAIgASgFIpACChJVcGRh",
            "dGVPcmRlck1lc3NhZ2USFgoOcHJldl9jbGllbnRfaWQYKCABKAwSKwoKb3Jk",
            "ZXJfdHlwZRggIAEoDjIXLmRpZ2l0ZXhfd2lyZS5PcmRlclR5cGUSJQoEc2lk",
            "ZRghIAEoDjIXLmRpZ2l0ZXhfd2lyZS5PcmRlclNpZGUSEAoIbGV2ZXJhZ2UY",
            "IiABKA0SLQoIZHVyYXRpb24YIyABKA4yGy5kaWdpdGV4X3dpcmUuT3JkZXJE",
            "dXJhdGlvbhIkCgVwcmljZRgmIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFs",
            "EicKCHF1YW50aXR5GCcgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwiLAoS",
            "Q2FuY2VsT3JkZXJNZXNzYWdlEhYKDnByZXZfY2xpZW50X2lkGCggASgMImUK",
            "FkNhbmNlbEFsbE9yZGVyc01lc3NhZ2USJQoEc2lkZRghIAEoDjIXLmRpZ2l0",
            "ZXhfd2lyZS5PcmRlclNpZGUSJAoFcHJpY2UYJiABKAsyFS5kaWdpdGV4X3dp",
            "cmUuRGVjaW1hbCIsChhDaGFuZ2VMZXZlcmFnZUFsbE1lc3NhZ2USEAoIbGV2",
            "ZXJhZ2UYIiABKA0irAwKEk9yZGVyU3RhdHVzTWVzc2FnZRIpCgZzdGF0dXMY",
            "KiABKA4yGS5kaWdpdGV4X3dpcmUuT3JkZXJTdGF0dXMSLQoOdHJhZGVyX2Jh",
            "bGFuY2UYMyABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIrCgxvcmRlcl9t",
            "YXJnaW4YTCABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIuCg9wb3NpdGlv",
            "bl9tYXJnaW4YTiABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIjCgR1cG5s",
            "GE8gASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwSIwoDcG5sGJoBIAEoCzIV",
            "LmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEi4KDmFjY3VtX3F1YW50aXR5GLUBIAEo",
            "CzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEi8KEGJ1eV9vcmRlcl9tYXJnaW4Y",
            "diABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIwChFzZWxsX29yZGVyX21h",
            "cmdpbhh3IAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEjIKEmJ1eV9vcmRl",
            "cl9xdWFudGl0eRi2ASABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIzChNz",
            "ZWxsX29yZGVyX3F1YW50aXR5GLcBIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNp",
            "bWFsEjAKEHRyYWRlcl9iYWxhbmNlXzIYlgIgASgLMhUuZGlnaXRleF93aXJl",
            "LkRlY2ltYWwSNAoUZnVsbF9wb3NpdGlvbl9tYXJnaW4YqgIgASgLMhUuZGln",
            "aXRleF93aXJlLkRlY2ltYWwSNQoVZnVsbF9idXlfb3JkZXJfbWFyZ2luGKsC",
            "IAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEjYKFmZ1bGxfc2VsbF9vcmRl",
            "cl9tYXJnaW4YrAIgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwSMQoScG9z",
            "aXRpb25fY29udHJhY3RzGGggASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwS",
            "LgoPcG9zaXRpb25fdm9sdW1lGGkgASgLMhUuZGlnaXRleF93aXJlLkRlY2lt",
            "YWwSOgobcG9zaXRpb25fbGlxdWlkYXRpb25fdm9sdW1lGGogASgLMhUuZGln",
            "aXRleF93aXJlLkRlY2ltYWwSOQoacG9zaXRpb25fYmFua3J1cHRjeV92b2x1",
            "bWUYdSABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIyCg1wb3NpdGlvbl90",
            "eXBlGGsgASgOMhsuZGlnaXRleF93aXJlLk9yZGVyUG9zaXRpb24SKQoKbWFy",
            "a19wcmljZRg0IAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEisKCm9yZGVy",
            "X3R5cGUYICABKA4yFy5kaWdpdGV4X3dpcmUuT3JkZXJUeXBlEiUKBHNpZGUY",
            "ISABKA4yFy5kaWdpdGV4X3dpcmUuT3JkZXJTaWRlEhAKCGxldmVyYWdlGCIg",
            "ASgNEi0KCGR1cmF0aW9uGCMgASgOMhsuZGlnaXRleF93aXJlLk9yZGVyRHVy",
            "YXRpb24SJAoFcHJpY2UYJiABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIn",
            "CghxdWFudGl0eRgnIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEikKCnBh",
            "aWRfcHJpY2UYQiABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIXCg9vbGRf",
            "Y29udHJhY3RfaWQYOSABKAQSJgoGdm9sdW1lGJcCIAEoCzIVLmRpZ2l0ZXhf",
            "d2lyZS5EZWNpbWFsEhMKCmlzX2Nsb3NpbmcYmAIgASgFEhcKD29yZGVyX2Ns",
            "aWVudF9pZBhHIAEoDBIXCg9vcmRlcl90aW1lc3RhbXAYSCABKAMSFwoOb3Jp",
            "Z19jbGllbnRfaWQYzAEgASgMEhIKCW9wZW5fdGltZRjNASABKAMSLQoNb3Jp",
            "Z19xdWFudGl0eRjOASABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIWCg1v",
            "cmlnX29yZGVyX2lkGMcCIAEoDCKECQoPTGV2ZXJhZ2VNZXNzYWdlEhAKCGxl",
            "dmVyYWdlGCIgASgNEioKBnRyYWRlcxguIAMoCzIaLmRpZ2l0ZXhfd2lyZS5U",
            "cmFkZU1lc3NhZ2USKgoGb3JkZXJzGEYgAygLMhouZGlnaXRleF93aXJlLk9y",
            "ZGVyTWVzc2FnZRItCg50cmFkZXJfYmFsYW5jZRgzIAEoCzIVLmRpZ2l0ZXhf",
            "d2lyZS5EZWNpbWFsEisKDG9yZGVyX21hcmdpbhhMIAEoCzIVLmRpZ2l0ZXhf",
            "d2lyZS5EZWNpbWFsEi4KD3Bvc2l0aW9uX21hcmdpbhhOIAEoCzIVLmRpZ2l0",
            "ZXhfd2lyZS5EZWNpbWFsEiMKBHVwbmwYTyABKAsyFS5kaWdpdGV4X3dpcmUu",
            "RGVjaW1hbBIjCgNwbmwYmgEgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwS",
            "LgoOYWNjdW1fcXVhbnRpdHkYtQEgASgLMhUuZGlnaXRleF93aXJlLkRlY2lt",
            "YWwSMQoScG9zaXRpb25fY29udHJhY3RzGGggASgLMhUuZGlnaXRleF93aXJl",
            "LkRlY2ltYWwSLgoPcG9zaXRpb25fdm9sdW1lGGkgASgLMhUuZGlnaXRleF93",
            "aXJlLkRlY2ltYWwSOgobcG9zaXRpb25fbGlxdWlkYXRpb25fdm9sdW1lGGog",
            "ASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwSOQoacG9zaXRpb25fYmFua3J1",
            "cHRjeV92b2x1bWUYdSABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIyCg1w",
            "b3NpdGlvbl90eXBlGGsgASgOMhsuZGlnaXRleF93aXJlLk9yZGVyUG9zaXRp",
            "b24SLwoQYnV5X29yZGVyX21hcmdpbhh2IAEoCzIVLmRpZ2l0ZXhfd2lyZS5E",
            "ZWNpbWFsEjAKEXNlbGxfb3JkZXJfbWFyZ2luGHcgASgLMhUuZGlnaXRleF93",
            "aXJlLkRlY2ltYWwSLwoQbGFzdF90cmFkZV9wcmljZRhxIAEoCzIVLmRpZ2l0",
            "ZXhfd2lyZS5EZWNpbWFsEjIKE2xhc3RfdHJhZGVfcXVhbnRpdHkYdCABKAsy",
            "FS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIdChRsYXN0X3RyYWRlX3RpbWVzdGFt",
            "cBioAiABKAMSMgoSYnV5X29yZGVyX3F1YW50aXR5GLYBIAEoCzIVLmRpZ2l0",
            "ZXhfd2lyZS5EZWNpbWFsEjMKE3NlbGxfb3JkZXJfcXVhbnRpdHkYtwEgASgL",
            "MhUuZGlnaXRleF93aXJlLkRlY2ltYWwSNAoUZnVsbF9wb3NpdGlvbl9tYXJn",
            "aW4YqgIgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwSNQoVZnVsbF9idXlf",
            "b3JkZXJfbWFyZ2luGKsCIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEjYK",
            "FmZ1bGxfc2VsbF9vcmRlcl9tYXJnaW4YrAIgASgLMhUuZGlnaXRleF93aXJl",
            "LkRlY2ltYWwi0AcKDFRyYWRlTWVzc2FnZRIXCg90cmFkZV90aW1lc3RhbXAY",
            "RSABKAMSFwoPdHJhZGVfdHJhZGVyX2lkGEogASgNEi0KCHBvc2l0aW9uGC0g",
            "ASgOMhsuZGlnaXRleF93aXJlLk9yZGVyUG9zaXRpb24SJAoFcHJpY2UYJiAB",
            "KAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIpCgpwYWlkX3ByaWNlGEIgASgL",
            "MhUuZGlnaXRleF93aXJlLkRlY2ltYWwSMAoRbGlxdWlkYXRpb25fcHJpY2UY",
            "QyABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIwChBiYW5rcnVwdGN5X3By",
            "aWNlGMoBIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEicKCHF1YW50aXR5",
            "GCcgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwSKgoKZXhpdF9wcmljZRim",
            "ASABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIQCghsZXZlcmFnZRgiIAEo",
            "DRITCgtjb250cmFjdF9pZBgpIAEoBBIXCg9vbGRfY29udHJhY3RfaWQYOSAB",
            "KAQSFQoNb2xkX2NsaWVudF9pZBhBIAEoDBIUCgtpc19pbmNyZWFzZRikASAB",
            "KAUSFwoOaXNfbGlxdWlkYXRpb24YpwEgASgFEhIKCW9wZW5fdGltZRjCASAB",
            "KAMSLgoOZW50cnlfcXVhbnRpdHkYwwEgASgLMhUuZGlnaXRleF93aXJlLkRl",
            "Y2ltYWwSLQoNZXhpdF9xdWFudGl0eRjEASABKAsyFS5kaWdpdGV4X3dpcmUu",
            "RGVjaW1hbBIrCgtleGl0X3ZvbHVtZRjFASABKAsyFS5kaWdpdGV4X3dpcmUu",
            "RGVjaW1hbBIyChJmdW5kaW5nX3BhaWRfcHJpY2UYxgEgASgLMhUuZGlnaXRl",
            "eF93aXJlLkRlY2ltYWwSMAoQZnVuZGluZ19xdWFudGl0eRjHASABKAsyFS5k",
            "aWdpdGV4X3dpcmUuRGVjaW1hbBIuCg5mdW5kaW5nX3ZvbHVtZRjIASABKAsy",
            "FS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIWCg1mdW5kaW5nX2NvdW50GMkBIAEo",
            "BRITCgppc19mdW5kaW5nGMsBIAEoBRIRCghpc19tYWtlchjPASABKAUSGQoQ",
            "b3JpZ19jb250cmFjdF9pZBjQASABKAQSFgoNaXNfc2V0dGxlbWVudBiVAiAB",
            "KAUSJgoGdm9sdW1lGJcCIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsIowO",
            "ChJPcmRlckZpbGxlZE1lc3NhZ2USKQoGc3RhdHVzGCogASgOMhkuZGlnaXRl",
            "eF93aXJlLk9yZGVyU3RhdHVzEhUKDW5ld19jbGllbnRfaWQYLCABKAwSKwoK",
            "b3JkZXJfdHlwZRggIAEoDjIXLmRpZ2l0ZXhfd2lyZS5PcmRlclR5cGUSJQoE",
            "c2lkZRghIAEoDjIXLmRpZ2l0ZXhfd2lyZS5PcmRlclNpZGUSEAoIbGV2ZXJh",
            "Z2UYIiABKA0SLQoIZHVyYXRpb24YIyABKA4yGy5kaWdpdGV4X3dpcmUuT3Jk",
            "ZXJEdXJhdGlvbhIkCgVwcmljZRgmIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNp",
            "bWFsEicKCHF1YW50aXR5GCcgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwS",
            "KQoKcGFpZF9wcmljZRhCIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEhcK",
            "Dm9yaWdfY2xpZW50X2lkGMwBIAEoDBISCglvcGVuX3RpbWUYzQEgASgDEi0K",
            "DW9yaWdfcXVhbnRpdHkYzgEgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwS",
            "JgoGdm9sdW1lGJcCIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEjAKEGRy",
            "b3BwZWRfcXVhbnRpdHkYmAEgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwS",
            "FQoMb2xkX29yZGVyX2lkGJkBIAEoDBIWCg1vcmlnX29yZGVyX2lkGMcCIAEo",
            "DBItCg50cmFkZXJfYmFsYW5jZRgzIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNp",
            "bWFsEisKDG9yZGVyX21hcmdpbhhMIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNp",
            "bWFsEi4KD3Bvc2l0aW9uX21hcmdpbhhOIAEoCzIVLmRpZ2l0ZXhfd2lyZS5E",
            "ZWNpbWFsEiMKBHVwbmwYTyABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIj",
            "CgNwbmwYmgEgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwSLgoOYWNjdW1f",
            "cXVhbnRpdHkYtQEgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwSMQoScG9z",
            "aXRpb25fY29udHJhY3RzGGggASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwS",
            "LgoPcG9zaXRpb25fdm9sdW1lGGkgASgLMhUuZGlnaXRleF93aXJlLkRlY2lt",
            "YWwSOgobcG9zaXRpb25fbGlxdWlkYXRpb25fdm9sdW1lGGogASgLMhUuZGln",
            "aXRleF93aXJlLkRlY2ltYWwSOQoacG9zaXRpb25fYmFua3J1cHRjeV92b2x1",
            "bWUYdSABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIyCg1wb3NpdGlvbl90",
            "eXBlGGsgASgOMhsuZGlnaXRleF93aXJlLk9yZGVyUG9zaXRpb24SLwoQbGFz",
            "dF90cmFkZV9wcmljZRhxIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEjIK",
            "E2xhc3RfdHJhZGVfcXVhbnRpdHkYdCABKAsyFS5kaWdpdGV4X3dpcmUuRGVj",
            "aW1hbBIdChRsYXN0X3RyYWRlX3RpbWVzdGFtcBioAiABKAMSLwoQYnV5X29y",
            "ZGVyX21hcmdpbhh2IAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEjAKEXNl",
            "bGxfb3JkZXJfbWFyZ2luGHcgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwS",
            "MgoSYnV5X29yZGVyX3F1YW50aXR5GLYBIAEoCzIVLmRpZ2l0ZXhfd2lyZS5E",
            "ZWNpbWFsEjMKE3NlbGxfb3JkZXJfcXVhbnRpdHkYtwEgASgLMhUuZGlnaXRl",
            "eF93aXJlLkRlY2ltYWwSKQoKbWFya19wcmljZRg0IAEoCzIVLmRpZ2l0ZXhf",
            "d2lyZS5EZWNpbWFsEjAKEHRyYWRlcl9iYWxhbmNlXzIYlgIgASgLMhUuZGln",
            "aXRleF93aXJlLkRlY2ltYWwSNAoUZnVsbF9wb3NpdGlvbl9tYXJnaW4YqgIg",
            "ASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwSNQoVZnVsbF9idXlfb3JkZXJf",
            "bWFyZ2luGKsCIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEjYKFmZ1bGxf",
            "c2VsbF9vcmRlcl9tYXJnaW4YrAIgASgLMhUuZGlnaXRleF93aXJlLkRlY2lt",
            "YWwSKgoGdHJhZGVzGC4gAygLMhouZGlnaXRleF93aXJlLlRyYWRlTWVzc2Fn",
            "ZRIuCgpyYXdfdHJhZGVzGFIgAygLMhouZGlnaXRleF93aXJlLlRyYWRlTWVz",
            "c2FnZSLMAQoZRXhjaGFuZ2VSYXRlVXBkYXRlTWVzc2FnZRIYChBjdXJyZW5j",
            "eV9wYWlyX2lkGC8gASgNEiUKBnZvbHVtZRgwIAEoCzIVLmRpZ2l0ZXhfd2ly",
            "ZS5EZWNpbWFsEicKCHF1YW50aXR5GCcgASgLMhUuZGlnaXRleF93aXJlLkRl",
            "Y2ltYWwSEwoKdW5yZWxpYWJsZRjRASABKAUSFQoMc291cmNlX2NvdW50GK0C",
            "IAEoBRIZChBwcmljZV91cGRhdGVyX2lkGK4CIAEoDCJvChNFeGNoYW5nZVJh",
            "dGVNZXNzYWdlEhgKEGN1cnJlbmN5X3BhaXJfaWQYLyABKA0SKQoKbWFya19w",
            "cmljZRg0IAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEhMKCnVucmVsaWFi",
            "bGUY0QEgASgFIrcBChRUcmFkZXJCYWxhbmNlTWVzc2FnZRITCgtjdXJyZW5j",
            "eV9pZBgxIAEoDRItCg50cmFkZXJfYmFsYW5jZRgzIAEoCzIVLmRpZ2l0ZXhf",
            "d2lyZS5EZWNpbWFsEisKDG9yZGVyX21hcmdpbhhMIAEoCzIVLmRpZ2l0ZXhf",
            "d2lyZS5EZWNpbWFsEi4KD3Bvc2l0aW9uX21hcmdpbhhOIAEoCzIVLmRpZ2l0",
            "ZXhfd2lyZS5EZWNpbWFsIuYKChRQb3NpdGlvbkV2ZW50TWVzc2FnZRI2ChFs",
            "aXF1aWRhdGVkX3RyYWRlcxioASADKAsyGi5kaWdpdGV4X3dpcmUuVHJhZGVN",
            "ZXNzYWdlEhkKEXRlcm1pbmF0ZWRfb3JkZXJzGGAgAygMEioKBm9yZGVycxhG",
            "IAMoCzIaLmRpZ2l0ZXhfd2lyZS5PcmRlck1lc3NhZ2USLQoOdHJhZGVyX2Jh",
            "bGFuY2UYMyABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIrCgxvcmRlcl9t",
            "YXJnaW4YTCABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIuCg9wb3NpdGlv",
            "bl9tYXJnaW4YTiABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIjCgR1cG5s",
            "GE8gASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwSIwoDcG5sGJoBIAEoCzIV",
            "LmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEi4KDmFjY3VtX3F1YW50aXR5GLUBIAEo",
            "CzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEjEKEnBvc2l0aW9uX2NvbnRyYWN0",
            "cxhoIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEi4KD3Bvc2l0aW9uX3Zv",
            "bHVtZRhpIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEjoKG3Bvc2l0aW9u",
            "X2xpcXVpZGF0aW9uX3ZvbHVtZRhqIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNp",
            "bWFsEjkKGnBvc2l0aW9uX2JhbmtydXB0Y3lfdm9sdW1lGHUgASgLMhUuZGln",
            "aXRleF93aXJlLkRlY2ltYWwSMgoNcG9zaXRpb25fdHlwZRhrIAEoDjIbLmRp",
            "Z2l0ZXhfd2lyZS5PcmRlclBvc2l0aW9uEi8KEGxhc3RfdHJhZGVfcHJpY2UY",
            "cSABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIyChNsYXN0X3RyYWRlX3F1",
            "YW50aXR5GHQgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwSHQoUbGFzdF90",
            "cmFkZV90aW1lc3RhbXAYqAIgASgDEi8KEGJ1eV9vcmRlcl9tYXJnaW4YdiAB",
            "KAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIwChFzZWxsX29yZGVyX21hcmdp",
            "bhh3IAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEjgKGHRyYWRlcl9iYWxh",
            "bmNlX2luY3JlbWVudBiGASABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIy",
            "ChJidXlfb3JkZXJfcXVhbnRpdHkYtgEgASgLMhUuZGlnaXRleF93aXJlLkRl",
            "Y2ltYWwSMwoTc2VsbF9vcmRlcl9xdWFudGl0eRi3ASABKAsyFS5kaWdpdGV4",
            "X3dpcmUuRGVjaW1hbBI0ChRmdWxsX3Bvc2l0aW9uX21hcmdpbhiqAiABKAsy",
            "FS5kaWdpdGV4X3dpcmUuRGVjaW1hbBI1ChVmdWxsX2J1eV9vcmRlcl9tYXJn",
            "aW4YqwIgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwSNgoWZnVsbF9zZWxs",
            "X29yZGVyX21hcmdpbhisAiABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIp",
            "CgptYXJrX3ByaWNlGDQgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwSMAoQ",
            "Zmxvb3JfbWFya19wcmljZRiHASABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1h",
            "bBIvCg9jZWlsX21hcmtfcHJpY2UYiAEgASgLMhUuZGlnaXRleF93aXJlLkRl",
            "Y2ltYWwiGQoXT3JkZXJCb29rUmVxdWVzdE1lc3NhZ2UigAEKFU9yZGVyQm9v",
            "a0VudHJ5TWVzc2FnZRIkCgVwcmljZRgmIAEoCzIVLmRpZ2l0ZXhfd2lyZS5E",
            "ZWNpbWFsEicKCHF1YW50aXR5GCcgASgLMhUuZGlnaXRleF93aXJlLkRlY2lt",
            "YWwSGAoPZW50cnlfdGltZXN0YW1wGJsBIAEoAyKsAQoaT3JkZXJCb29rVHJh",
            "ZGVFbnRyeU1lc3NhZ2USJAoFcHJpY2UYJiABKAsyFS5kaWdpdGV4X3dpcmUu",
            "RGVjaW1hbBInCghxdWFudGl0eRgnIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNp",
            "bWFsEhgKD2VudHJ5X3RpbWVzdGFtcBibASABKAMSJQoEc2lkZRghIAEoDjIX",
            "LmRpZ2l0ZXhfd2lyZS5PcmRlclNpZGUipwIKEE9yZGVyQm9va01lc3NhZ2US",
            "MQoEYmlkcxg1IAMoCzIjLmRpZ2l0ZXhfd2lyZS5PcmRlckJvb2tFbnRyeU1l",
            "c3NhZ2USMQoEYXNrcxg2IAMoCzIjLmRpZ2l0ZXhfd2lyZS5PcmRlckJvb2tF",
            "bnRyeU1lc3NhZ2USKQoKbWFya19wcmljZRg0IAEoCzIVLmRpZ2l0ZXhfd2ly",
            "ZS5EZWNpbWFsEi8KEGxhc3RfdHJhZGVfcHJpY2UYcSABKAsyFS5kaWdpdGV4",
            "X3dpcmUuRGVjaW1hbBIyChNsYXN0X3RyYWRlX3F1YW50aXR5GHQgASgLMhUu",
            "ZGlnaXRleF93aXJlLkRlY2ltYWwSHQoUbGFzdF90cmFkZV90aW1lc3RhbXAY",
            "qAIgASgDIuEDChdPcmRlckJvb2tVcGRhdGVkTWVzc2FnZRI4CgtiaWRfdXBk",
            "YXRlcxg6IAMoCzIjLmRpZ2l0ZXhfd2lyZS5PcmRlckJvb2tFbnRyeU1lc3Nh",
            "Z2USOAoLYXNrX3VwZGF0ZXMYOyADKAsyIy5kaWdpdGV4X3dpcmUuT3JkZXJC",
            "b29rRW50cnlNZXNzYWdlEjMKBnRyYWRlcxg8IAMoCzIjLmRpZ2l0ZXhfd2ly",
            "ZS5PcmRlckJvb2tFbnRyeU1lc3NhZ2USOgoHdHJhZGVzMhikAiADKAsyKC5k",
            "aWdpdGV4X3dpcmUuT3JkZXJCb29rVHJhZGVFbnRyeU1lc3NhZ2USKQoKbWFy",
            "a19wcmljZRg0IAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEhsKE2xhc3Rf",
            "ZnVsbF90aW1lc3RhbXAYNyABKAMSFQoNdXBkYXRlX3NlcmlhbBg4IAEoAxIv",
            "ChBsYXN0X3RyYWRlX3ByaWNlGHEgASgLMhUuZGlnaXRleF93aXJlLkRlY2lt",
            "YWwSMgoTbGFzdF90cmFkZV9xdWFudGl0eRh0IAEoCzIVLmRpZ2l0ZXhfd2ly",
            "ZS5EZWNpbWFsEh0KFGxhc3RfdHJhZGVfdGltZXN0YW1wGKgCIAEoAyINCgtQ",
            "aW5nTWVzc2FnZSJPCgtQb25nTWVzc2FnZRITCgtwaW5nX3NlbmRlchg9IAEo",
            "DRITCgtwaW5nX3NlcmlhbBg+IAEoBBIWCg5waW5nX3RpbWVzdGFtcBg/IAEo",
            "AyIYChZHZXRUcmFkZXJTdGF0dXNNZXNzYWdlIt0ECgxPcmRlck1lc3NhZ2US",
            "FwoPb3JkZXJfY2xpZW50X2lkGEcgASgMEhcKD29yZGVyX3RpbWVzdGFtcBhI",
            "IAEoAxIXCg9vcmRlcl90cmFkZXJfaWQYSSABKA0SKwoKb3JkZXJfdHlwZRgg",
            "IAEoDjIXLmRpZ2l0ZXhfd2lyZS5PcmRlclR5cGUSJQoEc2lkZRghIAEoDjIX",
            "LmRpZ2l0ZXhfd2lyZS5PcmRlclNpZGUSEAoIbGV2ZXJhZ2UYIiABKA0SLQoI",
            "ZHVyYXRpb24YIyABKA4yGy5kaWdpdGV4X3dpcmUuT3JkZXJEdXJhdGlvbhIk",
            "CgVwcmljZRgmIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEicKCHF1YW50",
            "aXR5GCcgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwSKQoKcGFpZF9wcmlj",
            "ZRhCIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEiYKBnZvbHVtZRiXAiAB",
            "KAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBITCgtjb250cmFjdF9pZBgpIAEo",
            "BBIWCg1vbGRfY2xpZW50X2lkGJkBIAEoDBIXCg5vcmlnX2NsaWVudF9pZBjM",
            "ASABKAwSEgoJb3Blbl90aW1lGM0BIAEoAxItCg1vcmlnX3F1YW50aXR5GM4B",
            "IAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEhMKCmlzX2Nsb3NpbmcYmAIg",
            "ASgFEhUKDG1heV9pbmNyZWFzZRilAiABKAUSFgoNb3JpZ19vcmRlcl9pZBjH",
            "AiABKAwiowoKE1RyYWRlclN0YXR1c01lc3NhZ2USLQoOdHJhZGVyX2JhbGFu",
            "Y2UYMyABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIrCgxvcmRlcl9tYXJn",
            "aW4YTCABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIuCg9wb3NpdGlvbl9t",
            "YXJnaW4YTiABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIjCgR1cG5sGE8g",
            "ASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwSIwoDcG5sGJoBIAEoCzIVLmRp",
            "Z2l0ZXhfd2lyZS5EZWNpbWFsEi4KDmFjY3VtX3F1YW50aXR5GLUBIAEoCzIV",
            "LmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEikKCm1hcmtfcHJpY2UYNCABKAsyFS5k",
            "aWdpdGV4X3dpcmUuRGVjaW1hbBIxChJwb3NpdGlvbl9jb250cmFjdHMYaCAB",
            "KAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIuCg9wb3NpdGlvbl92b2x1bWUY",
            "aSABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBI6Chtwb3NpdGlvbl9saXF1",
            "aWRhdGlvbl92b2x1bWUYaiABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBI5",
            "Chpwb3NpdGlvbl9iYW5rcnVwdGN5X3ZvbHVtZRh1IAEoCzIVLmRpZ2l0ZXhf",
            "d2lyZS5EZWNpbWFsEjIKDXBvc2l0aW9uX3R5cGUYayABKA4yGy5kaWdpdGV4",
            "X3dpcmUuT3JkZXJQb3NpdGlvbhIvChBsYXN0X3RyYWRlX3ByaWNlGHEgASgL",
            "MhUuZGlnaXRleF93aXJlLkRlY2ltYWwSMgoTbGFzdF90cmFkZV9xdWFudGl0",
            "eRh0IAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEh0KFGxhc3RfdHJhZGVf",
            "dGltZXN0YW1wGKgCIAEoAxIvChBidXlfb3JkZXJfbWFyZ2luGHYgASgLMhUu",
            "ZGlnaXRleF93aXJlLkRlY2ltYWwSMAoRc2VsbF9vcmRlcl9tYXJnaW4YdyAB",
            "KAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIqCgZ0cmFkZXMYLiADKAsyGi5k",
            "aWdpdGV4X3dpcmUuVHJhZGVNZXNzYWdlEioKBm9yZGVycxhGIAMoCzIaLmRp",
            "Z2l0ZXhfd2lyZS5PcmRlck1lc3NhZ2USEAoIbGV2ZXJhZ2UYIiABKA0SMgoS",
            "YnV5X29yZGVyX3F1YW50aXR5GLYBIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNp",
            "bWFsEjMKE3NlbGxfb3JkZXJfcXVhbnRpdHkYtwEgASgLMhUuZGlnaXRleF93",
            "aXJlLkRlY2ltYWwSMAoQdHJhZGVyX2JhbGFuY2VfMhiWAiABKAsyFS5kaWdp",
            "dGV4X3dpcmUuRGVjaW1hbBI8Cg9kZWxheWVkX2FjdGlvbnMYoAIgAygLMiIu",
            "ZGlnaXRleF93aXJlLkRlbGF5ZWRBY3Rpb25NZXNzYWdlEjQKFGZ1bGxfcG9z",
            "aXRpb25fbWFyZ2luGKoCIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEjUK",
            "FWZ1bGxfYnV5X29yZGVyX21hcmdpbhirAiABKAsyFS5kaWdpdGV4X3dpcmUu",
            "RGVjaW1hbBI2ChZmdWxsX3NlbGxfb3JkZXJfbWFyZ2luGKwCIAEoCzIVLmRp",
            "Z2l0ZXhfd2lyZS5EZWNpbWFsIpkKCg5GdW5kaW5nTWVzc2FnZRIqCgZ0cmFk",
            "ZXMYLiADKAsyGi5kaWdpdGV4X3dpcmUuVHJhZGVNZXNzYWdlEi0KDnRyYWRl",
            "cl9iYWxhbmNlGDMgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwSKwoMb3Jk",
            "ZXJfbWFyZ2luGEwgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwSLgoPcG9z",
            "aXRpb25fbWFyZ2luGE4gASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwSIwoE",
            "dXBubBhPIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEiMKA3BubBiaASAB",
            "KAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIuCg5hY2N1bV9xdWFudGl0eRi1",
            "ASABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIxChJwb3NpdGlvbl9jb250",
            "cmFjdHMYaCABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIuCg9wb3NpdGlv",
            "bl92b2x1bWUYaSABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBI6Chtwb3Np",
            "dGlvbl9saXF1aWRhdGlvbl92b2x1bWUYaiABKAsyFS5kaWdpdGV4X3dpcmUu",
            "RGVjaW1hbBI5Chpwb3NpdGlvbl9iYW5rcnVwdGN5X3ZvbHVtZRh1IAEoCzIV",
            "LmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEjIKDXBvc2l0aW9uX3R5cGUYayABKA4y",
            "Gy5kaWdpdGV4X3dpcmUuT3JkZXJQb3NpdGlvbhIvChBidXlfb3JkZXJfbWFy",
            "Z2luGHYgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwSMAoRc2VsbF9vcmRl",
            "cl9tYXJnaW4YdyABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIyChNwYXlv",
            "dXRfcGVyX2NvbnRyYWN0GGYgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwS",
            "JQoGcGF5b3V0GGUgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwSLwoQbGFz",
            "dF90cmFkZV9wcmljZRhxIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEjIK",
            "E2xhc3RfdHJhZGVfcXVhbnRpdHkYdCABKAsyFS5kaWdpdGV4X3dpcmUuRGVj",
            "aW1hbBIdChRsYXN0X3RyYWRlX3RpbWVzdGFtcBioAiABKAMSKQoKbWFya19w",
            "cmljZRg0IAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEjYKFnBvc2l0aW9u",
            "X21hcmdpbl9jaGFuZ2UYowEgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwS",
            "MgoSYnV5X29yZGVyX3F1YW50aXR5GLYBIAEoCzIVLmRpZ2l0ZXhfd2lyZS5E",
            "ZWNpbWFsEjMKE3NlbGxfb3JkZXJfcXVhbnRpdHkYtwEgASgLMhUuZGlnaXRl",
            "eF93aXJlLkRlY2ltYWwSNAoUZnVsbF9wb3NpdGlvbl9tYXJnaW4YqgIgASgL",
            "MhUuZGlnaXRleF93aXJlLkRlY2ltYWwSNQoVZnVsbF9idXlfb3JkZXJfbWFy",
            "Z2luGKsCIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEjYKFmZ1bGxfc2Vs",
            "bF9vcmRlcl9tYXJnaW4YrAIgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwS",
            "FAoMZnVuZGluZ190aW1lGH8gASgDIqoCCgxPSExDVk1lc3NhZ2USKQoKb3Bl",
            "bl9wcmljZRhXIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEikKCmhpZ2hf",
            "cHJpY2UYWCABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIoCglsb3dfcHJp",
            "Y2UYWSABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIqCgtjbG9zZV9wcmlj",
            "ZRhaIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEiUKBnZvbHVtZRgwIAEo",
            "CzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEjQKFGF2ZXJhZ2Vfb3JhY2xlX3By",
            "aWNlGIIBIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEhEKCXRpbWVzdGFt",
            "cBgCIAEoAyJEChBTdWJzY3JpYmVNZXNzYWdlEhYKDnN1YnNjcmliZV9tYXNr",
            "GF4gASgEEhgKEHVuc3Vic2NyaWJlX21hc2sYXyABKAQiMAoWU3Vic2NyaWJl",
            "U3RhdHVzTWVzc2FnZRIWCg5zdWJzY3JpYmVfbWFzaxheIAEoBCKnAQoUQ2xv",
            "c2VDb250cmFjdE1lc3NhZ2USEwoLY29udHJhY3RfaWQYKSABKAQSKwoKb3Jk",
            "ZXJfdHlwZRggIAEoDjIXLmRpZ2l0ZXhfd2lyZS5PcmRlclR5cGUSJAoFcHJp",
            "Y2UYJiABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBInCghxdWFudGl0eRgn",
            "IAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsIm0KGENsb3NlQWxsQ29udHJh",
            "Y3RzTWVzc2FnZRIrCgpvcmRlcl90eXBlGCAgASgOMhcuZGlnaXRleF93aXJl",
            "Lk9yZGVyVHlwZRIkCgVwcmljZRgmIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNp",
            "bWFsIuwGChRPcmRlckNhbmNlbGVkTWVzc2FnZRIpCgZzdGF0dXMYKiABKA4y",
            "GS5kaWdpdGV4X3dpcmUuT3JkZXJTdGF0dXMSFgoOcHJldl9jbGllbnRfaWQY",
            "KCABKAwSEQoJb3JkZXJfaWRzGGcgAygMEioKBm9yZGVycxhGIAMoCzIaLmRp",
            "Z2l0ZXhfd2lyZS5PcmRlck1lc3NhZ2USLQoOdHJhZGVyX2JhbGFuY2UYMyAB",
            "KAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIrCgxvcmRlcl9tYXJnaW4YTCAB",
            "KAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIuCg9wb3NpdGlvbl9tYXJnaW4Y",
            "TiABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIjCgR1cG5sGE8gASgLMhUu",
            "ZGlnaXRleF93aXJlLkRlY2ltYWwSIwoDcG5sGJoBIAEoCzIVLmRpZ2l0ZXhf",
            "d2lyZS5EZWNpbWFsEi4KDmFjY3VtX3F1YW50aXR5GLUBIAEoCzIVLmRpZ2l0",
            "ZXhfd2lyZS5EZWNpbWFsEi8KEGJ1eV9vcmRlcl9tYXJnaW4YdiABKAsyFS5k",
            "aWdpdGV4X3dpcmUuRGVjaW1hbBIwChFzZWxsX29yZGVyX21hcmdpbhh3IAEo",
            "CzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEjIKEmJ1eV9vcmRlcl9xdWFudGl0",
            "eRi2ASABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIzChNzZWxsX29yZGVy",
            "X3F1YW50aXR5GLcBIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEjAKEHRy",
            "YWRlcl9iYWxhbmNlXzIYlgIgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwS",
            "NAoUZnVsbF9wb3NpdGlvbl9tYXJnaW4YqgIgASgLMhUuZGlnaXRleF93aXJl",
            "LkRlY2ltYWwSNQoVZnVsbF9idXlfb3JkZXJfbWFyZ2luGKsCIAEoCzIVLmRp",
            "Z2l0ZXhfd2lyZS5EZWNpbWFsEjYKFmZ1bGxfc2VsbF9vcmRlcl9tYXJnaW4Y",
            "rAIgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwSKQoKbWFya19wcmljZRg0",
            "IAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsIhcKFUdldE1hcmtldFN0YXRl",
            "TWVzc2FnZSLVAQoWRGFpbHlTdGF0aXN0aWNzTWVzc2FnZRIXCg9zdGFydF90",
            "aW1lc3RhbXAYfCABKAMSJQoGdm9sdW1lGH0gASgLMhUuZGlnaXRleF93aXJl",
            "LkRlY2ltYWwSJAoFZ3Jvc3MYfiABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1h",
            "bBIqCgpoaWdoX3ByaWNlGJwBIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFs",
            "EikKCWxvd19wcmljZRidASABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbCKg",
            "BgoSTWFya2V0U3RhdGVNZXNzYWdlEioKBnRyYWRlcxguIAMoCzIaLmRpZ2l0",
            "ZXhfd2lyZS5UcmFkZU1lc3NhZ2USKgoGb2hsY3ZzGFsgAygLMhouZGlnaXRl",
            "eF93aXJlLk9ITENWTWVzc2FnZRIvChBsYXN0X3RyYWRlX3ByaWNlGHEgASgL",
            "MhUuZGlnaXRleF93aXJlLkRlY2ltYWwSMgoTbGFzdF90cmFkZV9xdWFudGl0",
            "eRh0IAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEh0KFGxhc3RfdHJhZGVf",
            "dGltZXN0YW1wGKgCIAEoAxIXCg9ldmVudF90aW1lc3RhbXAYeiABKAMSOQoL",
            "ZGFpbHlfc3RhdHMYeyADKAsyJC5kaWdpdGV4X3dpcmUuRGFpbHlTdGF0aXN0",
            "aWNzTWVzc2FnZRIUCgxmdW5kaW5nX3RpbWUYfyABKAMSLAoMZnVuZGluZ19y",
            "YXRlGIABIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEjEKEW5leHRfZnVu",
            "ZGluZ19yYXRlGIEBIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEioKCnRp",
            "Y2tfdmFsdWUYgwEgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwSKgoKdGlj",
            "a19wcmljZRiEASABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIuCg5jb250",
            "cmFjdF92YWx1ZRiFASABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIZChBm",
            "dW5kaW5nX2ludGVydmFsGKIBIAEoAxIyChNwYXlvdXRfcGVyX2NvbnRyYWN0",
            "GGYgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwSGAoPYWxlcnRfdGltZXN0",
            "YW1wGNIBIAEoAxITCgphbGVydF90ZXh0GNMBIAEoCRItCg1vcGVuX2ludGVy",
            "ZXN0GKcCIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEi4KDmluc3VyYW5j",
            "ZV9mdW5kGKkCIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsIoQJChhNYXJr",
            "ZXRTdGF0ZVVwZGF0ZU1lc3NhZ2USKgoGdHJhZGVzGC4gAygLMhouZGlnaXRl",
            "eF93aXJlLlRyYWRlTWVzc2FnZRIqCgZvaGxjdnMYWyADKAsyGi5kaWdpdGV4",
            "X3dpcmUuT0hMQ1ZNZXNzYWdlEi8KEGxhc3RfdHJhZGVfcHJpY2UYcSABKAsy",
            "FS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIyChNsYXN0X3RyYWRlX3F1YW50aXR5",
            "GHQgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwSHQoUbGFzdF90cmFkZV90",
            "aW1lc3RhbXAYqAIgASgDEhcKD2V2ZW50X3RpbWVzdGFtcBh6IAEoAxI5Cgtk",
            "YWlseV9zdGF0cxh7IAMoCzIkLmRpZ2l0ZXhfd2lyZS5EYWlseVN0YXRpc3Rp",
            "Y3NNZXNzYWdlEhQKDGZ1bmRpbmdfdGltZRh/IAEoAxIsCgxmdW5kaW5nX3Jh",
            "dGUYgAEgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwSGQoQZnVuZGluZ19p",
            "bnRlcnZhbBiiASABKAMSNAoUaW1wYWN0X2Jhc2VfcXVhbnRpdHkYiQEgASgL",
            "MhUuZGlnaXRleF93aXJlLkRlY2ltYWwSMgoSZGd0eF90b19iYXNlX3ByaWNl",
            "GIoBIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFsEiwKDGltcGFjdF92YWx1",
            "ZRieASABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIvCg9pbXBhY3RfcXVh",
            "bnRpdHkYjAEgASgLMhUuZGlnaXRleF93aXJlLkRlY2ltYWwSMAoQaW1wYWN0",
            "X2JpZF92YWx1ZRiNASABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIwChBp",
            "bXBhY3RfYmlkX2NvdW50GJ8BIAEoCzIVLmRpZ2l0ZXhfd2lyZS5EZWNpbWFs",
            "EjAKEGltcGFjdF9hc2tfdmFsdWUYjgEgASgLMhUuZGlnaXRleF93aXJlLkRl",
            "Y2ltYWwSMAoQaW1wYWN0X2Fza19jb3VudBigASABKAsyFS5kaWdpdGV4X3dp",
            "cmUuRGVjaW1hbBIsCgxmdXR1cmVfdmFsdWUYjwEgASgLMhUuZGlnaXRleF93",
            "aXJlLkRlY2ltYWwSLAoMZnV0dXJlX2NvdW50GKEBIAEoCzIVLmRpZ2l0ZXhf",
            "d2lyZS5EZWNpbWFsEioKCnNwb3RfcHJpY2UYiwEgASgLMhUuZGlnaXRleF93",
            "aXJlLkRlY2ltYWwSMgoTcGF5b3V0X3Blcl9jb250cmFjdBhmIAEoCzIVLmRp",
            "Z2l0ZXhfd2lyZS5EZWNpbWFsEhgKD2FsZXJ0X3RpbWVzdGFtcBjSASABKAMS",
            "EwoKYWxlcnRfdGV4dBjTASABKAkSLQoNb3Blbl9pbnRlcmVzdBinAiABKAsy",
            "FS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIuCg5pbnN1cmFuY2VfZnVuZBipAiAB",
            "KAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbCIZChdHZXRFeGNoYW5nZVJhdGVz",
            "TWVzc2FnZSKNAQoXRXhjaGFuZ2VSYXRlSXRlbU1lc3NhZ2USGAoQY3VycmVu",
            "Y3lfcGFpcl9pZBgvIAEoDRIpCgptYXJrX3ByaWNlGDQgASgLMhUuZGlnaXRl",
            "eF93aXJlLkRlY2ltYWwSGAoQbGFzdF91cGRhdGVfdGltZRh5IAEoAxITCgp1",
            "bnJlbGlhYmxlGNEBIAEoBSJMChRFeGNoYW5nZVJhdGVzTWVzc2FnZRI0CgVp",
            "dGVtcxh4IAMoCzIlLmRpZ2l0ZXhfd2lyZS5FeGNoYW5nZVJhdGVJdGVtTWVz",
            "c2FnZSIqChVDb250cmFjdENsb3NlZE1lc3NhZ2USEQoJb3JkZXJfaWRzGGcg",
            "AygMIi4KF0dldFRyYWRlckJhbGFuY2VNZXNzYWdlEhMKC2N1cnJlbmN5X2lk",
            "GDEgASgNIpkDChREZWxheWVkQWN0aW9uTWVzc2FnZRIhChhkZWxheWVkX2Fj",
            "dGlvbl90aW1lc3RhbXAYowIgASgDEiEKGGRlbGF5ZWRfYWN0aW9uX2NsaWVu",
            "dF9pZBihAiABKAwSJQocb2xkX2RlbGF5ZWRfYWN0aW9uX2NsaWVudF9pZBii",
            "AiABKAwSNQoLYWN0aW9uX3R5cGUYmQIgASgOMh8uZGlnaXRleF93aXJlLkRl",
            "bGF5ZWRBY3Rpb25UeXBlEj8KEHRyaWdnZXJfdmFyaWFibGUYmgIgASgOMiQu",
            "ZGlnaXRleF93aXJlLkRlbGF5ZWRUcmlnZ2VyVmFyaWFibGUSQQoRdHJpZ2dl",
            "cl9jb25kaXRpb24YmwIgASgOMiUuZGlnaXRleF93aXJlLkRlbGF5ZWRUcmln",
            "Z2VyQ29uZGl0aW9uEi0KDXRyaWdnZXJfdmFsdWUYnAIgASgLMhUuZGlnaXRl",
            "eF93aXJlLkRlY2ltYWwSKgoFb3JkZXIYnwIgASgLMhouZGlnaXRleF93aXJl",
            "Lk9yZGVyTWVzc2FnZSJYChlQbGFjZURlbGF5ZWRBY3Rpb25NZXNzYWdlEjsK",
            "DmRlbGF5ZWRfYWN0aW9uGJ0CIAEoCzIiLmRpZ2l0ZXhfd2lyZS5EZWxheWVk",
            "QWN0aW9uTWVzc2FnZSJxChpVcGRhdGVEZWxheWVkQWN0aW9uTWVzc2FnZRIW",
            "Cg5wcmV2X2NsaWVudF9pZBgoIAEoDBI7Cg5kZWxheWVkX2FjdGlvbhidAiAB",
            "KAsyIi5kaWdpdGV4X3dpcmUuRGVsYXllZEFjdGlvbk1lc3NhZ2UiTQoaQ2Fu",
            "Y2VsRGVsYXllZEFjdGlvbk1lc3NhZ2USFgoOcHJldl9jbGllbnRfaWQYKCAB",
            "KAwSFwoOYWxsX2Zvcl90cmFkZXIYngIgASgFIoUBChpEZWxheWVkQWN0aW9u",
            "U3RhdHVzTWVzc2FnZRIpCgZzdGF0dXMYKiABKA4yGS5kaWdpdGV4X3dpcmUu",
            "T3JkZXJTdGF0dXMSPAoPZGVsYXllZF9hY3Rpb25zGKACIAMoCzIiLmRpZ2l0",
            "ZXhfd2lyZS5EZWxheWVkQWN0aW9uTWVzc2FnZSK9AQoXTGlxdWlkYXRpb25F",
            "bnRyeU1lc3NhZ2USMAoRbGlxdWlkYXRpb25fcHJpY2UYQyABKAsyFS5kaWdp",
            "dGV4X3dpcmUuRGVjaW1hbBInCghxdWFudGl0eRgnIAEoCzIVLmRpZ2l0ZXhf",
            "d2lyZS5EZWNpbWFsEhgKD2VudHJ5X3RpbWVzdGFtcBibASABKAMSLQoIcG9z",
            "aXRpb24YLSABKA4yGy5kaWdpdGV4X3dpcmUuT3JkZXJQb3NpdGlvbiJaChNM",
            "aXF1aWRhdGlvbnNNZXNzYWdlEkMKE2xpcXVpZGF0aW9uX2VudHJpZXMYpgIg",
            "AygLMiUuZGlnaXRleF93aXJlLkxpcXVpZGF0aW9uRW50cnlNZXNzYWdlIrsB",
            "ChJGdW5kaW5nSW5mb01lc3NhZ2USFAoMZnVuZGluZ190aW1lGH8gASgDEiwK",
            "DGZ1bmRpbmdfcmF0ZRiAASABKAsyFS5kaWdpdGV4X3dpcmUuRGVjaW1hbBIy",
            "ChNwYXlvdXRfcGVyX2NvbnRyYWN0GGYgASgLMhUuZGlnaXRleF93aXJlLkRl",
            "Y2ltYWwSLQoNb3Blbl9pbnRlcmVzdBinAiABKAsyFS5kaWdpdGV4X3dpcmUu",
            "RGVjaW1hbCIOCgxFcnJvck1lc3NhZ2UijxUKB01lc3NhZ2USEQoJdGltZXN0",
            "YW1wGAIgASgDEg4KBnNlcmlhbBgEIAEoBBIRCgltYXJrZXRfaWQYBSABKA0S",
            "EQoJdHJhZGVyX2lkGAYgASgNEhEKCWNsaWVudF9pZBgHIAEoDBISCgplcnJv",
            "cl9jb2RlGCsgASgNEhIKCnNlc3Npb25faWQYCCABKAMSDAoEYXV0aBgJIAEo",
            "DBI7Cg9wbGFjZV9vcmRlcl9tc2cYgQQgASgLMh8uZGlnaXRleF93aXJlLlBs",
            "YWNlT3JkZXJNZXNzYWdlSAASPQoQY2FuY2VsX29yZGVyX21zZxiCBCABKAsy",
            "IC5kaWdpdGV4X3dpcmUuQ2FuY2VsT3JkZXJNZXNzYWdlSAASRgoVY2FuY2Vs",
            "X2FsbF9vcmRlcnNfbXNnGIMEIAEoCzIkLmRpZ2l0ZXhfd2lyZS5DYW5jZWxB",
            "bGxPcmRlcnNNZXNzYWdlSAASPQoQb3JkZXJfc3RhdHVzX21zZxiFBCABKAsy",
            "IC5kaWdpdGV4X3dpcmUuT3JkZXJTdGF0dXNNZXNzYWdlSAASPQoQb3JkZXJf",
            "ZmlsbGVkX21zZxiGBCABKAsyIC5kaWdpdGV4X3dpcmUuT3JkZXJGaWxsZWRN",
            "ZXNzYWdlSAASSgoXY2hhbmdlX2xldmVyYWdlX2FsbF9tc2cYhwQgASgLMiYu",
            "ZGlnaXRleF93aXJlLkNoYW5nZUxldmVyYWdlQWxsTWVzc2FnZUgAEkEKEnRy",
            "YWRlcl9iYWxhbmNlX21zZxiKBCABKAsyIi5kaWdpdGV4X3dpcmUuVHJhZGVy",
            "QmFsYW5jZU1lc3NhZ2VIABJBChJwb3NpdGlvbl9ldmVudF9tc2cYiwQgASgL",
            "MiIuZGlnaXRleF93aXJlLlBvc2l0aW9uRXZlbnRNZXNzYWdlSAASNgoMbGV2",
            "ZXJhZ2VfbXNnGIwEIAEoCzIdLmRpZ2l0ZXhfd2lyZS5MZXZlcmFnZU1lc3Nh",
            "Z2VIABI/ChFleGNoYW5nZV9yYXRlX21zZxiNBCABKAsyIS5kaWdpdGV4X3dp",
            "cmUuRXhjaGFuZ2VSYXRlTWVzc2FnZUgAEkgKFm9yZGVyX2Jvb2tfcmVxdWVz",
            "dF9tc2cYjgQgASgLMiUuZGlnaXRleF93aXJlLk9yZGVyQm9va1JlcXVlc3RN",
            "ZXNzYWdlSAASOQoOb3JkZXJfYm9va19tc2cYjwQgASgLMh4uZGlnaXRleF93",
            "aXJlLk9yZGVyQm9va01lc3NhZ2VIABJIChZvcmRlcl9ib29rX3VwZGF0ZWRf",
            "bXNnGJAEIAEoCzIlLmRpZ2l0ZXhfd2lyZS5PcmRlckJvb2tVcGRhdGVkTWVz",
            "c2FnZUgAEi4KCHBpbmdfbXNnGJEEIAEoCzIZLmRpZ2l0ZXhfd2lyZS5QaW5n",
            "TWVzc2FnZUgAEi4KCHBvbmdfbXNnGJIEIAEoCzIZLmRpZ2l0ZXhfd2lyZS5Q",
            "b25nTWVzc2FnZUgAEj0KEHVwZGF0ZV9vcmRlcl9tc2cYkwQgASgLMiAuZGln",
            "aXRleF93aXJlLlVwZGF0ZU9yZGVyTWVzc2FnZUgAEkYKFWdldF90cmFkZXJf",
            "c3RhdHVzX21zZxiUBCABKAsyJC5kaWdpdGV4X3dpcmUuR2V0VHJhZGVyU3Rh",
            "dHVzTWVzc2FnZUgAEj8KEXRyYWRlcl9zdGF0dXNfbXNnGJUEIAEoCzIhLmRp",
            "Z2l0ZXhfd2lyZS5UcmFkZXJTdGF0dXNNZXNzYWdlSAASNAoLZnVuZGluZ19t",
            "c2cYlwQgASgLMhwuZGlnaXRleF93aXJlLkZ1bmRpbmdNZXNzYWdlSAASOAoN",
            "c3Vic2NyaWJlX21zZxiaBCABKAsyHi5kaWdpdGV4X3dpcmUuU3Vic2NyaWJl",
            "TWVzc2FnZUgAEkUKFHN1YnNjcmliZV9zdGF0dXNfbXNnGJsEIAEoCzIkLmRp",
            "Z2l0ZXhfd2lyZS5TdWJzY3JpYmVTdGF0dXNNZXNzYWdlSAASQQoSY2xvc2Vf",
            "Y29udHJhY3RfbXNnGJ4EIAEoCzIiLmRpZ2l0ZXhfd2lyZS5DbG9zZUNvbnRy",
            "YWN0TWVzc2FnZUgAEkoKF2Nsb3NlX2FsbF9jb250cmFjdHNfbXNnGJ8EIAEo",
            "CzImLmRpZ2l0ZXhfd2lyZS5DbG9zZUFsbENvbnRyYWN0c01lc3NhZ2VIABJB",
            "ChJvcmRlcl9jYW5jZWxlZF9tc2cYogQgASgLMiIuZGlnaXRleF93aXJlLk9y",
            "ZGVyQ2FuY2VsZWRNZXNzYWdlSAASRAoUZ2V0X21hcmtldF9zdGF0ZV9tc2cY",
            "pAQgASgLMiMuZGlnaXRleF93aXJlLkdldE1hcmtldFN0YXRlTWVzc2FnZUgA",
            "Ej0KEG1hcmtldF9zdGF0ZV9tc2cYpQQgASgLMiAuZGlnaXRleF93aXJlLk1h",
            "cmtldFN0YXRlTWVzc2FnZUgAEkgKFmdldF9leGNoYW5nZV9yYXRlc19tc2cY",
            "pgQgASgLMiUuZGlnaXRleF93aXJlLkdldEV4Y2hhbmdlUmF0ZXNNZXNzYWdl",
            "SAASQQoSZXhjaGFuZ2VfcmF0ZXNfbXNnGKcEIAEoCzIiLmRpZ2l0ZXhfd2ly",
            "ZS5FeGNoYW5nZVJhdGVzTWVzc2FnZUgAEkoKF21hcmtldF9zdGF0ZV91cGRh",
            "dGVfbXNnGKgEIAEoCzImLmRpZ2l0ZXhfd2lyZS5NYXJrZXRTdGF0ZVVwZGF0",
            "ZU1lc3NhZ2VIABJDChNjb250cmFjdF9jbG9zZWRfbXNnGKkEIAEoCzIjLmRp",
            "Z2l0ZXhfd2lyZS5Db250cmFjdENsb3NlZE1lc3NhZ2VIABJIChZnZXRfdHJh",
            "ZGVyX2JhbGFuY2VfbXNnGLIEIAEoCzIlLmRpZ2l0ZXhfd2lyZS5HZXRUcmFk",
            "ZXJCYWxhbmNlTWVzc2FnZUgAEkwKGHBsYWNlX2RlbGF5ZWRfYWN0aW9uX21z",
            "Zxi2BCABKAsyJy5kaWdpdGV4X3dpcmUuUGxhY2VEZWxheWVkQWN0aW9uTWVz",
            "c2FnZUgAEk4KGXVwZGF0ZV9kZWxheWVkX2FjdGlvbl9tc2cYtwQgASgLMigu",
            "ZGlnaXRleF93aXJlLlVwZGF0ZURlbGF5ZWRBY3Rpb25NZXNzYWdlSAASTgoZ",
            "Y2FuY2VsX2RlbGF5ZWRfYWN0aW9uX21zZxi4BCABKAsyKC5kaWdpdGV4X3dp",
            "cmUuQ2FuY2VsRGVsYXllZEFjdGlvbk1lc3NhZ2VIABJOChlkZWxheWVkX2Fj",
            "dGlvbl9zdGF0dXNfbXNnGLkEIAEoCzIoLmRpZ2l0ZXhfd2lyZS5EZWxheWVk",
            "QWN0aW9uU3RhdHVzTWVzc2FnZUgAEj4KEGxpcXVpZGF0aW9uc19tc2cYugQg",
            "ASgLMiEuZGlnaXRleF93aXJlLkxpcXVpZGF0aW9uc01lc3NhZ2VIABI9ChBm",
            "dW5kaW5nX2luZm9fbXNnGLsEIAEoCzIgLmRpZ2l0ZXhfd2lyZS5GdW5kaW5n",
            "SW5mb01lc3NhZ2VIABIwCgllcnJvcl9tc2cYvAQgASgLMhouZGlnaXRleF93",
            "aXJlLkVycm9yTWVzc2FnZUgAQgkKB2tvbnRlbnQqMgoJT3JkZXJTaWRlEhIK",
            "DlNJREVfVU5ERUZJTkVEEAASBwoDQlVZEAESCAoEU0VMTBACKjYKCU9yZGVy",
            "VHlwZRISCg5UWVBFX1VOREVGSU5FRBAAEgoKBk1BUktFVBABEgkKBUxJTUlU",
            "EAIqVAoNT3JkZXJEdXJhdGlvbhIWChJEVVJBVElPTl9VTkRFRklORUQQABIH",
            "CgNHRkQQARIHCgNHVEMQAhIHCgNHVEYQAxIHCgNJT0MQBBIHCgNGT0sQBSqf",
            "AQoLT3JkZXJTdGF0dXMSFAoQU1RBVFVTX1VOREVGSU5FRBAAEgsKB1BFTkRJ",
            "TkcQARIMCghBQ0NFUFRFRBACEgwKCFJFSkVDVEVEEAMSDAoIQ0FOQ0VMRUQQ",
            "BBIKCgZGSUxMRUQQBRILCgdQQVJUSUFMEAYSDgoKVEVSTUlOQVRFRBAHEgsK",
            "B0VYUElSRUQQCBINCglUUklHR0VSRUQQCSozCg1PcmRlclBvc2l0aW9uEg0K",
            "CVVOREVGSU5FRBAAEggKBExPTkcQARIJCgVTSE9SVBACKjMKEURlbGF5ZWRB",
            "Y3Rpb25UeXBlEhAKDERBX1VOREVGSU5FRBAAEgwKCERBX09SREVSEAEqWwoW",
            "RGVsYXllZFRyaWdnZXJWYXJpYWJsZRIRCg1EVFZfVU5ERUZJTkVEEAASFAoQ",
            "RFRWX09SQUNMRV9QUklDRRABEhgKFERUVl9MQVNUX1RSQURFX1BSSUNFEAIq",
            "XQoXRGVsYXllZFRyaWdnZXJDb25kaXRpb24SEQoNRFRDX1VOREVGSU5FRBAA",
            "EhgKFERUQ19HUkVBVEVSX09SX0VRVUFMEAESFQoRRFRDX0xFU1NfT1JfRVFV",
            "QUwQAkIWChRjb20uc21hcnRkZWMuZGlnaXRleGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DigitexWire.OrderSide), typeof(global::DigitexWire.OrderType), typeof(global::DigitexWire.OrderDuration), typeof(global::DigitexWire.OrderStatus), typeof(global::DigitexWire.OrderPosition), typeof(global::DigitexWire.DelayedActionType), typeof(global::DigitexWire.DelayedTriggerVariable), typeof(global::DigitexWire.DelayedTriggerCondition), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.Decimal), global::DigitexWire.Decimal.Parser, new[]{ "Value64", "Scale" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.PlaceOrderMessage), global::DigitexWire.PlaceOrderMessage.Parser, new[]{ "OrderType", "Side", "Leverage", "Duration", "Price", "Quantity", "IsClosing" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.UpdateOrderMessage), global::DigitexWire.UpdateOrderMessage.Parser, new[]{ "PrevClientId", "OrderType", "Side", "Leverage", "Duration", "Price", "Quantity" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.CancelOrderMessage), global::DigitexWire.CancelOrderMessage.Parser, new[]{ "PrevClientId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.CancelAllOrdersMessage), global::DigitexWire.CancelAllOrdersMessage.Parser, new[]{ "Side", "Price" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.ChangeLeverageAllMessage), global::DigitexWire.ChangeLeverageAllMessage.Parser, new[]{ "Leverage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.OrderStatusMessage), global::DigitexWire.OrderStatusMessage.Parser, new[]{ "Status", "TraderBalance", "OrderMargin", "PositionMargin", "Upnl", "Pnl", "AccumQuantity", "BuyOrderMargin", "SellOrderMargin", "BuyOrderQuantity", "SellOrderQuantity", "TraderBalance2", "FullPositionMargin", "FullBuyOrderMargin", "FullSellOrderMargin", "PositionContracts", "PositionVolume", "PositionLiquidationVolume", "PositionBankruptcyVolume", "PositionType", "MarkPrice", "OrderType", "Side", "Leverage", "Duration", "Price", "Quantity", "PaidPrice", "OldContractId", "Volume", "IsClosing", "OrderClientId", "OrderTimestamp", "OrigClientId", "OpenTime", "OrigQuantity", "OrigOrderId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.LeverageMessage), global::DigitexWire.LeverageMessage.Parser, new[]{ "Leverage", "Trades", "Orders", "TraderBalance", "OrderMargin", "PositionMargin", "Upnl", "Pnl", "AccumQuantity", "PositionContracts", "PositionVolume", "PositionLiquidationVolume", "PositionBankruptcyVolume", "PositionType", "BuyOrderMargin", "SellOrderMargin", "LastTradePrice", "LastTradeQuantity", "LastTradeTimestamp", "BuyOrderQuantity", "SellOrderQuantity", "FullPositionMargin", "FullBuyOrderMargin", "FullSellOrderMargin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.TradeMessage), global::DigitexWire.TradeMessage.Parser, new[]{ "TradeTimestamp", "TradeTraderId", "Position", "Price", "PaidPrice", "LiquidationPrice", "BankruptcyPrice", "Quantity", "ExitPrice", "Leverage", "ContractId", "OldContractId", "OldClientId", "IsIncrease", "IsLiquidation", "OpenTime", "EntryQuantity", "ExitQuantity", "ExitVolume", "FundingPaidPrice", "FundingQuantity", "FundingVolume", "FundingCount", "IsFunding", "IsMaker", "OrigContractId", "IsSettlement", "Volume" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.OrderFilledMessage), global::DigitexWire.OrderFilledMessage.Parser, new[]{ "Status", "NewClientId", "OrderType", "Side", "Leverage", "Duration", "Price", "Quantity", "PaidPrice", "OrigClientId", "OpenTime", "OrigQuantity", "Volume", "DroppedQuantity", "OldOrderId", "OrigOrderId", "TraderBalance", "OrderMargin", "PositionMargin", "Upnl", "Pnl", "AccumQuantity", "PositionContracts", "PositionVolume", "PositionLiquidationVolume", "PositionBankruptcyVolume", "PositionType", "LastTradePrice", "LastTradeQuantity", "LastTradeTimestamp", "BuyOrderMargin", "SellOrderMargin", "BuyOrderQuantity", "SellOrderQuantity", "MarkPrice", "TraderBalance2", "FullPositionMargin", "FullBuyOrderMargin", "FullSellOrderMargin", "Trades", "RawTrades" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.ExchangeRateUpdateMessage), global::DigitexWire.ExchangeRateUpdateMessage.Parser, new[]{ "CurrencyPairId", "Volume", "Quantity", "Unreliable", "SourceCount", "PriceUpdaterId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.ExchangeRateMessage), global::DigitexWire.ExchangeRateMessage.Parser, new[]{ "CurrencyPairId", "MarkPrice", "Unreliable" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.TraderBalanceMessage), global::DigitexWire.TraderBalanceMessage.Parser, new[]{ "CurrencyId", "TraderBalance", "OrderMargin", "PositionMargin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.PositionEventMessage), global::DigitexWire.PositionEventMessage.Parser, new[]{ "LiquidatedTrades", "TerminatedOrders", "Orders", "TraderBalance", "OrderMargin", "PositionMargin", "Upnl", "Pnl", "AccumQuantity", "PositionContracts", "PositionVolume", "PositionLiquidationVolume", "PositionBankruptcyVolume", "PositionType", "LastTradePrice", "LastTradeQuantity", "LastTradeTimestamp", "BuyOrderMargin", "SellOrderMargin", "TraderBalanceIncrement", "BuyOrderQuantity", "SellOrderQuantity", "FullPositionMargin", "FullBuyOrderMargin", "FullSellOrderMargin", "MarkPrice", "FloorMarkPrice", "CeilMarkPrice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.OrderBookRequestMessage), global::DigitexWire.OrderBookRequestMessage.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.OrderBookEntryMessage), global::DigitexWire.OrderBookEntryMessage.Parser, new[]{ "Price", "Quantity", "EntryTimestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.OrderBookTradeEntryMessage), global::DigitexWire.OrderBookTradeEntryMessage.Parser, new[]{ "Price", "Quantity", "EntryTimestamp", "Side" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.OrderBookMessage), global::DigitexWire.OrderBookMessage.Parser, new[]{ "Bids", "Asks", "MarkPrice", "LastTradePrice", "LastTradeQuantity", "LastTradeTimestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.OrderBookUpdatedMessage), global::DigitexWire.OrderBookUpdatedMessage.Parser, new[]{ "BidUpdates", "AskUpdates", "Trades", "Trades2", "MarkPrice", "LastFullTimestamp", "UpdateSerial", "LastTradePrice", "LastTradeQuantity", "LastTradeTimestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.PingMessage), global::DigitexWire.PingMessage.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.PongMessage), global::DigitexWire.PongMessage.Parser, new[]{ "PingSender", "PingSerial", "PingTimestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.GetTraderStatusMessage), global::DigitexWire.GetTraderStatusMessage.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.OrderMessage), global::DigitexWire.OrderMessage.Parser, new[]{ "OrderClientId", "OrderTimestamp", "OrderTraderId", "OrderType", "Side", "Leverage", "Duration", "Price", "Quantity", "PaidPrice", "Volume", "ContractId", "OldClientId", "OrigClientId", "OpenTime", "OrigQuantity", "IsClosing", "MayIncrease", "OrigOrderId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.TraderStatusMessage), global::DigitexWire.TraderStatusMessage.Parser, new[]{ "TraderBalance", "OrderMargin", "PositionMargin", "Upnl", "Pnl", "AccumQuantity", "MarkPrice", "PositionContracts", "PositionVolume", "PositionLiquidationVolume", "PositionBankruptcyVolume", "PositionType", "LastTradePrice", "LastTradeQuantity", "LastTradeTimestamp", "BuyOrderMargin", "SellOrderMargin", "Trades", "Orders", "Leverage", "BuyOrderQuantity", "SellOrderQuantity", "TraderBalance2", "DelayedActions", "FullPositionMargin", "FullBuyOrderMargin", "FullSellOrderMargin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.FundingMessage), global::DigitexWire.FundingMessage.Parser, new[]{ "Trades", "TraderBalance", "OrderMargin", "PositionMargin", "Upnl", "Pnl", "AccumQuantity", "PositionContracts", "PositionVolume", "PositionLiquidationVolume", "PositionBankruptcyVolume", "PositionType", "BuyOrderMargin", "SellOrderMargin", "PayoutPerContract", "Payout", "LastTradePrice", "LastTradeQuantity", "LastTradeTimestamp", "MarkPrice", "PositionMarginChange", "BuyOrderQuantity", "SellOrderQuantity", "FullPositionMargin", "FullBuyOrderMargin", "FullSellOrderMargin", "FundingTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.OHLCVMessage), global::DigitexWire.OHLCVMessage.Parser, new[]{ "OpenPrice", "HighPrice", "LowPrice", "ClosePrice", "Volume", "AverageOraclePrice", "Timestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.SubscribeMessage), global::DigitexWire.SubscribeMessage.Parser, new[]{ "SubscribeMask", "UnsubscribeMask" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.SubscribeStatusMessage), global::DigitexWire.SubscribeStatusMessage.Parser, new[]{ "SubscribeMask" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.CloseContractMessage), global::DigitexWire.CloseContractMessage.Parser, new[]{ "ContractId", "OrderType", "Price", "Quantity" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.CloseAllContractsMessage), global::DigitexWire.CloseAllContractsMessage.Parser, new[]{ "OrderType", "Price" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.OrderCanceledMessage), global::DigitexWire.OrderCanceledMessage.Parser, new[]{ "Status", "PrevClientId", "OrderIds", "Orders", "TraderBalance", "OrderMargin", "PositionMargin", "Upnl", "Pnl", "AccumQuantity", "BuyOrderMargin", "SellOrderMargin", "BuyOrderQuantity", "SellOrderQuantity", "TraderBalance2", "FullPositionMargin", "FullBuyOrderMargin", "FullSellOrderMargin", "MarkPrice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.GetMarketStateMessage), global::DigitexWire.GetMarketStateMessage.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.DailyStatisticsMessage), global::DigitexWire.DailyStatisticsMessage.Parser, new[]{ "StartTimestamp", "Volume", "Gross", "HighPrice", "LowPrice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.MarketStateMessage), global::DigitexWire.MarketStateMessage.Parser, new[]{ "Trades", "Ohlcvs", "LastTradePrice", "LastTradeQuantity", "LastTradeTimestamp", "EventTimestamp", "DailyStats", "FundingTime", "FundingRate", "NextFundingRate", "TickValue", "TickPrice", "ContractValue", "FundingInterval", "PayoutPerContract", "AlertTimestamp", "AlertText", "OpenInterest", "InsuranceFund" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.MarketStateUpdateMessage), global::DigitexWire.MarketStateUpdateMessage.Parser, new[]{ "Trades", "Ohlcvs", "LastTradePrice", "LastTradeQuantity", "LastTradeTimestamp", "EventTimestamp", "DailyStats", "FundingTime", "FundingRate", "FundingInterval", "ImpactBaseQuantity", "DgtxToBasePrice", "ImpactValue", "ImpactQuantity", "ImpactBidValue", "ImpactBidCount", "ImpactAskValue", "ImpactAskCount", "FutureValue", "FutureCount", "SpotPrice", "PayoutPerContract", "AlertTimestamp", "AlertText", "OpenInterest", "InsuranceFund" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.GetExchangeRatesMessage), global::DigitexWire.GetExchangeRatesMessage.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.ExchangeRateItemMessage), global::DigitexWire.ExchangeRateItemMessage.Parser, new[]{ "CurrencyPairId", "MarkPrice", "LastUpdateTime", "Unreliable" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.ExchangeRatesMessage), global::DigitexWire.ExchangeRatesMessage.Parser, new[]{ "Items" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.ContractClosedMessage), global::DigitexWire.ContractClosedMessage.Parser, new[]{ "OrderIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.GetTraderBalanceMessage), global::DigitexWire.GetTraderBalanceMessage.Parser, new[]{ "CurrencyId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.DelayedActionMessage), global::DigitexWire.DelayedActionMessage.Parser, new[]{ "DelayedActionTimestamp", "DelayedActionClientId", "OldDelayedActionClientId", "ActionType", "TriggerVariable", "TriggerCondition", "TriggerValue", "Order" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.PlaceDelayedActionMessage), global::DigitexWire.PlaceDelayedActionMessage.Parser, new[]{ "DelayedAction" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.UpdateDelayedActionMessage), global::DigitexWire.UpdateDelayedActionMessage.Parser, new[]{ "PrevClientId", "DelayedAction" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.CancelDelayedActionMessage), global::DigitexWire.CancelDelayedActionMessage.Parser, new[]{ "PrevClientId", "AllForTrader" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.DelayedActionStatusMessage), global::DigitexWire.DelayedActionStatusMessage.Parser, new[]{ "Status", "DelayedActions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.LiquidationEntryMessage), global::DigitexWire.LiquidationEntryMessage.Parser, new[]{ "LiquidationPrice", "Quantity", "EntryTimestamp", "Position" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.LiquidationsMessage), global::DigitexWire.LiquidationsMessage.Parser, new[]{ "LiquidationEntries" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.FundingInfoMessage), global::DigitexWire.FundingInfoMessage.Parser, new[]{ "FundingTime", "FundingRate", "PayoutPerContract", "OpenInterest" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.ErrorMessage), global::DigitexWire.ErrorMessage.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DigitexWire.Message), global::DigitexWire.Message.Parser, new[]{ "Timestamp", "Serial", "MarketId", "TraderId", "ClientId", "ErrorCode", "SessionId", "Auth", "PlaceOrderMsg", "CancelOrderMsg", "CancelAllOrdersMsg", "OrderStatusMsg", "OrderFilledMsg", "ChangeLeverageAllMsg", "TraderBalanceMsg", "PositionEventMsg", "LeverageMsg", "ExchangeRateMsg", "OrderBookRequestMsg", "OrderBookMsg", "OrderBookUpdatedMsg", "PingMsg", "PongMsg", "UpdateOrderMsg", "GetTraderStatusMsg", "TraderStatusMsg", "FundingMsg", "SubscribeMsg", "SubscribeStatusMsg", "CloseContractMsg", "CloseAllContractsMsg", "OrderCanceledMsg", "GetMarketStateMsg", "MarketStateMsg", "GetExchangeRatesMsg", "ExchangeRatesMsg", "MarketStateUpdateMsg", "ContractClosedMsg", "GetTraderBalanceMsg", "PlaceDelayedActionMsg", "UpdateDelayedActionMsg", "CancelDelayedActionMsg", "DelayedActionStatusMsg", "LiquidationsMsg", "FundingInfoMsg", "ErrorMsg" }, new[]{ "Kontent" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum OrderSide {
    [pbr::OriginalName("SIDE_UNDEFINED")] SideUndefined = 0,
    [pbr::OriginalName("BUY")] Buy = 1,
    [pbr::OriginalName("SELL")] Sell = 2,
  }

  public enum OrderType {
    [pbr::OriginalName("TYPE_UNDEFINED")] TypeUndefined = 0,
    [pbr::OriginalName("MARKET")] Market = 1,
    [pbr::OriginalName("LIMIT")] Limit = 2,
  }

  public enum OrderDuration {
    [pbr::OriginalName("DURATION_UNDEFINED")] DurationUndefined = 0,
    /// <summary>
    /// good for the day
    /// </summary>
    [pbr::OriginalName("GFD")] Gfd = 1,
    /// <summary>
    /// good till cancel
    /// </summary>
    [pbr::OriginalName("GTC")] Gtc = 2,
    /// <summary>
    /// good till funding
    /// </summary>
    [pbr::OriginalName("GTF")] Gtf = 3,
    /// <summary>
    /// immediate or cancel
    /// </summary>
    [pbr::OriginalName("IOC")] Ioc = 4,
    /// <summary>
    /// fill or kill
    /// </summary>
    [pbr::OriginalName("FOK")] Fok = 5,
  }

  public enum OrderStatus {
    [pbr::OriginalName("STATUS_UNDEFINED")] StatusUndefined = 0,
    [pbr::OriginalName("PENDING")] Pending = 1,
    [pbr::OriginalName("ACCEPTED")] Accepted = 2,
    [pbr::OriginalName("REJECTED")] Rejected = 3,
    [pbr::OriginalName("CANCELED")] Canceled = 4,
    [pbr::OriginalName("FILLED")] Filled = 5,
    [pbr::OriginalName("PARTIAL")] Partial = 6,
    [pbr::OriginalName("TERMINATED")] Terminated = 7,
    [pbr::OriginalName("EXPIRED")] Expired = 8,
    [pbr::OriginalName("TRIGGERED")] Triggered = 9,
  }

  public enum OrderPosition {
    [pbr::OriginalName("UNDEFINED")] Undefined = 0,
    [pbr::OriginalName("LONG")] Long = 1,
    [pbr::OriginalName("SHORT")] Short = 2,
  }

  public enum DelayedActionType {
    [pbr::OriginalName("DA_UNDEFINED")] DaUndefined = 0,
    [pbr::OriginalName("DA_ORDER")] DaOrder = 1,
  }

  public enum DelayedTriggerVariable {
    [pbr::OriginalName("DTV_UNDEFINED")] DtvUndefined = 0,
    [pbr::OriginalName("DTV_ORACLE_PRICE")] DtvOraclePrice = 1,
    [pbr::OriginalName("DTV_LAST_TRADE_PRICE")] DtvLastTradePrice = 2,
  }

  public enum DelayedTriggerCondition {
    [pbr::OriginalName("DTC_UNDEFINED")] DtcUndefined = 0,
    [pbr::OriginalName("DTC_GREATER_OR_EQUAL")] DtcGreaterOrEqual = 1,
    [pbr::OriginalName("DTC_LESS_OR_EQUAL")] DtcLessOrEqual = 2,
  }

  #endregion

  #region Messages
  public sealed partial class Decimal : pb::IMessage<Decimal>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Decimal> _parser = new pb::MessageParser<Decimal>(() => new Decimal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Decimal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decimal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decimal(Decimal other) : this() {
      value64_ = other.value64_;
      scale_ = other.scale_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decimal Clone() {
      return new Decimal(this);
    }

    /// <summary>Field number for the "value64" field.</summary>
    public const int Value64FieldNumber = 36;
    private long value64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Value64 {
      get { return value64_; }
      set {
        value64_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 37;
    private uint scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Decimal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Decimal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value64 != other.Value64) return false;
      if (Scale != other.Scale) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value64 != 0L) hash ^= Value64.GetHashCode();
      if (Scale != 0) hash ^= Scale.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Value64 != 0L) {
        output.WriteRawTag(160, 2);
        output.WriteInt64(Value64);
      }
      if (Scale != 0) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(Scale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Value64 != 0L) {
        output.WriteRawTag(160, 2);
        output.WriteInt64(Value64);
      }
      if (Scale != 0) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(Scale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value64 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Value64);
      }
      if (Scale != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Scale);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Decimal other) {
      if (other == null) {
        return;
      }
      if (other.Value64 != 0L) {
        Value64 = other.Value64;
      }
      if (other.Scale != 0) {
        Scale = other.Scale;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 288: {
            Value64 = input.ReadInt64();
            break;
          }
          case 296: {
            Scale = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 288: {
            Value64 = input.ReadInt64();
            break;
          }
          case 296: {
            Scale = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlaceOrderMessage : pb::IMessage<PlaceOrderMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlaceOrderMessage> _parser = new pb::MessageParser<PlaceOrderMessage>(() => new PlaceOrderMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlaceOrderMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceOrderMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceOrderMessage(PlaceOrderMessage other) : this() {
      orderType_ = other.orderType_;
      side_ = other.side_;
      leverage_ = other.leverage_;
      duration_ = other.duration_;
      price_ = other.price_ != null ? other.price_.Clone() : null;
      quantity_ = other.quantity_ != null ? other.quantity_.Clone() : null;
      isClosing_ = other.isClosing_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceOrderMessage Clone() {
      return new PlaceOrderMessage(this);
    }

    /// <summary>Field number for the "order_type" field.</summary>
    public const int OrderTypeFieldNumber = 32;
    private global::DigitexWire.OrderType orderType_ = global::DigitexWire.OrderType.TypeUndefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderType OrderType {
      get { return orderType_; }
      set {
        orderType_ = value;
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 33;
    private global::DigitexWire.OrderSide side_ = global::DigitexWire.OrderSide.SideUndefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "leverage" field.</summary>
    public const int LeverageFieldNumber = 34;
    private uint leverage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Leverage {
      get { return leverage_; }
      set {
        leverage_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 35;
    private global::DigitexWire.OrderDuration duration_ = global::DigitexWire.OrderDuration.DurationUndefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderDuration Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 38;
    private global::DigitexWire.Decimal price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 39;
    private global::DigitexWire.Decimal quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "is_closing" field.</summary>
    public const int IsClosingFieldNumber = 280;
    private int isClosing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsClosing {
      get { return isClosing_; }
      set {
        isClosing_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlaceOrderMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlaceOrderMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderType != other.OrderType) return false;
      if (Side != other.Side) return false;
      if (Leverage != other.Leverage) return false;
      if (Duration != other.Duration) return false;
      if (!object.Equals(Price, other.Price)) return false;
      if (!object.Equals(Quantity, other.Quantity)) return false;
      if (IsClosing != other.IsClosing) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) hash ^= OrderType.GetHashCode();
      if (Side != global::DigitexWire.OrderSide.SideUndefined) hash ^= Side.GetHashCode();
      if (Leverage != 0) hash ^= Leverage.GetHashCode();
      if (Duration != global::DigitexWire.OrderDuration.DurationUndefined) hash ^= Duration.GetHashCode();
      if (price_ != null) hash ^= Price.GetHashCode();
      if (quantity_ != null) hash ^= Quantity.GetHashCode();
      if (IsClosing != 0) hash ^= IsClosing.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) OrderType);
      }
      if (Side != global::DigitexWire.OrderSide.SideUndefined) {
        output.WriteRawTag(136, 2);
        output.WriteEnum((int) Side);
      }
      if (Leverage != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(Leverage);
      }
      if (Duration != global::DigitexWire.OrderDuration.DurationUndefined) {
        output.WriteRawTag(152, 2);
        output.WriteEnum((int) Duration);
      }
      if (price_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(Price);
      }
      if (quantity_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Quantity);
      }
      if (IsClosing != 0) {
        output.WriteRawTag(192, 17);
        output.WriteInt32(IsClosing);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) OrderType);
      }
      if (Side != global::DigitexWire.OrderSide.SideUndefined) {
        output.WriteRawTag(136, 2);
        output.WriteEnum((int) Side);
      }
      if (Leverage != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(Leverage);
      }
      if (Duration != global::DigitexWire.OrderDuration.DurationUndefined) {
        output.WriteRawTag(152, 2);
        output.WriteEnum((int) Duration);
      }
      if (price_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(Price);
      }
      if (quantity_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Quantity);
      }
      if (IsClosing != 0) {
        output.WriteRawTag(192, 17);
        output.WriteInt32(IsClosing);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OrderType);
      }
      if (Side != global::DigitexWire.OrderSide.SideUndefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (Leverage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Leverage);
      }
      if (Duration != global::DigitexWire.OrderDuration.DurationUndefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Duration);
      }
      if (price_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Price);
      }
      if (quantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Quantity);
      }
      if (IsClosing != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsClosing);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlaceOrderMessage other) {
      if (other == null) {
        return;
      }
      if (other.OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        OrderType = other.OrderType;
      }
      if (other.Side != global::DigitexWire.OrderSide.SideUndefined) {
        Side = other.Side;
      }
      if (other.Leverage != 0) {
        Leverage = other.Leverage;
      }
      if (other.Duration != global::DigitexWire.OrderDuration.DurationUndefined) {
        Duration = other.Duration;
      }
      if (other.price_ != null) {
        if (price_ == null) {
          Price = new global::DigitexWire.Decimal();
        }
        Price.MergeFrom(other.Price);
      }
      if (other.quantity_ != null) {
        if (quantity_ == null) {
          Quantity = new global::DigitexWire.Decimal();
        }
        Quantity.MergeFrom(other.Quantity);
      }
      if (other.IsClosing != 0) {
        IsClosing = other.IsClosing;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 256: {
            OrderType = (global::DigitexWire.OrderType) input.ReadEnum();
            break;
          }
          case 264: {
            Side = (global::DigitexWire.OrderSide) input.ReadEnum();
            break;
          }
          case 272: {
            Leverage = input.ReadUInt32();
            break;
          }
          case 280: {
            Duration = (global::DigitexWire.OrderDuration) input.ReadEnum();
            break;
          }
          case 306: {
            if (price_ == null) {
              Price = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Price);
            break;
          }
          case 314: {
            if (quantity_ == null) {
              Quantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Quantity);
            break;
          }
          case 2240: {
            IsClosing = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 256: {
            OrderType = (global::DigitexWire.OrderType) input.ReadEnum();
            break;
          }
          case 264: {
            Side = (global::DigitexWire.OrderSide) input.ReadEnum();
            break;
          }
          case 272: {
            Leverage = input.ReadUInt32();
            break;
          }
          case 280: {
            Duration = (global::DigitexWire.OrderDuration) input.ReadEnum();
            break;
          }
          case 306: {
            if (price_ == null) {
              Price = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Price);
            break;
          }
          case 314: {
            if (quantity_ == null) {
              Quantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Quantity);
            break;
          }
          case 2240: {
            IsClosing = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UpdateOrderMessage : pb::IMessage<UpdateOrderMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpdateOrderMessage> _parser = new pb::MessageParser<UpdateOrderMessage>(() => new UpdateOrderMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateOrderMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOrderMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOrderMessage(UpdateOrderMessage other) : this() {
      prevClientId_ = other.prevClientId_;
      orderType_ = other.orderType_;
      side_ = other.side_;
      leverage_ = other.leverage_;
      duration_ = other.duration_;
      price_ = other.price_ != null ? other.price_.Clone() : null;
      quantity_ = other.quantity_ != null ? other.quantity_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOrderMessage Clone() {
      return new UpdateOrderMessage(this);
    }

    /// <summary>Field number for the "prev_client_id" field.</summary>
    public const int PrevClientIdFieldNumber = 40;
    private pb::ByteString prevClientId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PrevClientId {
      get { return prevClientId_; }
      set {
        prevClientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_type" field.</summary>
    public const int OrderTypeFieldNumber = 32;
    private global::DigitexWire.OrderType orderType_ = global::DigitexWire.OrderType.TypeUndefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderType OrderType {
      get { return orderType_; }
      set {
        orderType_ = value;
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 33;
    private global::DigitexWire.OrderSide side_ = global::DigitexWire.OrderSide.SideUndefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "leverage" field.</summary>
    public const int LeverageFieldNumber = 34;
    private uint leverage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Leverage {
      get { return leverage_; }
      set {
        leverage_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 35;
    private global::DigitexWire.OrderDuration duration_ = global::DigitexWire.OrderDuration.DurationUndefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderDuration Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 38;
    private global::DigitexWire.Decimal price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 39;
    private global::DigitexWire.Decimal quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateOrderMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateOrderMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PrevClientId != other.PrevClientId) return false;
      if (OrderType != other.OrderType) return false;
      if (Side != other.Side) return false;
      if (Leverage != other.Leverage) return false;
      if (Duration != other.Duration) return false;
      if (!object.Equals(Price, other.Price)) return false;
      if (!object.Equals(Quantity, other.Quantity)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PrevClientId.Length != 0) hash ^= PrevClientId.GetHashCode();
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) hash ^= OrderType.GetHashCode();
      if (Side != global::DigitexWire.OrderSide.SideUndefined) hash ^= Side.GetHashCode();
      if (Leverage != 0) hash ^= Leverage.GetHashCode();
      if (Duration != global::DigitexWire.OrderDuration.DurationUndefined) hash ^= Duration.GetHashCode();
      if (price_ != null) hash ^= Price.GetHashCode();
      if (quantity_ != null) hash ^= Quantity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) OrderType);
      }
      if (Side != global::DigitexWire.OrderSide.SideUndefined) {
        output.WriteRawTag(136, 2);
        output.WriteEnum((int) Side);
      }
      if (Leverage != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(Leverage);
      }
      if (Duration != global::DigitexWire.OrderDuration.DurationUndefined) {
        output.WriteRawTag(152, 2);
        output.WriteEnum((int) Duration);
      }
      if (price_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(Price);
      }
      if (quantity_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Quantity);
      }
      if (PrevClientId.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteBytes(PrevClientId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) OrderType);
      }
      if (Side != global::DigitexWire.OrderSide.SideUndefined) {
        output.WriteRawTag(136, 2);
        output.WriteEnum((int) Side);
      }
      if (Leverage != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(Leverage);
      }
      if (Duration != global::DigitexWire.OrderDuration.DurationUndefined) {
        output.WriteRawTag(152, 2);
        output.WriteEnum((int) Duration);
      }
      if (price_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(Price);
      }
      if (quantity_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Quantity);
      }
      if (PrevClientId.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteBytes(PrevClientId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PrevClientId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(PrevClientId);
      }
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OrderType);
      }
      if (Side != global::DigitexWire.OrderSide.SideUndefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (Leverage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Leverage);
      }
      if (Duration != global::DigitexWire.OrderDuration.DurationUndefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Duration);
      }
      if (price_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Price);
      }
      if (quantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Quantity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateOrderMessage other) {
      if (other == null) {
        return;
      }
      if (other.PrevClientId.Length != 0) {
        PrevClientId = other.PrevClientId;
      }
      if (other.OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        OrderType = other.OrderType;
      }
      if (other.Side != global::DigitexWire.OrderSide.SideUndefined) {
        Side = other.Side;
      }
      if (other.Leverage != 0) {
        Leverage = other.Leverage;
      }
      if (other.Duration != global::DigitexWire.OrderDuration.DurationUndefined) {
        Duration = other.Duration;
      }
      if (other.price_ != null) {
        if (price_ == null) {
          Price = new global::DigitexWire.Decimal();
        }
        Price.MergeFrom(other.Price);
      }
      if (other.quantity_ != null) {
        if (quantity_ == null) {
          Quantity = new global::DigitexWire.Decimal();
        }
        Quantity.MergeFrom(other.Quantity);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 256: {
            OrderType = (global::DigitexWire.OrderType) input.ReadEnum();
            break;
          }
          case 264: {
            Side = (global::DigitexWire.OrderSide) input.ReadEnum();
            break;
          }
          case 272: {
            Leverage = input.ReadUInt32();
            break;
          }
          case 280: {
            Duration = (global::DigitexWire.OrderDuration) input.ReadEnum();
            break;
          }
          case 306: {
            if (price_ == null) {
              Price = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Price);
            break;
          }
          case 314: {
            if (quantity_ == null) {
              Quantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Quantity);
            break;
          }
          case 322: {
            PrevClientId = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 256: {
            OrderType = (global::DigitexWire.OrderType) input.ReadEnum();
            break;
          }
          case 264: {
            Side = (global::DigitexWire.OrderSide) input.ReadEnum();
            break;
          }
          case 272: {
            Leverage = input.ReadUInt32();
            break;
          }
          case 280: {
            Duration = (global::DigitexWire.OrderDuration) input.ReadEnum();
            break;
          }
          case 306: {
            if (price_ == null) {
              Price = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Price);
            break;
          }
          case 314: {
            if (quantity_ == null) {
              Quantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Quantity);
            break;
          }
          case 322: {
            PrevClientId = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CancelOrderMessage : pb::IMessage<CancelOrderMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CancelOrderMessage> _parser = new pb::MessageParser<CancelOrderMessage>(() => new CancelOrderMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelOrderMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelOrderMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelOrderMessage(CancelOrderMessage other) : this() {
      prevClientId_ = other.prevClientId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelOrderMessage Clone() {
      return new CancelOrderMessage(this);
    }

    /// <summary>Field number for the "prev_client_id" field.</summary>
    public const int PrevClientIdFieldNumber = 40;
    private pb::ByteString prevClientId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PrevClientId {
      get { return prevClientId_; }
      set {
        prevClientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelOrderMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelOrderMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PrevClientId != other.PrevClientId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PrevClientId.Length != 0) hash ^= PrevClientId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PrevClientId.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteBytes(PrevClientId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PrevClientId.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteBytes(PrevClientId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PrevClientId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(PrevClientId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelOrderMessage other) {
      if (other == null) {
        return;
      }
      if (other.PrevClientId.Length != 0) {
        PrevClientId = other.PrevClientId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 322: {
            PrevClientId = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 322: {
            PrevClientId = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CancelAllOrdersMessage : pb::IMessage<CancelAllOrdersMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CancelAllOrdersMessage> _parser = new pb::MessageParser<CancelAllOrdersMessage>(() => new CancelAllOrdersMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelAllOrdersMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelAllOrdersMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelAllOrdersMessage(CancelAllOrdersMessage other) : this() {
      side_ = other.side_;
      price_ = other.price_ != null ? other.price_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelAllOrdersMessage Clone() {
      return new CancelAllOrdersMessage(this);
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 33;
    private global::DigitexWire.OrderSide side_ = global::DigitexWire.OrderSide.SideUndefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 38;
    private global::DigitexWire.Decimal price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelAllOrdersMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelAllOrdersMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Side != other.Side) return false;
      if (!object.Equals(Price, other.Price)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Side != global::DigitexWire.OrderSide.SideUndefined) hash ^= Side.GetHashCode();
      if (price_ != null) hash ^= Price.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Side != global::DigitexWire.OrderSide.SideUndefined) {
        output.WriteRawTag(136, 2);
        output.WriteEnum((int) Side);
      }
      if (price_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Side != global::DigitexWire.OrderSide.SideUndefined) {
        output.WriteRawTag(136, 2);
        output.WriteEnum((int) Side);
      }
      if (price_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Side != global::DigitexWire.OrderSide.SideUndefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (price_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Price);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelAllOrdersMessage other) {
      if (other == null) {
        return;
      }
      if (other.Side != global::DigitexWire.OrderSide.SideUndefined) {
        Side = other.Side;
      }
      if (other.price_ != null) {
        if (price_ == null) {
          Price = new global::DigitexWire.Decimal();
        }
        Price.MergeFrom(other.Price);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 264: {
            Side = (global::DigitexWire.OrderSide) input.ReadEnum();
            break;
          }
          case 306: {
            if (price_ == null) {
              Price = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Price);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 264: {
            Side = (global::DigitexWire.OrderSide) input.ReadEnum();
            break;
          }
          case 306: {
            if (price_ == null) {
              Price = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Price);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChangeLeverageAllMessage : pb::IMessage<ChangeLeverageAllMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChangeLeverageAllMessage> _parser = new pb::MessageParser<ChangeLeverageAllMessage>(() => new ChangeLeverageAllMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeLeverageAllMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeLeverageAllMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeLeverageAllMessage(ChangeLeverageAllMessage other) : this() {
      leverage_ = other.leverage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeLeverageAllMessage Clone() {
      return new ChangeLeverageAllMessage(this);
    }

    /// <summary>Field number for the "leverage" field.</summary>
    public const int LeverageFieldNumber = 34;
    private uint leverage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Leverage {
      get { return leverage_; }
      set {
        leverage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeLeverageAllMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeLeverageAllMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Leverage != other.Leverage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Leverage != 0) hash ^= Leverage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Leverage != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(Leverage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Leverage != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(Leverage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Leverage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Leverage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeLeverageAllMessage other) {
      if (other == null) {
        return;
      }
      if (other.Leverage != 0) {
        Leverage = other.Leverage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 272: {
            Leverage = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 272: {
            Leverage = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OrderStatusMessage : pb::IMessage<OrderStatusMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderStatusMessage> _parser = new pb::MessageParser<OrderStatusMessage>(() => new OrderStatusMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderStatusMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderStatusMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderStatusMessage(OrderStatusMessage other) : this() {
      status_ = other.status_;
      traderBalance_ = other.traderBalance_ != null ? other.traderBalance_.Clone() : null;
      orderMargin_ = other.orderMargin_ != null ? other.orderMargin_.Clone() : null;
      positionMargin_ = other.positionMargin_ != null ? other.positionMargin_.Clone() : null;
      upnl_ = other.upnl_ != null ? other.upnl_.Clone() : null;
      pnl_ = other.pnl_ != null ? other.pnl_.Clone() : null;
      accumQuantity_ = other.accumQuantity_ != null ? other.accumQuantity_.Clone() : null;
      buyOrderMargin_ = other.buyOrderMargin_ != null ? other.buyOrderMargin_.Clone() : null;
      sellOrderMargin_ = other.sellOrderMargin_ != null ? other.sellOrderMargin_.Clone() : null;
      buyOrderQuantity_ = other.buyOrderQuantity_ != null ? other.buyOrderQuantity_.Clone() : null;
      sellOrderQuantity_ = other.sellOrderQuantity_ != null ? other.sellOrderQuantity_.Clone() : null;
      traderBalance2_ = other.traderBalance2_ != null ? other.traderBalance2_.Clone() : null;
      fullPositionMargin_ = other.fullPositionMargin_ != null ? other.fullPositionMargin_.Clone() : null;
      fullBuyOrderMargin_ = other.fullBuyOrderMargin_ != null ? other.fullBuyOrderMargin_.Clone() : null;
      fullSellOrderMargin_ = other.fullSellOrderMargin_ != null ? other.fullSellOrderMargin_.Clone() : null;
      positionContracts_ = other.positionContracts_ != null ? other.positionContracts_.Clone() : null;
      positionVolume_ = other.positionVolume_ != null ? other.positionVolume_.Clone() : null;
      positionLiquidationVolume_ = other.positionLiquidationVolume_ != null ? other.positionLiquidationVolume_.Clone() : null;
      positionBankruptcyVolume_ = other.positionBankruptcyVolume_ != null ? other.positionBankruptcyVolume_.Clone() : null;
      positionType_ = other.positionType_;
      markPrice_ = other.markPrice_ != null ? other.markPrice_.Clone() : null;
      orderType_ = other.orderType_;
      side_ = other.side_;
      leverage_ = other.leverage_;
      duration_ = other.duration_;
      price_ = other.price_ != null ? other.price_.Clone() : null;
      quantity_ = other.quantity_ != null ? other.quantity_.Clone() : null;
      paidPrice_ = other.paidPrice_ != null ? other.paidPrice_.Clone() : null;
      oldContractId_ = other.oldContractId_;
      volume_ = other.volume_ != null ? other.volume_.Clone() : null;
      isClosing_ = other.isClosing_;
      orderClientId_ = other.orderClientId_;
      orderTimestamp_ = other.orderTimestamp_;
      origClientId_ = other.origClientId_;
      openTime_ = other.openTime_;
      origQuantity_ = other.origQuantity_ != null ? other.origQuantity_.Clone() : null;
      origOrderId_ = other.origOrderId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderStatusMessage Clone() {
      return new OrderStatusMessage(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 42;
    private global::DigitexWire.OrderStatus status_ = global::DigitexWire.OrderStatus.StatusUndefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "trader_balance" field.</summary>
    public const int TraderBalanceFieldNumber = 51;
    private global::DigitexWire.Decimal traderBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal TraderBalance {
      get { return traderBalance_; }
      set {
        traderBalance_ = value;
      }
    }

    /// <summary>Field number for the "order_margin" field.</summary>
    public const int OrderMarginFieldNumber = 76;
    private global::DigitexWire.Decimal orderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal OrderMargin {
      get { return orderMargin_; }
      set {
        orderMargin_ = value;
      }
    }

    /// <summary>Field number for the "position_margin" field.</summary>
    public const int PositionMarginFieldNumber = 78;
    private global::DigitexWire.Decimal positionMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionMargin {
      get { return positionMargin_; }
      set {
        positionMargin_ = value;
      }
    }

    /// <summary>Field number for the "upnl" field.</summary>
    public const int UpnlFieldNumber = 79;
    private global::DigitexWire.Decimal upnl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Upnl {
      get { return upnl_; }
      set {
        upnl_ = value;
      }
    }

    /// <summary>Field number for the "pnl" field.</summary>
    public const int PnlFieldNumber = 154;
    private global::DigitexWire.Decimal pnl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Pnl {
      get { return pnl_; }
      set {
        pnl_ = value;
      }
    }

    /// <summary>Field number for the "accum_quantity" field.</summary>
    public const int AccumQuantityFieldNumber = 181;
    private global::DigitexWire.Decimal accumQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal AccumQuantity {
      get { return accumQuantity_; }
      set {
        accumQuantity_ = value;
      }
    }

    /// <summary>Field number for the "buy_order_margin" field.</summary>
    public const int BuyOrderMarginFieldNumber = 118;
    private global::DigitexWire.Decimal buyOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal BuyOrderMargin {
      get { return buyOrderMargin_; }
      set {
        buyOrderMargin_ = value;
      }
    }

    /// <summary>Field number for the "sell_order_margin" field.</summary>
    public const int SellOrderMarginFieldNumber = 119;
    private global::DigitexWire.Decimal sellOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal SellOrderMargin {
      get { return sellOrderMargin_; }
      set {
        sellOrderMargin_ = value;
      }
    }

    /// <summary>Field number for the "buy_order_quantity" field.</summary>
    public const int BuyOrderQuantityFieldNumber = 182;
    private global::DigitexWire.Decimal buyOrderQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal BuyOrderQuantity {
      get { return buyOrderQuantity_; }
      set {
        buyOrderQuantity_ = value;
      }
    }

    /// <summary>Field number for the "sell_order_quantity" field.</summary>
    public const int SellOrderQuantityFieldNumber = 183;
    private global::DigitexWire.Decimal sellOrderQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal SellOrderQuantity {
      get { return sellOrderQuantity_; }
      set {
        sellOrderQuantity_ = value;
      }
    }

    /// <summary>Field number for the "trader_balance_2" field.</summary>
    public const int TraderBalance2FieldNumber = 278;
    private global::DigitexWire.Decimal traderBalance2_;
    /// <summary>
    /// for spot market, balance in base currency
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal TraderBalance2 {
      get { return traderBalance2_; }
      set {
        traderBalance2_ = value;
      }
    }

    /// <summary>Field number for the "full_position_margin" field.</summary>
    public const int FullPositionMarginFieldNumber = 298;
    private global::DigitexWire.Decimal fullPositionMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FullPositionMargin {
      get { return fullPositionMargin_; }
      set {
        fullPositionMargin_ = value;
      }
    }

    /// <summary>Field number for the "full_buy_order_margin" field.</summary>
    public const int FullBuyOrderMarginFieldNumber = 299;
    private global::DigitexWire.Decimal fullBuyOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FullBuyOrderMargin {
      get { return fullBuyOrderMargin_; }
      set {
        fullBuyOrderMargin_ = value;
      }
    }

    /// <summary>Field number for the "full_sell_order_margin" field.</summary>
    public const int FullSellOrderMarginFieldNumber = 300;
    private global::DigitexWire.Decimal fullSellOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FullSellOrderMargin {
      get { return fullSellOrderMargin_; }
      set {
        fullSellOrderMargin_ = value;
      }
    }

    /// <summary>Field number for the "position_contracts" field.</summary>
    public const int PositionContractsFieldNumber = 104;
    private global::DigitexWire.Decimal positionContracts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionContracts {
      get { return positionContracts_; }
      set {
        positionContracts_ = value;
      }
    }

    /// <summary>Field number for the "position_volume" field.</summary>
    public const int PositionVolumeFieldNumber = 105;
    private global::DigitexWire.Decimal positionVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionVolume {
      get { return positionVolume_; }
      set {
        positionVolume_ = value;
      }
    }

    /// <summary>Field number for the "position_liquidation_volume" field.</summary>
    public const int PositionLiquidationVolumeFieldNumber = 106;
    private global::DigitexWire.Decimal positionLiquidationVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionLiquidationVolume {
      get { return positionLiquidationVolume_; }
      set {
        positionLiquidationVolume_ = value;
      }
    }

    /// <summary>Field number for the "position_bankruptcy_volume" field.</summary>
    public const int PositionBankruptcyVolumeFieldNumber = 117;
    private global::DigitexWire.Decimal positionBankruptcyVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionBankruptcyVolume {
      get { return positionBankruptcyVolume_; }
      set {
        positionBankruptcyVolume_ = value;
      }
    }

    /// <summary>Field number for the "position_type" field.</summary>
    public const int PositionTypeFieldNumber = 107;
    private global::DigitexWire.OrderPosition positionType_ = global::DigitexWire.OrderPosition.Undefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderPosition PositionType {
      get { return positionType_; }
      set {
        positionType_ = value;
      }
    }

    /// <summary>Field number for the "mark_price" field.</summary>
    public const int MarkPriceFieldNumber = 52;
    private global::DigitexWire.Decimal markPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal MarkPrice {
      get { return markPrice_; }
      set {
        markPrice_ = value;
      }
    }

    /// <summary>Field number for the "order_type" field.</summary>
    public const int OrderTypeFieldNumber = 32;
    private global::DigitexWire.OrderType orderType_ = global::DigitexWire.OrderType.TypeUndefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderType OrderType {
      get { return orderType_; }
      set {
        orderType_ = value;
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 33;
    private global::DigitexWire.OrderSide side_ = global::DigitexWire.OrderSide.SideUndefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "leverage" field.</summary>
    public const int LeverageFieldNumber = 34;
    private uint leverage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Leverage {
      get { return leverage_; }
      set {
        leverage_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 35;
    private global::DigitexWire.OrderDuration duration_ = global::DigitexWire.OrderDuration.DurationUndefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderDuration Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 38;
    private global::DigitexWire.Decimal price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 39;
    private global::DigitexWire.Decimal quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "paid_price" field.</summary>
    public const int PaidPriceFieldNumber = 66;
    private global::DigitexWire.Decimal paidPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PaidPrice {
      get { return paidPrice_; }
      set {
        paidPrice_ = value;
      }
    }

    /// <summary>Field number for the "old_contract_id" field.</summary>
    public const int OldContractIdFieldNumber = 57;
    private ulong oldContractId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OldContractId {
      get { return oldContractId_; }
      set {
        oldContractId_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 279;
    private global::DigitexWire.Decimal volume_;
    /// <summary>
    /// for spot market if 'price * quantity' has been rounded
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "is_closing" field.</summary>
    public const int IsClosingFieldNumber = 280;
    private int isClosing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsClosing {
      get { return isClosing_; }
      set {
        isClosing_ = value;
      }
    }

    /// <summary>Field number for the "order_client_id" field.</summary>
    public const int OrderClientIdFieldNumber = 71;
    private pb::ByteString orderClientId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OrderClientId {
      get { return orderClientId_; }
      set {
        orderClientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_timestamp" field.</summary>
    public const int OrderTimestampFieldNumber = 72;
    private long orderTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OrderTimestamp {
      get { return orderTimestamp_; }
      set {
        orderTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "orig_client_id" field.</summary>
    public const int OrigClientIdFieldNumber = 204;
    private pb::ByteString origClientId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OrigClientId {
      get { return origClientId_; }
      set {
        origClientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "open_time" field.</summary>
    public const int OpenTimeFieldNumber = 205;
    private long openTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OpenTime {
      get { return openTime_; }
      set {
        openTime_ = value;
      }
    }

    /// <summary>Field number for the "orig_quantity" field.</summary>
    public const int OrigQuantityFieldNumber = 206;
    private global::DigitexWire.Decimal origQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal OrigQuantity {
      get { return origQuantity_; }
      set {
        origQuantity_ = value;
      }
    }

    /// <summary>Field number for the "orig_order_id" field.</summary>
    public const int OrigOrderIdFieldNumber = 327;
    private pb::ByteString origOrderId_ = pb::ByteString.Empty;
    /// <summary>
    /// from v129: the auto-generated order_id of the first order in chain
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OrigOrderId {
      get { return origOrderId_; }
      set {
        origOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderStatusMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderStatusMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(TraderBalance, other.TraderBalance)) return false;
      if (!object.Equals(OrderMargin, other.OrderMargin)) return false;
      if (!object.Equals(PositionMargin, other.PositionMargin)) return false;
      if (!object.Equals(Upnl, other.Upnl)) return false;
      if (!object.Equals(Pnl, other.Pnl)) return false;
      if (!object.Equals(AccumQuantity, other.AccumQuantity)) return false;
      if (!object.Equals(BuyOrderMargin, other.BuyOrderMargin)) return false;
      if (!object.Equals(SellOrderMargin, other.SellOrderMargin)) return false;
      if (!object.Equals(BuyOrderQuantity, other.BuyOrderQuantity)) return false;
      if (!object.Equals(SellOrderQuantity, other.SellOrderQuantity)) return false;
      if (!object.Equals(TraderBalance2, other.TraderBalance2)) return false;
      if (!object.Equals(FullPositionMargin, other.FullPositionMargin)) return false;
      if (!object.Equals(FullBuyOrderMargin, other.FullBuyOrderMargin)) return false;
      if (!object.Equals(FullSellOrderMargin, other.FullSellOrderMargin)) return false;
      if (!object.Equals(PositionContracts, other.PositionContracts)) return false;
      if (!object.Equals(PositionVolume, other.PositionVolume)) return false;
      if (!object.Equals(PositionLiquidationVolume, other.PositionLiquidationVolume)) return false;
      if (!object.Equals(PositionBankruptcyVolume, other.PositionBankruptcyVolume)) return false;
      if (PositionType != other.PositionType) return false;
      if (!object.Equals(MarkPrice, other.MarkPrice)) return false;
      if (OrderType != other.OrderType) return false;
      if (Side != other.Side) return false;
      if (Leverage != other.Leverage) return false;
      if (Duration != other.Duration) return false;
      if (!object.Equals(Price, other.Price)) return false;
      if (!object.Equals(Quantity, other.Quantity)) return false;
      if (!object.Equals(PaidPrice, other.PaidPrice)) return false;
      if (OldContractId != other.OldContractId) return false;
      if (!object.Equals(Volume, other.Volume)) return false;
      if (IsClosing != other.IsClosing) return false;
      if (OrderClientId != other.OrderClientId) return false;
      if (OrderTimestamp != other.OrderTimestamp) return false;
      if (OrigClientId != other.OrigClientId) return false;
      if (OpenTime != other.OpenTime) return false;
      if (!object.Equals(OrigQuantity, other.OrigQuantity)) return false;
      if (OrigOrderId != other.OrigOrderId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != global::DigitexWire.OrderStatus.StatusUndefined) hash ^= Status.GetHashCode();
      if (traderBalance_ != null) hash ^= TraderBalance.GetHashCode();
      if (orderMargin_ != null) hash ^= OrderMargin.GetHashCode();
      if (positionMargin_ != null) hash ^= PositionMargin.GetHashCode();
      if (upnl_ != null) hash ^= Upnl.GetHashCode();
      if (pnl_ != null) hash ^= Pnl.GetHashCode();
      if (accumQuantity_ != null) hash ^= AccumQuantity.GetHashCode();
      if (buyOrderMargin_ != null) hash ^= BuyOrderMargin.GetHashCode();
      if (sellOrderMargin_ != null) hash ^= SellOrderMargin.GetHashCode();
      if (buyOrderQuantity_ != null) hash ^= BuyOrderQuantity.GetHashCode();
      if (sellOrderQuantity_ != null) hash ^= SellOrderQuantity.GetHashCode();
      if (traderBalance2_ != null) hash ^= TraderBalance2.GetHashCode();
      if (fullPositionMargin_ != null) hash ^= FullPositionMargin.GetHashCode();
      if (fullBuyOrderMargin_ != null) hash ^= FullBuyOrderMargin.GetHashCode();
      if (fullSellOrderMargin_ != null) hash ^= FullSellOrderMargin.GetHashCode();
      if (positionContracts_ != null) hash ^= PositionContracts.GetHashCode();
      if (positionVolume_ != null) hash ^= PositionVolume.GetHashCode();
      if (positionLiquidationVolume_ != null) hash ^= PositionLiquidationVolume.GetHashCode();
      if (positionBankruptcyVolume_ != null) hash ^= PositionBankruptcyVolume.GetHashCode();
      if (PositionType != global::DigitexWire.OrderPosition.Undefined) hash ^= PositionType.GetHashCode();
      if (markPrice_ != null) hash ^= MarkPrice.GetHashCode();
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) hash ^= OrderType.GetHashCode();
      if (Side != global::DigitexWire.OrderSide.SideUndefined) hash ^= Side.GetHashCode();
      if (Leverage != 0) hash ^= Leverage.GetHashCode();
      if (Duration != global::DigitexWire.OrderDuration.DurationUndefined) hash ^= Duration.GetHashCode();
      if (price_ != null) hash ^= Price.GetHashCode();
      if (quantity_ != null) hash ^= Quantity.GetHashCode();
      if (paidPrice_ != null) hash ^= PaidPrice.GetHashCode();
      if (OldContractId != 0UL) hash ^= OldContractId.GetHashCode();
      if (volume_ != null) hash ^= Volume.GetHashCode();
      if (IsClosing != 0) hash ^= IsClosing.GetHashCode();
      if (OrderClientId.Length != 0) hash ^= OrderClientId.GetHashCode();
      if (OrderTimestamp != 0L) hash ^= OrderTimestamp.GetHashCode();
      if (OrigClientId.Length != 0) hash ^= OrigClientId.GetHashCode();
      if (OpenTime != 0L) hash ^= OpenTime.GetHashCode();
      if (origQuantity_ != null) hash ^= OrigQuantity.GetHashCode();
      if (OrigOrderId.Length != 0) hash ^= OrigOrderId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) OrderType);
      }
      if (Side != global::DigitexWire.OrderSide.SideUndefined) {
        output.WriteRawTag(136, 2);
        output.WriteEnum((int) Side);
      }
      if (Leverage != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(Leverage);
      }
      if (Duration != global::DigitexWire.OrderDuration.DurationUndefined) {
        output.WriteRawTag(152, 2);
        output.WriteEnum((int) Duration);
      }
      if (price_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(Price);
      }
      if (quantity_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Quantity);
      }
      if (Status != global::DigitexWire.OrderStatus.StatusUndefined) {
        output.WriteRawTag(208, 2);
        output.WriteEnum((int) Status);
      }
      if (traderBalance_ != null) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(TraderBalance);
      }
      if (markPrice_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(MarkPrice);
      }
      if (OldContractId != 0UL) {
        output.WriteRawTag(200, 3);
        output.WriteUInt64(OldContractId);
      }
      if (paidPrice_ != null) {
        output.WriteRawTag(146, 4);
        output.WriteMessage(PaidPrice);
      }
      if (OrderClientId.Length != 0) {
        output.WriteRawTag(186, 4);
        output.WriteBytes(OrderClientId);
      }
      if (OrderTimestamp != 0L) {
        output.WriteRawTag(192, 4);
        output.WriteInt64(OrderTimestamp);
      }
      if (orderMargin_ != null) {
        output.WriteRawTag(226, 4);
        output.WriteMessage(OrderMargin);
      }
      if (positionMargin_ != null) {
        output.WriteRawTag(242, 4);
        output.WriteMessage(PositionMargin);
      }
      if (upnl_ != null) {
        output.WriteRawTag(250, 4);
        output.WriteMessage(Upnl);
      }
      if (positionContracts_ != null) {
        output.WriteRawTag(194, 6);
        output.WriteMessage(PositionContracts);
      }
      if (positionVolume_ != null) {
        output.WriteRawTag(202, 6);
        output.WriteMessage(PositionVolume);
      }
      if (positionLiquidationVolume_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(PositionLiquidationVolume);
      }
      if (PositionType != global::DigitexWire.OrderPosition.Undefined) {
        output.WriteRawTag(216, 6);
        output.WriteEnum((int) PositionType);
      }
      if (positionBankruptcyVolume_ != null) {
        output.WriteRawTag(170, 7);
        output.WriteMessage(PositionBankruptcyVolume);
      }
      if (buyOrderMargin_ != null) {
        output.WriteRawTag(178, 7);
        output.WriteMessage(BuyOrderMargin);
      }
      if (sellOrderMargin_ != null) {
        output.WriteRawTag(186, 7);
        output.WriteMessage(SellOrderMargin);
      }
      if (pnl_ != null) {
        output.WriteRawTag(210, 9);
        output.WriteMessage(Pnl);
      }
      if (accumQuantity_ != null) {
        output.WriteRawTag(170, 11);
        output.WriteMessage(AccumQuantity);
      }
      if (buyOrderQuantity_ != null) {
        output.WriteRawTag(178, 11);
        output.WriteMessage(BuyOrderQuantity);
      }
      if (sellOrderQuantity_ != null) {
        output.WriteRawTag(186, 11);
        output.WriteMessage(SellOrderQuantity);
      }
      if (OrigClientId.Length != 0) {
        output.WriteRawTag(226, 12);
        output.WriteBytes(OrigClientId);
      }
      if (OpenTime != 0L) {
        output.WriteRawTag(232, 12);
        output.WriteInt64(OpenTime);
      }
      if (origQuantity_ != null) {
        output.WriteRawTag(242, 12);
        output.WriteMessage(OrigQuantity);
      }
      if (traderBalance2_ != null) {
        output.WriteRawTag(178, 17);
        output.WriteMessage(TraderBalance2);
      }
      if (volume_ != null) {
        output.WriteRawTag(186, 17);
        output.WriteMessage(Volume);
      }
      if (IsClosing != 0) {
        output.WriteRawTag(192, 17);
        output.WriteInt32(IsClosing);
      }
      if (fullPositionMargin_ != null) {
        output.WriteRawTag(210, 18);
        output.WriteMessage(FullPositionMargin);
      }
      if (fullBuyOrderMargin_ != null) {
        output.WriteRawTag(218, 18);
        output.WriteMessage(FullBuyOrderMargin);
      }
      if (fullSellOrderMargin_ != null) {
        output.WriteRawTag(226, 18);
        output.WriteMessage(FullSellOrderMargin);
      }
      if (OrigOrderId.Length != 0) {
        output.WriteRawTag(186, 20);
        output.WriteBytes(OrigOrderId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) OrderType);
      }
      if (Side != global::DigitexWire.OrderSide.SideUndefined) {
        output.WriteRawTag(136, 2);
        output.WriteEnum((int) Side);
      }
      if (Leverage != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(Leverage);
      }
      if (Duration != global::DigitexWire.OrderDuration.DurationUndefined) {
        output.WriteRawTag(152, 2);
        output.WriteEnum((int) Duration);
      }
      if (price_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(Price);
      }
      if (quantity_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Quantity);
      }
      if (Status != global::DigitexWire.OrderStatus.StatusUndefined) {
        output.WriteRawTag(208, 2);
        output.WriteEnum((int) Status);
      }
      if (traderBalance_ != null) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(TraderBalance);
      }
      if (markPrice_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(MarkPrice);
      }
      if (OldContractId != 0UL) {
        output.WriteRawTag(200, 3);
        output.WriteUInt64(OldContractId);
      }
      if (paidPrice_ != null) {
        output.WriteRawTag(146, 4);
        output.WriteMessage(PaidPrice);
      }
      if (OrderClientId.Length != 0) {
        output.WriteRawTag(186, 4);
        output.WriteBytes(OrderClientId);
      }
      if (OrderTimestamp != 0L) {
        output.WriteRawTag(192, 4);
        output.WriteInt64(OrderTimestamp);
      }
      if (orderMargin_ != null) {
        output.WriteRawTag(226, 4);
        output.WriteMessage(OrderMargin);
      }
      if (positionMargin_ != null) {
        output.WriteRawTag(242, 4);
        output.WriteMessage(PositionMargin);
      }
      if (upnl_ != null) {
        output.WriteRawTag(250, 4);
        output.WriteMessage(Upnl);
      }
      if (positionContracts_ != null) {
        output.WriteRawTag(194, 6);
        output.WriteMessage(PositionContracts);
      }
      if (positionVolume_ != null) {
        output.WriteRawTag(202, 6);
        output.WriteMessage(PositionVolume);
      }
      if (positionLiquidationVolume_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(PositionLiquidationVolume);
      }
      if (PositionType != global::DigitexWire.OrderPosition.Undefined) {
        output.WriteRawTag(216, 6);
        output.WriteEnum((int) PositionType);
      }
      if (positionBankruptcyVolume_ != null) {
        output.WriteRawTag(170, 7);
        output.WriteMessage(PositionBankruptcyVolume);
      }
      if (buyOrderMargin_ != null) {
        output.WriteRawTag(178, 7);
        output.WriteMessage(BuyOrderMargin);
      }
      if (sellOrderMargin_ != null) {
        output.WriteRawTag(186, 7);
        output.WriteMessage(SellOrderMargin);
      }
      if (pnl_ != null) {
        output.WriteRawTag(210, 9);
        output.WriteMessage(Pnl);
      }
      if (accumQuantity_ != null) {
        output.WriteRawTag(170, 11);
        output.WriteMessage(AccumQuantity);
      }
      if (buyOrderQuantity_ != null) {
        output.WriteRawTag(178, 11);
        output.WriteMessage(BuyOrderQuantity);
      }
      if (sellOrderQuantity_ != null) {
        output.WriteRawTag(186, 11);
        output.WriteMessage(SellOrderQuantity);
      }
      if (OrigClientId.Length != 0) {
        output.WriteRawTag(226, 12);
        output.WriteBytes(OrigClientId);
      }
      if (OpenTime != 0L) {
        output.WriteRawTag(232, 12);
        output.WriteInt64(OpenTime);
      }
      if (origQuantity_ != null) {
        output.WriteRawTag(242, 12);
        output.WriteMessage(OrigQuantity);
      }
      if (traderBalance2_ != null) {
        output.WriteRawTag(178, 17);
        output.WriteMessage(TraderBalance2);
      }
      if (volume_ != null) {
        output.WriteRawTag(186, 17);
        output.WriteMessage(Volume);
      }
      if (IsClosing != 0) {
        output.WriteRawTag(192, 17);
        output.WriteInt32(IsClosing);
      }
      if (fullPositionMargin_ != null) {
        output.WriteRawTag(210, 18);
        output.WriteMessage(FullPositionMargin);
      }
      if (fullBuyOrderMargin_ != null) {
        output.WriteRawTag(218, 18);
        output.WriteMessage(FullBuyOrderMargin);
      }
      if (fullSellOrderMargin_ != null) {
        output.WriteRawTag(226, 18);
        output.WriteMessage(FullSellOrderMargin);
      }
      if (OrigOrderId.Length != 0) {
        output.WriteRawTag(186, 20);
        output.WriteBytes(OrigOrderId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != global::DigitexWire.OrderStatus.StatusUndefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (traderBalance_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TraderBalance);
      }
      if (orderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderMargin);
      }
      if (positionMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionMargin);
      }
      if (upnl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Upnl);
      }
      if (pnl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Pnl);
      }
      if (accumQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AccumQuantity);
      }
      if (buyOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BuyOrderMargin);
      }
      if (sellOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SellOrderMargin);
      }
      if (buyOrderQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BuyOrderQuantity);
      }
      if (sellOrderQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SellOrderQuantity);
      }
      if (traderBalance2_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TraderBalance2);
      }
      if (fullPositionMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FullPositionMargin);
      }
      if (fullBuyOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FullBuyOrderMargin);
      }
      if (fullSellOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FullSellOrderMargin);
      }
      if (positionContracts_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionContracts);
      }
      if (positionVolume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionVolume);
      }
      if (positionLiquidationVolume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionLiquidationVolume);
      }
      if (positionBankruptcyVolume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionBankruptcyVolume);
      }
      if (PositionType != global::DigitexWire.OrderPosition.Undefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PositionType);
      }
      if (markPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MarkPrice);
      }
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OrderType);
      }
      if (Side != global::DigitexWire.OrderSide.SideUndefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (Leverage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Leverage);
      }
      if (Duration != global::DigitexWire.OrderDuration.DurationUndefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Duration);
      }
      if (price_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Price);
      }
      if (quantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Quantity);
      }
      if (paidPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PaidPrice);
      }
      if (OldContractId != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(OldContractId);
      }
      if (volume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Volume);
      }
      if (IsClosing != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsClosing);
      }
      if (OrderClientId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(OrderClientId);
      }
      if (OrderTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(OrderTimestamp);
      }
      if (OrigClientId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(OrigClientId);
      }
      if (OpenTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(OpenTime);
      }
      if (origQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrigQuantity);
      }
      if (OrigOrderId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(OrigOrderId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderStatusMessage other) {
      if (other == null) {
        return;
      }
      if (other.Status != global::DigitexWire.OrderStatus.StatusUndefined) {
        Status = other.Status;
      }
      if (other.traderBalance_ != null) {
        if (traderBalance_ == null) {
          TraderBalance = new global::DigitexWire.Decimal();
        }
        TraderBalance.MergeFrom(other.TraderBalance);
      }
      if (other.orderMargin_ != null) {
        if (orderMargin_ == null) {
          OrderMargin = new global::DigitexWire.Decimal();
        }
        OrderMargin.MergeFrom(other.OrderMargin);
      }
      if (other.positionMargin_ != null) {
        if (positionMargin_ == null) {
          PositionMargin = new global::DigitexWire.Decimal();
        }
        PositionMargin.MergeFrom(other.PositionMargin);
      }
      if (other.upnl_ != null) {
        if (upnl_ == null) {
          Upnl = new global::DigitexWire.Decimal();
        }
        Upnl.MergeFrom(other.Upnl);
      }
      if (other.pnl_ != null) {
        if (pnl_ == null) {
          Pnl = new global::DigitexWire.Decimal();
        }
        Pnl.MergeFrom(other.Pnl);
      }
      if (other.accumQuantity_ != null) {
        if (accumQuantity_ == null) {
          AccumQuantity = new global::DigitexWire.Decimal();
        }
        AccumQuantity.MergeFrom(other.AccumQuantity);
      }
      if (other.buyOrderMargin_ != null) {
        if (buyOrderMargin_ == null) {
          BuyOrderMargin = new global::DigitexWire.Decimal();
        }
        BuyOrderMargin.MergeFrom(other.BuyOrderMargin);
      }
      if (other.sellOrderMargin_ != null) {
        if (sellOrderMargin_ == null) {
          SellOrderMargin = new global::DigitexWire.Decimal();
        }
        SellOrderMargin.MergeFrom(other.SellOrderMargin);
      }
      if (other.buyOrderQuantity_ != null) {
        if (buyOrderQuantity_ == null) {
          BuyOrderQuantity = new global::DigitexWire.Decimal();
        }
        BuyOrderQuantity.MergeFrom(other.BuyOrderQuantity);
      }
      if (other.sellOrderQuantity_ != null) {
        if (sellOrderQuantity_ == null) {
          SellOrderQuantity = new global::DigitexWire.Decimal();
        }
        SellOrderQuantity.MergeFrom(other.SellOrderQuantity);
      }
      if (other.traderBalance2_ != null) {
        if (traderBalance2_ == null) {
          TraderBalance2 = new global::DigitexWire.Decimal();
        }
        TraderBalance2.MergeFrom(other.TraderBalance2);
      }
      if (other.fullPositionMargin_ != null) {
        if (fullPositionMargin_ == null) {
          FullPositionMargin = new global::DigitexWire.Decimal();
        }
        FullPositionMargin.MergeFrom(other.FullPositionMargin);
      }
      if (other.fullBuyOrderMargin_ != null) {
        if (fullBuyOrderMargin_ == null) {
          FullBuyOrderMargin = new global::DigitexWire.Decimal();
        }
        FullBuyOrderMargin.MergeFrom(other.FullBuyOrderMargin);
      }
      if (other.fullSellOrderMargin_ != null) {
        if (fullSellOrderMargin_ == null) {
          FullSellOrderMargin = new global::DigitexWire.Decimal();
        }
        FullSellOrderMargin.MergeFrom(other.FullSellOrderMargin);
      }
      if (other.positionContracts_ != null) {
        if (positionContracts_ == null) {
          PositionContracts = new global::DigitexWire.Decimal();
        }
        PositionContracts.MergeFrom(other.PositionContracts);
      }
      if (other.positionVolume_ != null) {
        if (positionVolume_ == null) {
          PositionVolume = new global::DigitexWire.Decimal();
        }
        PositionVolume.MergeFrom(other.PositionVolume);
      }
      if (other.positionLiquidationVolume_ != null) {
        if (positionLiquidationVolume_ == null) {
          PositionLiquidationVolume = new global::DigitexWire.Decimal();
        }
        PositionLiquidationVolume.MergeFrom(other.PositionLiquidationVolume);
      }
      if (other.positionBankruptcyVolume_ != null) {
        if (positionBankruptcyVolume_ == null) {
          PositionBankruptcyVolume = new global::DigitexWire.Decimal();
        }
        PositionBankruptcyVolume.MergeFrom(other.PositionBankruptcyVolume);
      }
      if (other.PositionType != global::DigitexWire.OrderPosition.Undefined) {
        PositionType = other.PositionType;
      }
      if (other.markPrice_ != null) {
        if (markPrice_ == null) {
          MarkPrice = new global::DigitexWire.Decimal();
        }
        MarkPrice.MergeFrom(other.MarkPrice);
      }
      if (other.OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        OrderType = other.OrderType;
      }
      if (other.Side != global::DigitexWire.OrderSide.SideUndefined) {
        Side = other.Side;
      }
      if (other.Leverage != 0) {
        Leverage = other.Leverage;
      }
      if (other.Duration != global::DigitexWire.OrderDuration.DurationUndefined) {
        Duration = other.Duration;
      }
      if (other.price_ != null) {
        if (price_ == null) {
          Price = new global::DigitexWire.Decimal();
        }
        Price.MergeFrom(other.Price);
      }
      if (other.quantity_ != null) {
        if (quantity_ == null) {
          Quantity = new global::DigitexWire.Decimal();
        }
        Quantity.MergeFrom(other.Quantity);
      }
      if (other.paidPrice_ != null) {
        if (paidPrice_ == null) {
          PaidPrice = new global::DigitexWire.Decimal();
        }
        PaidPrice.MergeFrom(other.PaidPrice);
      }
      if (other.OldContractId != 0UL) {
        OldContractId = other.OldContractId;
      }
      if (other.volume_ != null) {
        if (volume_ == null) {
          Volume = new global::DigitexWire.Decimal();
        }
        Volume.MergeFrom(other.Volume);
      }
      if (other.IsClosing != 0) {
        IsClosing = other.IsClosing;
      }
      if (other.OrderClientId.Length != 0) {
        OrderClientId = other.OrderClientId;
      }
      if (other.OrderTimestamp != 0L) {
        OrderTimestamp = other.OrderTimestamp;
      }
      if (other.OrigClientId.Length != 0) {
        OrigClientId = other.OrigClientId;
      }
      if (other.OpenTime != 0L) {
        OpenTime = other.OpenTime;
      }
      if (other.origQuantity_ != null) {
        if (origQuantity_ == null) {
          OrigQuantity = new global::DigitexWire.Decimal();
        }
        OrigQuantity.MergeFrom(other.OrigQuantity);
      }
      if (other.OrigOrderId.Length != 0) {
        OrigOrderId = other.OrigOrderId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 256: {
            OrderType = (global::DigitexWire.OrderType) input.ReadEnum();
            break;
          }
          case 264: {
            Side = (global::DigitexWire.OrderSide) input.ReadEnum();
            break;
          }
          case 272: {
            Leverage = input.ReadUInt32();
            break;
          }
          case 280: {
            Duration = (global::DigitexWire.OrderDuration) input.ReadEnum();
            break;
          }
          case 306: {
            if (price_ == null) {
              Price = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Price);
            break;
          }
          case 314: {
            if (quantity_ == null) {
              Quantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Quantity);
            break;
          }
          case 336: {
            Status = (global::DigitexWire.OrderStatus) input.ReadEnum();
            break;
          }
          case 410: {
            if (traderBalance_ == null) {
              TraderBalance = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TraderBalance);
            break;
          }
          case 418: {
            if (markPrice_ == null) {
              MarkPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(MarkPrice);
            break;
          }
          case 456: {
            OldContractId = input.ReadUInt64();
            break;
          }
          case 530: {
            if (paidPrice_ == null) {
              PaidPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PaidPrice);
            break;
          }
          case 570: {
            OrderClientId = input.ReadBytes();
            break;
          }
          case 576: {
            OrderTimestamp = input.ReadInt64();
            break;
          }
          case 610: {
            if (orderMargin_ == null) {
              OrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OrderMargin);
            break;
          }
          case 626: {
            if (positionMargin_ == null) {
              PositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionMargin);
            break;
          }
          case 634: {
            if (upnl_ == null) {
              Upnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Upnl);
            break;
          }
          case 834: {
            if (positionContracts_ == null) {
              PositionContracts = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionContracts);
            break;
          }
          case 842: {
            if (positionVolume_ == null) {
              PositionVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionVolume);
            break;
          }
          case 850: {
            if (positionLiquidationVolume_ == null) {
              PositionLiquidationVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionLiquidationVolume);
            break;
          }
          case 856: {
            PositionType = (global::DigitexWire.OrderPosition) input.ReadEnum();
            break;
          }
          case 938: {
            if (positionBankruptcyVolume_ == null) {
              PositionBankruptcyVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionBankruptcyVolume);
            break;
          }
          case 946: {
            if (buyOrderMargin_ == null) {
              BuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderMargin);
            break;
          }
          case 954: {
            if (sellOrderMargin_ == null) {
              SellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderMargin);
            break;
          }
          case 1234: {
            if (pnl_ == null) {
              Pnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Pnl);
            break;
          }
          case 1450: {
            if (accumQuantity_ == null) {
              AccumQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(AccumQuantity);
            break;
          }
          case 1458: {
            if (buyOrderQuantity_ == null) {
              BuyOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderQuantity);
            break;
          }
          case 1466: {
            if (sellOrderQuantity_ == null) {
              SellOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderQuantity);
            break;
          }
          case 1634: {
            OrigClientId = input.ReadBytes();
            break;
          }
          case 1640: {
            OpenTime = input.ReadInt64();
            break;
          }
          case 1650: {
            if (origQuantity_ == null) {
              OrigQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OrigQuantity);
            break;
          }
          case 2226: {
            if (traderBalance2_ == null) {
              TraderBalance2 = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TraderBalance2);
            break;
          }
          case 2234: {
            if (volume_ == null) {
              Volume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Volume);
            break;
          }
          case 2240: {
            IsClosing = input.ReadInt32();
            break;
          }
          case 2386: {
            if (fullPositionMargin_ == null) {
              FullPositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullPositionMargin);
            break;
          }
          case 2394: {
            if (fullBuyOrderMargin_ == null) {
              FullBuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullBuyOrderMargin);
            break;
          }
          case 2402: {
            if (fullSellOrderMargin_ == null) {
              FullSellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullSellOrderMargin);
            break;
          }
          case 2618: {
            OrigOrderId = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 256: {
            OrderType = (global::DigitexWire.OrderType) input.ReadEnum();
            break;
          }
          case 264: {
            Side = (global::DigitexWire.OrderSide) input.ReadEnum();
            break;
          }
          case 272: {
            Leverage = input.ReadUInt32();
            break;
          }
          case 280: {
            Duration = (global::DigitexWire.OrderDuration) input.ReadEnum();
            break;
          }
          case 306: {
            if (price_ == null) {
              Price = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Price);
            break;
          }
          case 314: {
            if (quantity_ == null) {
              Quantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Quantity);
            break;
          }
          case 336: {
            Status = (global::DigitexWire.OrderStatus) input.ReadEnum();
            break;
          }
          case 410: {
            if (traderBalance_ == null) {
              TraderBalance = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TraderBalance);
            break;
          }
          case 418: {
            if (markPrice_ == null) {
              MarkPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(MarkPrice);
            break;
          }
          case 456: {
            OldContractId = input.ReadUInt64();
            break;
          }
          case 530: {
            if (paidPrice_ == null) {
              PaidPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PaidPrice);
            break;
          }
          case 570: {
            OrderClientId = input.ReadBytes();
            break;
          }
          case 576: {
            OrderTimestamp = input.ReadInt64();
            break;
          }
          case 610: {
            if (orderMargin_ == null) {
              OrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OrderMargin);
            break;
          }
          case 626: {
            if (positionMargin_ == null) {
              PositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionMargin);
            break;
          }
          case 634: {
            if (upnl_ == null) {
              Upnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Upnl);
            break;
          }
          case 834: {
            if (positionContracts_ == null) {
              PositionContracts = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionContracts);
            break;
          }
          case 842: {
            if (positionVolume_ == null) {
              PositionVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionVolume);
            break;
          }
          case 850: {
            if (positionLiquidationVolume_ == null) {
              PositionLiquidationVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionLiquidationVolume);
            break;
          }
          case 856: {
            PositionType = (global::DigitexWire.OrderPosition) input.ReadEnum();
            break;
          }
          case 938: {
            if (positionBankruptcyVolume_ == null) {
              PositionBankruptcyVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionBankruptcyVolume);
            break;
          }
          case 946: {
            if (buyOrderMargin_ == null) {
              BuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderMargin);
            break;
          }
          case 954: {
            if (sellOrderMargin_ == null) {
              SellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderMargin);
            break;
          }
          case 1234: {
            if (pnl_ == null) {
              Pnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Pnl);
            break;
          }
          case 1450: {
            if (accumQuantity_ == null) {
              AccumQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(AccumQuantity);
            break;
          }
          case 1458: {
            if (buyOrderQuantity_ == null) {
              BuyOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderQuantity);
            break;
          }
          case 1466: {
            if (sellOrderQuantity_ == null) {
              SellOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderQuantity);
            break;
          }
          case 1634: {
            OrigClientId = input.ReadBytes();
            break;
          }
          case 1640: {
            OpenTime = input.ReadInt64();
            break;
          }
          case 1650: {
            if (origQuantity_ == null) {
              OrigQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OrigQuantity);
            break;
          }
          case 2226: {
            if (traderBalance2_ == null) {
              TraderBalance2 = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TraderBalance2);
            break;
          }
          case 2234: {
            if (volume_ == null) {
              Volume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Volume);
            break;
          }
          case 2240: {
            IsClosing = input.ReadInt32();
            break;
          }
          case 2386: {
            if (fullPositionMargin_ == null) {
              FullPositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullPositionMargin);
            break;
          }
          case 2394: {
            if (fullBuyOrderMargin_ == null) {
              FullBuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullBuyOrderMargin);
            break;
          }
          case 2402: {
            if (fullSellOrderMargin_ == null) {
              FullSellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullSellOrderMargin);
            break;
          }
          case 2618: {
            OrigOrderId = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LeverageMessage : pb::IMessage<LeverageMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LeverageMessage> _parser = new pb::MessageParser<LeverageMessage>(() => new LeverageMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeverageMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeverageMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeverageMessage(LeverageMessage other) : this() {
      leverage_ = other.leverage_;
      trades_ = other.trades_.Clone();
      orders_ = other.orders_.Clone();
      traderBalance_ = other.traderBalance_ != null ? other.traderBalance_.Clone() : null;
      orderMargin_ = other.orderMargin_ != null ? other.orderMargin_.Clone() : null;
      positionMargin_ = other.positionMargin_ != null ? other.positionMargin_.Clone() : null;
      upnl_ = other.upnl_ != null ? other.upnl_.Clone() : null;
      pnl_ = other.pnl_ != null ? other.pnl_.Clone() : null;
      accumQuantity_ = other.accumQuantity_ != null ? other.accumQuantity_.Clone() : null;
      positionContracts_ = other.positionContracts_ != null ? other.positionContracts_.Clone() : null;
      positionVolume_ = other.positionVolume_ != null ? other.positionVolume_.Clone() : null;
      positionLiquidationVolume_ = other.positionLiquidationVolume_ != null ? other.positionLiquidationVolume_.Clone() : null;
      positionBankruptcyVolume_ = other.positionBankruptcyVolume_ != null ? other.positionBankruptcyVolume_.Clone() : null;
      positionType_ = other.positionType_;
      buyOrderMargin_ = other.buyOrderMargin_ != null ? other.buyOrderMargin_.Clone() : null;
      sellOrderMargin_ = other.sellOrderMargin_ != null ? other.sellOrderMargin_.Clone() : null;
      lastTradePrice_ = other.lastTradePrice_ != null ? other.lastTradePrice_.Clone() : null;
      lastTradeQuantity_ = other.lastTradeQuantity_ != null ? other.lastTradeQuantity_.Clone() : null;
      lastTradeTimestamp_ = other.lastTradeTimestamp_;
      buyOrderQuantity_ = other.buyOrderQuantity_ != null ? other.buyOrderQuantity_.Clone() : null;
      sellOrderQuantity_ = other.sellOrderQuantity_ != null ? other.sellOrderQuantity_.Clone() : null;
      fullPositionMargin_ = other.fullPositionMargin_ != null ? other.fullPositionMargin_.Clone() : null;
      fullBuyOrderMargin_ = other.fullBuyOrderMargin_ != null ? other.fullBuyOrderMargin_.Clone() : null;
      fullSellOrderMargin_ = other.fullSellOrderMargin_ != null ? other.fullSellOrderMargin_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeverageMessage Clone() {
      return new LeverageMessage(this);
    }

    /// <summary>Field number for the "leverage" field.</summary>
    public const int LeverageFieldNumber = 34;
    private uint leverage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Leverage {
      get { return leverage_; }
      set {
        leverage_ = value;
      }
    }

    /// <summary>Field number for the "trades" field.</summary>
    public const int TradesFieldNumber = 46;
    private static readonly pb::FieldCodec<global::DigitexWire.TradeMessage> _repeated_trades_codec
        = pb::FieldCodec.ForMessage(370, global::DigitexWire.TradeMessage.Parser);
    private readonly pbc::RepeatedField<global::DigitexWire.TradeMessage> trades_ = new pbc::RepeatedField<global::DigitexWire.TradeMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DigitexWire.TradeMessage> Trades {
      get { return trades_; }
    }

    /// <summary>Field number for the "orders" field.</summary>
    public const int OrdersFieldNumber = 70;
    private static readonly pb::FieldCodec<global::DigitexWire.OrderMessage> _repeated_orders_codec
        = pb::FieldCodec.ForMessage(562, global::DigitexWire.OrderMessage.Parser);
    private readonly pbc::RepeatedField<global::DigitexWire.OrderMessage> orders_ = new pbc::RepeatedField<global::DigitexWire.OrderMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DigitexWire.OrderMessage> Orders {
      get { return orders_; }
    }

    /// <summary>Field number for the "trader_balance" field.</summary>
    public const int TraderBalanceFieldNumber = 51;
    private global::DigitexWire.Decimal traderBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal TraderBalance {
      get { return traderBalance_; }
      set {
        traderBalance_ = value;
      }
    }

    /// <summary>Field number for the "order_margin" field.</summary>
    public const int OrderMarginFieldNumber = 76;
    private global::DigitexWire.Decimal orderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal OrderMargin {
      get { return orderMargin_; }
      set {
        orderMargin_ = value;
      }
    }

    /// <summary>Field number for the "position_margin" field.</summary>
    public const int PositionMarginFieldNumber = 78;
    private global::DigitexWire.Decimal positionMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionMargin {
      get { return positionMargin_; }
      set {
        positionMargin_ = value;
      }
    }

    /// <summary>Field number for the "upnl" field.</summary>
    public const int UpnlFieldNumber = 79;
    private global::DigitexWire.Decimal upnl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Upnl {
      get { return upnl_; }
      set {
        upnl_ = value;
      }
    }

    /// <summary>Field number for the "pnl" field.</summary>
    public const int PnlFieldNumber = 154;
    private global::DigitexWire.Decimal pnl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Pnl {
      get { return pnl_; }
      set {
        pnl_ = value;
      }
    }

    /// <summary>Field number for the "accum_quantity" field.</summary>
    public const int AccumQuantityFieldNumber = 181;
    private global::DigitexWire.Decimal accumQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal AccumQuantity {
      get { return accumQuantity_; }
      set {
        accumQuantity_ = value;
      }
    }

    /// <summary>Field number for the "position_contracts" field.</summary>
    public const int PositionContractsFieldNumber = 104;
    private global::DigitexWire.Decimal positionContracts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionContracts {
      get { return positionContracts_; }
      set {
        positionContracts_ = value;
      }
    }

    /// <summary>Field number for the "position_volume" field.</summary>
    public const int PositionVolumeFieldNumber = 105;
    private global::DigitexWire.Decimal positionVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionVolume {
      get { return positionVolume_; }
      set {
        positionVolume_ = value;
      }
    }

    /// <summary>Field number for the "position_liquidation_volume" field.</summary>
    public const int PositionLiquidationVolumeFieldNumber = 106;
    private global::DigitexWire.Decimal positionLiquidationVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionLiquidationVolume {
      get { return positionLiquidationVolume_; }
      set {
        positionLiquidationVolume_ = value;
      }
    }

    /// <summary>Field number for the "position_bankruptcy_volume" field.</summary>
    public const int PositionBankruptcyVolumeFieldNumber = 117;
    private global::DigitexWire.Decimal positionBankruptcyVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionBankruptcyVolume {
      get { return positionBankruptcyVolume_; }
      set {
        positionBankruptcyVolume_ = value;
      }
    }

    /// <summary>Field number for the "position_type" field.</summary>
    public const int PositionTypeFieldNumber = 107;
    private global::DigitexWire.OrderPosition positionType_ = global::DigitexWire.OrderPosition.Undefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderPosition PositionType {
      get { return positionType_; }
      set {
        positionType_ = value;
      }
    }

    /// <summary>Field number for the "buy_order_margin" field.</summary>
    public const int BuyOrderMarginFieldNumber = 118;
    private global::DigitexWire.Decimal buyOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal BuyOrderMargin {
      get { return buyOrderMargin_; }
      set {
        buyOrderMargin_ = value;
      }
    }

    /// <summary>Field number for the "sell_order_margin" field.</summary>
    public const int SellOrderMarginFieldNumber = 119;
    private global::DigitexWire.Decimal sellOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal SellOrderMargin {
      get { return sellOrderMargin_; }
      set {
        sellOrderMargin_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_price" field.</summary>
    public const int LastTradePriceFieldNumber = 113;
    private global::DigitexWire.Decimal lastTradePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal LastTradePrice {
      get { return lastTradePrice_; }
      set {
        lastTradePrice_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_quantity" field.</summary>
    public const int LastTradeQuantityFieldNumber = 116;
    private global::DigitexWire.Decimal lastTradeQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal LastTradeQuantity {
      get { return lastTradeQuantity_; }
      set {
        lastTradeQuantity_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_timestamp" field.</summary>
    public const int LastTradeTimestampFieldNumber = 296;
    private long lastTradeTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastTradeTimestamp {
      get { return lastTradeTimestamp_; }
      set {
        lastTradeTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "buy_order_quantity" field.</summary>
    public const int BuyOrderQuantityFieldNumber = 182;
    private global::DigitexWire.Decimal buyOrderQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal BuyOrderQuantity {
      get { return buyOrderQuantity_; }
      set {
        buyOrderQuantity_ = value;
      }
    }

    /// <summary>Field number for the "sell_order_quantity" field.</summary>
    public const int SellOrderQuantityFieldNumber = 183;
    private global::DigitexWire.Decimal sellOrderQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal SellOrderQuantity {
      get { return sellOrderQuantity_; }
      set {
        sellOrderQuantity_ = value;
      }
    }

    /// <summary>Field number for the "full_position_margin" field.</summary>
    public const int FullPositionMarginFieldNumber = 298;
    private global::DigitexWire.Decimal fullPositionMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FullPositionMargin {
      get { return fullPositionMargin_; }
      set {
        fullPositionMargin_ = value;
      }
    }

    /// <summary>Field number for the "full_buy_order_margin" field.</summary>
    public const int FullBuyOrderMarginFieldNumber = 299;
    private global::DigitexWire.Decimal fullBuyOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FullBuyOrderMargin {
      get { return fullBuyOrderMargin_; }
      set {
        fullBuyOrderMargin_ = value;
      }
    }

    /// <summary>Field number for the "full_sell_order_margin" field.</summary>
    public const int FullSellOrderMarginFieldNumber = 300;
    private global::DigitexWire.Decimal fullSellOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FullSellOrderMargin {
      get { return fullSellOrderMargin_; }
      set {
        fullSellOrderMargin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeverageMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeverageMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Leverage != other.Leverage) return false;
      if(!trades_.Equals(other.trades_)) return false;
      if(!orders_.Equals(other.orders_)) return false;
      if (!object.Equals(TraderBalance, other.TraderBalance)) return false;
      if (!object.Equals(OrderMargin, other.OrderMargin)) return false;
      if (!object.Equals(PositionMargin, other.PositionMargin)) return false;
      if (!object.Equals(Upnl, other.Upnl)) return false;
      if (!object.Equals(Pnl, other.Pnl)) return false;
      if (!object.Equals(AccumQuantity, other.AccumQuantity)) return false;
      if (!object.Equals(PositionContracts, other.PositionContracts)) return false;
      if (!object.Equals(PositionVolume, other.PositionVolume)) return false;
      if (!object.Equals(PositionLiquidationVolume, other.PositionLiquidationVolume)) return false;
      if (!object.Equals(PositionBankruptcyVolume, other.PositionBankruptcyVolume)) return false;
      if (PositionType != other.PositionType) return false;
      if (!object.Equals(BuyOrderMargin, other.BuyOrderMargin)) return false;
      if (!object.Equals(SellOrderMargin, other.SellOrderMargin)) return false;
      if (!object.Equals(LastTradePrice, other.LastTradePrice)) return false;
      if (!object.Equals(LastTradeQuantity, other.LastTradeQuantity)) return false;
      if (LastTradeTimestamp != other.LastTradeTimestamp) return false;
      if (!object.Equals(BuyOrderQuantity, other.BuyOrderQuantity)) return false;
      if (!object.Equals(SellOrderQuantity, other.SellOrderQuantity)) return false;
      if (!object.Equals(FullPositionMargin, other.FullPositionMargin)) return false;
      if (!object.Equals(FullBuyOrderMargin, other.FullBuyOrderMargin)) return false;
      if (!object.Equals(FullSellOrderMargin, other.FullSellOrderMargin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Leverage != 0) hash ^= Leverage.GetHashCode();
      hash ^= trades_.GetHashCode();
      hash ^= orders_.GetHashCode();
      if (traderBalance_ != null) hash ^= TraderBalance.GetHashCode();
      if (orderMargin_ != null) hash ^= OrderMargin.GetHashCode();
      if (positionMargin_ != null) hash ^= PositionMargin.GetHashCode();
      if (upnl_ != null) hash ^= Upnl.GetHashCode();
      if (pnl_ != null) hash ^= Pnl.GetHashCode();
      if (accumQuantity_ != null) hash ^= AccumQuantity.GetHashCode();
      if (positionContracts_ != null) hash ^= PositionContracts.GetHashCode();
      if (positionVolume_ != null) hash ^= PositionVolume.GetHashCode();
      if (positionLiquidationVolume_ != null) hash ^= PositionLiquidationVolume.GetHashCode();
      if (positionBankruptcyVolume_ != null) hash ^= PositionBankruptcyVolume.GetHashCode();
      if (PositionType != global::DigitexWire.OrderPosition.Undefined) hash ^= PositionType.GetHashCode();
      if (buyOrderMargin_ != null) hash ^= BuyOrderMargin.GetHashCode();
      if (sellOrderMargin_ != null) hash ^= SellOrderMargin.GetHashCode();
      if (lastTradePrice_ != null) hash ^= LastTradePrice.GetHashCode();
      if (lastTradeQuantity_ != null) hash ^= LastTradeQuantity.GetHashCode();
      if (LastTradeTimestamp != 0L) hash ^= LastTradeTimestamp.GetHashCode();
      if (buyOrderQuantity_ != null) hash ^= BuyOrderQuantity.GetHashCode();
      if (sellOrderQuantity_ != null) hash ^= SellOrderQuantity.GetHashCode();
      if (fullPositionMargin_ != null) hash ^= FullPositionMargin.GetHashCode();
      if (fullBuyOrderMargin_ != null) hash ^= FullBuyOrderMargin.GetHashCode();
      if (fullSellOrderMargin_ != null) hash ^= FullSellOrderMargin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Leverage != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(Leverage);
      }
      trades_.WriteTo(output, _repeated_trades_codec);
      if (traderBalance_ != null) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(TraderBalance);
      }
      orders_.WriteTo(output, _repeated_orders_codec);
      if (orderMargin_ != null) {
        output.WriteRawTag(226, 4);
        output.WriteMessage(OrderMargin);
      }
      if (positionMargin_ != null) {
        output.WriteRawTag(242, 4);
        output.WriteMessage(PositionMargin);
      }
      if (upnl_ != null) {
        output.WriteRawTag(250, 4);
        output.WriteMessage(Upnl);
      }
      if (positionContracts_ != null) {
        output.WriteRawTag(194, 6);
        output.WriteMessage(PositionContracts);
      }
      if (positionVolume_ != null) {
        output.WriteRawTag(202, 6);
        output.WriteMessage(PositionVolume);
      }
      if (positionLiquidationVolume_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(PositionLiquidationVolume);
      }
      if (PositionType != global::DigitexWire.OrderPosition.Undefined) {
        output.WriteRawTag(216, 6);
        output.WriteEnum((int) PositionType);
      }
      if (lastTradePrice_ != null) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(LastTradePrice);
      }
      if (lastTradeQuantity_ != null) {
        output.WriteRawTag(162, 7);
        output.WriteMessage(LastTradeQuantity);
      }
      if (positionBankruptcyVolume_ != null) {
        output.WriteRawTag(170, 7);
        output.WriteMessage(PositionBankruptcyVolume);
      }
      if (buyOrderMargin_ != null) {
        output.WriteRawTag(178, 7);
        output.WriteMessage(BuyOrderMargin);
      }
      if (sellOrderMargin_ != null) {
        output.WriteRawTag(186, 7);
        output.WriteMessage(SellOrderMargin);
      }
      if (pnl_ != null) {
        output.WriteRawTag(210, 9);
        output.WriteMessage(Pnl);
      }
      if (accumQuantity_ != null) {
        output.WriteRawTag(170, 11);
        output.WriteMessage(AccumQuantity);
      }
      if (buyOrderQuantity_ != null) {
        output.WriteRawTag(178, 11);
        output.WriteMessage(BuyOrderQuantity);
      }
      if (sellOrderQuantity_ != null) {
        output.WriteRawTag(186, 11);
        output.WriteMessage(SellOrderQuantity);
      }
      if (LastTradeTimestamp != 0L) {
        output.WriteRawTag(192, 18);
        output.WriteInt64(LastTradeTimestamp);
      }
      if (fullPositionMargin_ != null) {
        output.WriteRawTag(210, 18);
        output.WriteMessage(FullPositionMargin);
      }
      if (fullBuyOrderMargin_ != null) {
        output.WriteRawTag(218, 18);
        output.WriteMessage(FullBuyOrderMargin);
      }
      if (fullSellOrderMargin_ != null) {
        output.WriteRawTag(226, 18);
        output.WriteMessage(FullSellOrderMargin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Leverage != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(Leverage);
      }
      trades_.WriteTo(ref output, _repeated_trades_codec);
      if (traderBalance_ != null) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(TraderBalance);
      }
      orders_.WriteTo(ref output, _repeated_orders_codec);
      if (orderMargin_ != null) {
        output.WriteRawTag(226, 4);
        output.WriteMessage(OrderMargin);
      }
      if (positionMargin_ != null) {
        output.WriteRawTag(242, 4);
        output.WriteMessage(PositionMargin);
      }
      if (upnl_ != null) {
        output.WriteRawTag(250, 4);
        output.WriteMessage(Upnl);
      }
      if (positionContracts_ != null) {
        output.WriteRawTag(194, 6);
        output.WriteMessage(PositionContracts);
      }
      if (positionVolume_ != null) {
        output.WriteRawTag(202, 6);
        output.WriteMessage(PositionVolume);
      }
      if (positionLiquidationVolume_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(PositionLiquidationVolume);
      }
      if (PositionType != global::DigitexWire.OrderPosition.Undefined) {
        output.WriteRawTag(216, 6);
        output.WriteEnum((int) PositionType);
      }
      if (lastTradePrice_ != null) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(LastTradePrice);
      }
      if (lastTradeQuantity_ != null) {
        output.WriteRawTag(162, 7);
        output.WriteMessage(LastTradeQuantity);
      }
      if (positionBankruptcyVolume_ != null) {
        output.WriteRawTag(170, 7);
        output.WriteMessage(PositionBankruptcyVolume);
      }
      if (buyOrderMargin_ != null) {
        output.WriteRawTag(178, 7);
        output.WriteMessage(BuyOrderMargin);
      }
      if (sellOrderMargin_ != null) {
        output.WriteRawTag(186, 7);
        output.WriteMessage(SellOrderMargin);
      }
      if (pnl_ != null) {
        output.WriteRawTag(210, 9);
        output.WriteMessage(Pnl);
      }
      if (accumQuantity_ != null) {
        output.WriteRawTag(170, 11);
        output.WriteMessage(AccumQuantity);
      }
      if (buyOrderQuantity_ != null) {
        output.WriteRawTag(178, 11);
        output.WriteMessage(BuyOrderQuantity);
      }
      if (sellOrderQuantity_ != null) {
        output.WriteRawTag(186, 11);
        output.WriteMessage(SellOrderQuantity);
      }
      if (LastTradeTimestamp != 0L) {
        output.WriteRawTag(192, 18);
        output.WriteInt64(LastTradeTimestamp);
      }
      if (fullPositionMargin_ != null) {
        output.WriteRawTag(210, 18);
        output.WriteMessage(FullPositionMargin);
      }
      if (fullBuyOrderMargin_ != null) {
        output.WriteRawTag(218, 18);
        output.WriteMessage(FullBuyOrderMargin);
      }
      if (fullSellOrderMargin_ != null) {
        output.WriteRawTag(226, 18);
        output.WriteMessage(FullSellOrderMargin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Leverage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Leverage);
      }
      size += trades_.CalculateSize(_repeated_trades_codec);
      size += orders_.CalculateSize(_repeated_orders_codec);
      if (traderBalance_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TraderBalance);
      }
      if (orderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderMargin);
      }
      if (positionMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionMargin);
      }
      if (upnl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Upnl);
      }
      if (pnl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Pnl);
      }
      if (accumQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AccumQuantity);
      }
      if (positionContracts_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionContracts);
      }
      if (positionVolume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionVolume);
      }
      if (positionLiquidationVolume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionLiquidationVolume);
      }
      if (positionBankruptcyVolume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionBankruptcyVolume);
      }
      if (PositionType != global::DigitexWire.OrderPosition.Undefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PositionType);
      }
      if (buyOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BuyOrderMargin);
      }
      if (sellOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SellOrderMargin);
      }
      if (lastTradePrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastTradePrice);
      }
      if (lastTradeQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastTradeQuantity);
      }
      if (LastTradeTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastTradeTimestamp);
      }
      if (buyOrderQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BuyOrderQuantity);
      }
      if (sellOrderQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SellOrderQuantity);
      }
      if (fullPositionMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FullPositionMargin);
      }
      if (fullBuyOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FullBuyOrderMargin);
      }
      if (fullSellOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FullSellOrderMargin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeverageMessage other) {
      if (other == null) {
        return;
      }
      if (other.Leverage != 0) {
        Leverage = other.Leverage;
      }
      trades_.Add(other.trades_);
      orders_.Add(other.orders_);
      if (other.traderBalance_ != null) {
        if (traderBalance_ == null) {
          TraderBalance = new global::DigitexWire.Decimal();
        }
        TraderBalance.MergeFrom(other.TraderBalance);
      }
      if (other.orderMargin_ != null) {
        if (orderMargin_ == null) {
          OrderMargin = new global::DigitexWire.Decimal();
        }
        OrderMargin.MergeFrom(other.OrderMargin);
      }
      if (other.positionMargin_ != null) {
        if (positionMargin_ == null) {
          PositionMargin = new global::DigitexWire.Decimal();
        }
        PositionMargin.MergeFrom(other.PositionMargin);
      }
      if (other.upnl_ != null) {
        if (upnl_ == null) {
          Upnl = new global::DigitexWire.Decimal();
        }
        Upnl.MergeFrom(other.Upnl);
      }
      if (other.pnl_ != null) {
        if (pnl_ == null) {
          Pnl = new global::DigitexWire.Decimal();
        }
        Pnl.MergeFrom(other.Pnl);
      }
      if (other.accumQuantity_ != null) {
        if (accumQuantity_ == null) {
          AccumQuantity = new global::DigitexWire.Decimal();
        }
        AccumQuantity.MergeFrom(other.AccumQuantity);
      }
      if (other.positionContracts_ != null) {
        if (positionContracts_ == null) {
          PositionContracts = new global::DigitexWire.Decimal();
        }
        PositionContracts.MergeFrom(other.PositionContracts);
      }
      if (other.positionVolume_ != null) {
        if (positionVolume_ == null) {
          PositionVolume = new global::DigitexWire.Decimal();
        }
        PositionVolume.MergeFrom(other.PositionVolume);
      }
      if (other.positionLiquidationVolume_ != null) {
        if (positionLiquidationVolume_ == null) {
          PositionLiquidationVolume = new global::DigitexWire.Decimal();
        }
        PositionLiquidationVolume.MergeFrom(other.PositionLiquidationVolume);
      }
      if (other.positionBankruptcyVolume_ != null) {
        if (positionBankruptcyVolume_ == null) {
          PositionBankruptcyVolume = new global::DigitexWire.Decimal();
        }
        PositionBankruptcyVolume.MergeFrom(other.PositionBankruptcyVolume);
      }
      if (other.PositionType != global::DigitexWire.OrderPosition.Undefined) {
        PositionType = other.PositionType;
      }
      if (other.buyOrderMargin_ != null) {
        if (buyOrderMargin_ == null) {
          BuyOrderMargin = new global::DigitexWire.Decimal();
        }
        BuyOrderMargin.MergeFrom(other.BuyOrderMargin);
      }
      if (other.sellOrderMargin_ != null) {
        if (sellOrderMargin_ == null) {
          SellOrderMargin = new global::DigitexWire.Decimal();
        }
        SellOrderMargin.MergeFrom(other.SellOrderMargin);
      }
      if (other.lastTradePrice_ != null) {
        if (lastTradePrice_ == null) {
          LastTradePrice = new global::DigitexWire.Decimal();
        }
        LastTradePrice.MergeFrom(other.LastTradePrice);
      }
      if (other.lastTradeQuantity_ != null) {
        if (lastTradeQuantity_ == null) {
          LastTradeQuantity = new global::DigitexWire.Decimal();
        }
        LastTradeQuantity.MergeFrom(other.LastTradeQuantity);
      }
      if (other.LastTradeTimestamp != 0L) {
        LastTradeTimestamp = other.LastTradeTimestamp;
      }
      if (other.buyOrderQuantity_ != null) {
        if (buyOrderQuantity_ == null) {
          BuyOrderQuantity = new global::DigitexWire.Decimal();
        }
        BuyOrderQuantity.MergeFrom(other.BuyOrderQuantity);
      }
      if (other.sellOrderQuantity_ != null) {
        if (sellOrderQuantity_ == null) {
          SellOrderQuantity = new global::DigitexWire.Decimal();
        }
        SellOrderQuantity.MergeFrom(other.SellOrderQuantity);
      }
      if (other.fullPositionMargin_ != null) {
        if (fullPositionMargin_ == null) {
          FullPositionMargin = new global::DigitexWire.Decimal();
        }
        FullPositionMargin.MergeFrom(other.FullPositionMargin);
      }
      if (other.fullBuyOrderMargin_ != null) {
        if (fullBuyOrderMargin_ == null) {
          FullBuyOrderMargin = new global::DigitexWire.Decimal();
        }
        FullBuyOrderMargin.MergeFrom(other.FullBuyOrderMargin);
      }
      if (other.fullSellOrderMargin_ != null) {
        if (fullSellOrderMargin_ == null) {
          FullSellOrderMargin = new global::DigitexWire.Decimal();
        }
        FullSellOrderMargin.MergeFrom(other.FullSellOrderMargin);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 272: {
            Leverage = input.ReadUInt32();
            break;
          }
          case 370: {
            trades_.AddEntriesFrom(input, _repeated_trades_codec);
            break;
          }
          case 410: {
            if (traderBalance_ == null) {
              TraderBalance = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TraderBalance);
            break;
          }
          case 562: {
            orders_.AddEntriesFrom(input, _repeated_orders_codec);
            break;
          }
          case 610: {
            if (orderMargin_ == null) {
              OrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OrderMargin);
            break;
          }
          case 626: {
            if (positionMargin_ == null) {
              PositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionMargin);
            break;
          }
          case 634: {
            if (upnl_ == null) {
              Upnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Upnl);
            break;
          }
          case 834: {
            if (positionContracts_ == null) {
              PositionContracts = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionContracts);
            break;
          }
          case 842: {
            if (positionVolume_ == null) {
              PositionVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionVolume);
            break;
          }
          case 850: {
            if (positionLiquidationVolume_ == null) {
              PositionLiquidationVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionLiquidationVolume);
            break;
          }
          case 856: {
            PositionType = (global::DigitexWire.OrderPosition) input.ReadEnum();
            break;
          }
          case 906: {
            if (lastTradePrice_ == null) {
              LastTradePrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradePrice);
            break;
          }
          case 930: {
            if (lastTradeQuantity_ == null) {
              LastTradeQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradeQuantity);
            break;
          }
          case 938: {
            if (positionBankruptcyVolume_ == null) {
              PositionBankruptcyVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionBankruptcyVolume);
            break;
          }
          case 946: {
            if (buyOrderMargin_ == null) {
              BuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderMargin);
            break;
          }
          case 954: {
            if (sellOrderMargin_ == null) {
              SellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderMargin);
            break;
          }
          case 1234: {
            if (pnl_ == null) {
              Pnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Pnl);
            break;
          }
          case 1450: {
            if (accumQuantity_ == null) {
              AccumQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(AccumQuantity);
            break;
          }
          case 1458: {
            if (buyOrderQuantity_ == null) {
              BuyOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderQuantity);
            break;
          }
          case 1466: {
            if (sellOrderQuantity_ == null) {
              SellOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderQuantity);
            break;
          }
          case 2368: {
            LastTradeTimestamp = input.ReadInt64();
            break;
          }
          case 2386: {
            if (fullPositionMargin_ == null) {
              FullPositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullPositionMargin);
            break;
          }
          case 2394: {
            if (fullBuyOrderMargin_ == null) {
              FullBuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullBuyOrderMargin);
            break;
          }
          case 2402: {
            if (fullSellOrderMargin_ == null) {
              FullSellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullSellOrderMargin);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 272: {
            Leverage = input.ReadUInt32();
            break;
          }
          case 370: {
            trades_.AddEntriesFrom(ref input, _repeated_trades_codec);
            break;
          }
          case 410: {
            if (traderBalance_ == null) {
              TraderBalance = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TraderBalance);
            break;
          }
          case 562: {
            orders_.AddEntriesFrom(ref input, _repeated_orders_codec);
            break;
          }
          case 610: {
            if (orderMargin_ == null) {
              OrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OrderMargin);
            break;
          }
          case 626: {
            if (positionMargin_ == null) {
              PositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionMargin);
            break;
          }
          case 634: {
            if (upnl_ == null) {
              Upnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Upnl);
            break;
          }
          case 834: {
            if (positionContracts_ == null) {
              PositionContracts = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionContracts);
            break;
          }
          case 842: {
            if (positionVolume_ == null) {
              PositionVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionVolume);
            break;
          }
          case 850: {
            if (positionLiquidationVolume_ == null) {
              PositionLiquidationVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionLiquidationVolume);
            break;
          }
          case 856: {
            PositionType = (global::DigitexWire.OrderPosition) input.ReadEnum();
            break;
          }
          case 906: {
            if (lastTradePrice_ == null) {
              LastTradePrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradePrice);
            break;
          }
          case 930: {
            if (lastTradeQuantity_ == null) {
              LastTradeQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradeQuantity);
            break;
          }
          case 938: {
            if (positionBankruptcyVolume_ == null) {
              PositionBankruptcyVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionBankruptcyVolume);
            break;
          }
          case 946: {
            if (buyOrderMargin_ == null) {
              BuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderMargin);
            break;
          }
          case 954: {
            if (sellOrderMargin_ == null) {
              SellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderMargin);
            break;
          }
          case 1234: {
            if (pnl_ == null) {
              Pnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Pnl);
            break;
          }
          case 1450: {
            if (accumQuantity_ == null) {
              AccumQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(AccumQuantity);
            break;
          }
          case 1458: {
            if (buyOrderQuantity_ == null) {
              BuyOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderQuantity);
            break;
          }
          case 1466: {
            if (sellOrderQuantity_ == null) {
              SellOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderQuantity);
            break;
          }
          case 2368: {
            LastTradeTimestamp = input.ReadInt64();
            break;
          }
          case 2386: {
            if (fullPositionMargin_ == null) {
              FullPositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullPositionMargin);
            break;
          }
          case 2394: {
            if (fullBuyOrderMargin_ == null) {
              FullBuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullBuyOrderMargin);
            break;
          }
          case 2402: {
            if (fullSellOrderMargin_ == null) {
              FullSellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullSellOrderMargin);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TradeMessage : pb::IMessage<TradeMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TradeMessage> _parser = new pb::MessageParser<TradeMessage>(() => new TradeMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradeMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeMessage(TradeMessage other) : this() {
      tradeTimestamp_ = other.tradeTimestamp_;
      tradeTraderId_ = other.tradeTraderId_;
      position_ = other.position_;
      price_ = other.price_ != null ? other.price_.Clone() : null;
      paidPrice_ = other.paidPrice_ != null ? other.paidPrice_.Clone() : null;
      liquidationPrice_ = other.liquidationPrice_ != null ? other.liquidationPrice_.Clone() : null;
      bankruptcyPrice_ = other.bankruptcyPrice_ != null ? other.bankruptcyPrice_.Clone() : null;
      quantity_ = other.quantity_ != null ? other.quantity_.Clone() : null;
      exitPrice_ = other.exitPrice_ != null ? other.exitPrice_.Clone() : null;
      leverage_ = other.leverage_;
      contractId_ = other.contractId_;
      oldContractId_ = other.oldContractId_;
      oldClientId_ = other.oldClientId_;
      isIncrease_ = other.isIncrease_;
      isLiquidation_ = other.isLiquidation_;
      openTime_ = other.openTime_;
      entryQuantity_ = other.entryQuantity_ != null ? other.entryQuantity_.Clone() : null;
      exitQuantity_ = other.exitQuantity_ != null ? other.exitQuantity_.Clone() : null;
      exitVolume_ = other.exitVolume_ != null ? other.exitVolume_.Clone() : null;
      fundingPaidPrice_ = other.fundingPaidPrice_ != null ? other.fundingPaidPrice_.Clone() : null;
      fundingQuantity_ = other.fundingQuantity_ != null ? other.fundingQuantity_.Clone() : null;
      fundingVolume_ = other.fundingVolume_ != null ? other.fundingVolume_.Clone() : null;
      fundingCount_ = other.fundingCount_;
      isFunding_ = other.isFunding_;
      isMaker_ = other.isMaker_;
      origContractId_ = other.origContractId_;
      isSettlement_ = other.isSettlement_;
      volume_ = other.volume_ != null ? other.volume_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeMessage Clone() {
      return new TradeMessage(this);
    }

    /// <summary>Field number for the "trade_timestamp" field.</summary>
    public const int TradeTimestampFieldNumber = 69;
    private long tradeTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TradeTimestamp {
      get { return tradeTimestamp_; }
      set {
        tradeTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "trade_trader_id" field.</summary>
    public const int TradeTraderIdFieldNumber = 74;
    private uint tradeTraderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TradeTraderId {
      get { return tradeTraderId_; }
      set {
        tradeTraderId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 45;
    private global::DigitexWire.OrderPosition position_ = global::DigitexWire.OrderPosition.Undefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderPosition Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 38;
    private global::DigitexWire.Decimal price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "paid_price" field.</summary>
    public const int PaidPriceFieldNumber = 66;
    private global::DigitexWire.Decimal paidPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PaidPrice {
      get { return paidPrice_; }
      set {
        paidPrice_ = value;
      }
    }

    /// <summary>Field number for the "liquidation_price" field.</summary>
    public const int LiquidationPriceFieldNumber = 67;
    private global::DigitexWire.Decimal liquidationPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal LiquidationPrice {
      get { return liquidationPrice_; }
      set {
        liquidationPrice_ = value;
      }
    }

    /// <summary>Field number for the "bankruptcy_price" field.</summary>
    public const int BankruptcyPriceFieldNumber = 202;
    private global::DigitexWire.Decimal bankruptcyPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal BankruptcyPrice {
      get { return bankruptcyPrice_; }
      set {
        bankruptcyPrice_ = value;
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 39;
    private global::DigitexWire.Decimal quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "exit_price" field.</summary>
    public const int ExitPriceFieldNumber = 166;
    private global::DigitexWire.Decimal exitPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal ExitPrice {
      get { return exitPrice_; }
      set {
        exitPrice_ = value;
      }
    }

    /// <summary>Field number for the "leverage" field.</summary>
    public const int LeverageFieldNumber = 34;
    private uint leverage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Leverage {
      get { return leverage_; }
      set {
        leverage_ = value;
      }
    }

    /// <summary>Field number for the "contract_id" field.</summary>
    public const int ContractIdFieldNumber = 41;
    private ulong contractId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ContractId {
      get { return contractId_; }
      set {
        contractId_ = value;
      }
    }

    /// <summary>Field number for the "old_contract_id" field.</summary>
    public const int OldContractIdFieldNumber = 57;
    private ulong oldContractId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OldContractId {
      get { return oldContractId_; }
      set {
        oldContractId_ = value;
      }
    }

    /// <summary>Field number for the "old_client_id" field.</summary>
    public const int OldClientIdFieldNumber = 65;
    private pb::ByteString oldClientId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OldClientId {
      get { return oldClientId_; }
      set {
        oldClientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_increase" field.</summary>
    public const int IsIncreaseFieldNumber = 164;
    private int isIncrease_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsIncrease {
      get { return isIncrease_; }
      set {
        isIncrease_ = value;
      }
    }

    /// <summary>Field number for the "is_liquidation" field.</summary>
    public const int IsLiquidationFieldNumber = 167;
    private int isLiquidation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsLiquidation {
      get { return isLiquidation_; }
      set {
        isLiquidation_ = value;
      }
    }

    /// <summary>Field number for the "open_time" field.</summary>
    public const int OpenTimeFieldNumber = 194;
    private long openTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OpenTime {
      get { return openTime_; }
      set {
        openTime_ = value;
      }
    }

    /// <summary>Field number for the "entry_quantity" field.</summary>
    public const int EntryQuantityFieldNumber = 195;
    private global::DigitexWire.Decimal entryQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal EntryQuantity {
      get { return entryQuantity_; }
      set {
        entryQuantity_ = value;
      }
    }

    /// <summary>Field number for the "exit_quantity" field.</summary>
    public const int ExitQuantityFieldNumber = 196;
    private global::DigitexWire.Decimal exitQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal ExitQuantity {
      get { return exitQuantity_; }
      set {
        exitQuantity_ = value;
      }
    }

    /// <summary>Field number for the "exit_volume" field.</summary>
    public const int ExitVolumeFieldNumber = 197;
    private global::DigitexWire.Decimal exitVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal ExitVolume {
      get { return exitVolume_; }
      set {
        exitVolume_ = value;
      }
    }

    /// <summary>Field number for the "funding_paid_price" field.</summary>
    public const int FundingPaidPriceFieldNumber = 198;
    private global::DigitexWire.Decimal fundingPaidPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FundingPaidPrice {
      get { return fundingPaidPrice_; }
      set {
        fundingPaidPrice_ = value;
      }
    }

    /// <summary>Field number for the "funding_quantity" field.</summary>
    public const int FundingQuantityFieldNumber = 199;
    private global::DigitexWire.Decimal fundingQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FundingQuantity {
      get { return fundingQuantity_; }
      set {
        fundingQuantity_ = value;
      }
    }

    /// <summary>Field number for the "funding_volume" field.</summary>
    public const int FundingVolumeFieldNumber = 200;
    private global::DigitexWire.Decimal fundingVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FundingVolume {
      get { return fundingVolume_; }
      set {
        fundingVolume_ = value;
      }
    }

    /// <summary>Field number for the "funding_count" field.</summary>
    public const int FundingCountFieldNumber = 201;
    private int fundingCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FundingCount {
      get { return fundingCount_; }
      set {
        fundingCount_ = value;
      }
    }

    /// <summary>Field number for the "is_funding" field.</summary>
    public const int IsFundingFieldNumber = 203;
    private int isFunding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFunding {
      get { return isFunding_; }
      set {
        isFunding_ = value;
      }
    }

    /// <summary>Field number for the "is_maker" field.</summary>
    public const int IsMakerFieldNumber = 207;
    private int isMaker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsMaker {
      get { return isMaker_; }
      set {
        isMaker_ = value;
      }
    }

    /// <summary>Field number for the "orig_contract_id" field.</summary>
    public const int OrigContractIdFieldNumber = 208;
    private ulong origContractId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OrigContractId {
      get { return origContractId_; }
      set {
        origContractId_ = value;
      }
    }

    /// <summary>Field number for the "is_settlement" field.</summary>
    public const int IsSettlementFieldNumber = 277;
    private int isSettlement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsSettlement {
      get { return isSettlement_; }
      set {
        isSettlement_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 279;
    private global::DigitexWire.Decimal volume_;
    /// <summary>
    /// for spot market if 'price * quantity' has been rounded
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TradeMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TradeMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TradeTimestamp != other.TradeTimestamp) return false;
      if (TradeTraderId != other.TradeTraderId) return false;
      if (Position != other.Position) return false;
      if (!object.Equals(Price, other.Price)) return false;
      if (!object.Equals(PaidPrice, other.PaidPrice)) return false;
      if (!object.Equals(LiquidationPrice, other.LiquidationPrice)) return false;
      if (!object.Equals(BankruptcyPrice, other.BankruptcyPrice)) return false;
      if (!object.Equals(Quantity, other.Quantity)) return false;
      if (!object.Equals(ExitPrice, other.ExitPrice)) return false;
      if (Leverage != other.Leverage) return false;
      if (ContractId != other.ContractId) return false;
      if (OldContractId != other.OldContractId) return false;
      if (OldClientId != other.OldClientId) return false;
      if (IsIncrease != other.IsIncrease) return false;
      if (IsLiquidation != other.IsLiquidation) return false;
      if (OpenTime != other.OpenTime) return false;
      if (!object.Equals(EntryQuantity, other.EntryQuantity)) return false;
      if (!object.Equals(ExitQuantity, other.ExitQuantity)) return false;
      if (!object.Equals(ExitVolume, other.ExitVolume)) return false;
      if (!object.Equals(FundingPaidPrice, other.FundingPaidPrice)) return false;
      if (!object.Equals(FundingQuantity, other.FundingQuantity)) return false;
      if (!object.Equals(FundingVolume, other.FundingVolume)) return false;
      if (FundingCount != other.FundingCount) return false;
      if (IsFunding != other.IsFunding) return false;
      if (IsMaker != other.IsMaker) return false;
      if (OrigContractId != other.OrigContractId) return false;
      if (IsSettlement != other.IsSettlement) return false;
      if (!object.Equals(Volume, other.Volume)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TradeTimestamp != 0L) hash ^= TradeTimestamp.GetHashCode();
      if (TradeTraderId != 0) hash ^= TradeTraderId.GetHashCode();
      if (Position != global::DigitexWire.OrderPosition.Undefined) hash ^= Position.GetHashCode();
      if (price_ != null) hash ^= Price.GetHashCode();
      if (paidPrice_ != null) hash ^= PaidPrice.GetHashCode();
      if (liquidationPrice_ != null) hash ^= LiquidationPrice.GetHashCode();
      if (bankruptcyPrice_ != null) hash ^= BankruptcyPrice.GetHashCode();
      if (quantity_ != null) hash ^= Quantity.GetHashCode();
      if (exitPrice_ != null) hash ^= ExitPrice.GetHashCode();
      if (Leverage != 0) hash ^= Leverage.GetHashCode();
      if (ContractId != 0UL) hash ^= ContractId.GetHashCode();
      if (OldContractId != 0UL) hash ^= OldContractId.GetHashCode();
      if (OldClientId.Length != 0) hash ^= OldClientId.GetHashCode();
      if (IsIncrease != 0) hash ^= IsIncrease.GetHashCode();
      if (IsLiquidation != 0) hash ^= IsLiquidation.GetHashCode();
      if (OpenTime != 0L) hash ^= OpenTime.GetHashCode();
      if (entryQuantity_ != null) hash ^= EntryQuantity.GetHashCode();
      if (exitQuantity_ != null) hash ^= ExitQuantity.GetHashCode();
      if (exitVolume_ != null) hash ^= ExitVolume.GetHashCode();
      if (fundingPaidPrice_ != null) hash ^= FundingPaidPrice.GetHashCode();
      if (fundingQuantity_ != null) hash ^= FundingQuantity.GetHashCode();
      if (fundingVolume_ != null) hash ^= FundingVolume.GetHashCode();
      if (FundingCount != 0) hash ^= FundingCount.GetHashCode();
      if (IsFunding != 0) hash ^= IsFunding.GetHashCode();
      if (IsMaker != 0) hash ^= IsMaker.GetHashCode();
      if (OrigContractId != 0UL) hash ^= OrigContractId.GetHashCode();
      if (IsSettlement != 0) hash ^= IsSettlement.GetHashCode();
      if (volume_ != null) hash ^= Volume.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Leverage != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(Leverage);
      }
      if (price_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(Price);
      }
      if (quantity_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Quantity);
      }
      if (ContractId != 0UL) {
        output.WriteRawTag(200, 2);
        output.WriteUInt64(ContractId);
      }
      if (Position != global::DigitexWire.OrderPosition.Undefined) {
        output.WriteRawTag(232, 2);
        output.WriteEnum((int) Position);
      }
      if (OldContractId != 0UL) {
        output.WriteRawTag(200, 3);
        output.WriteUInt64(OldContractId);
      }
      if (OldClientId.Length != 0) {
        output.WriteRawTag(138, 4);
        output.WriteBytes(OldClientId);
      }
      if (paidPrice_ != null) {
        output.WriteRawTag(146, 4);
        output.WriteMessage(PaidPrice);
      }
      if (liquidationPrice_ != null) {
        output.WriteRawTag(154, 4);
        output.WriteMessage(LiquidationPrice);
      }
      if (TradeTimestamp != 0L) {
        output.WriteRawTag(168, 4);
        output.WriteInt64(TradeTimestamp);
      }
      if (TradeTraderId != 0) {
        output.WriteRawTag(208, 4);
        output.WriteUInt32(TradeTraderId);
      }
      if (IsIncrease != 0) {
        output.WriteRawTag(160, 10);
        output.WriteInt32(IsIncrease);
      }
      if (exitPrice_ != null) {
        output.WriteRawTag(178, 10);
        output.WriteMessage(ExitPrice);
      }
      if (IsLiquidation != 0) {
        output.WriteRawTag(184, 10);
        output.WriteInt32(IsLiquidation);
      }
      if (OpenTime != 0L) {
        output.WriteRawTag(144, 12);
        output.WriteInt64(OpenTime);
      }
      if (entryQuantity_ != null) {
        output.WriteRawTag(154, 12);
        output.WriteMessage(EntryQuantity);
      }
      if (exitQuantity_ != null) {
        output.WriteRawTag(162, 12);
        output.WriteMessage(ExitQuantity);
      }
      if (exitVolume_ != null) {
        output.WriteRawTag(170, 12);
        output.WriteMessage(ExitVolume);
      }
      if (fundingPaidPrice_ != null) {
        output.WriteRawTag(178, 12);
        output.WriteMessage(FundingPaidPrice);
      }
      if (fundingQuantity_ != null) {
        output.WriteRawTag(186, 12);
        output.WriteMessage(FundingQuantity);
      }
      if (fundingVolume_ != null) {
        output.WriteRawTag(194, 12);
        output.WriteMessage(FundingVolume);
      }
      if (FundingCount != 0) {
        output.WriteRawTag(200, 12);
        output.WriteInt32(FundingCount);
      }
      if (bankruptcyPrice_ != null) {
        output.WriteRawTag(210, 12);
        output.WriteMessage(BankruptcyPrice);
      }
      if (IsFunding != 0) {
        output.WriteRawTag(216, 12);
        output.WriteInt32(IsFunding);
      }
      if (IsMaker != 0) {
        output.WriteRawTag(248, 12);
        output.WriteInt32(IsMaker);
      }
      if (OrigContractId != 0UL) {
        output.WriteRawTag(128, 13);
        output.WriteUInt64(OrigContractId);
      }
      if (IsSettlement != 0) {
        output.WriteRawTag(168, 17);
        output.WriteInt32(IsSettlement);
      }
      if (volume_ != null) {
        output.WriteRawTag(186, 17);
        output.WriteMessage(Volume);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Leverage != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(Leverage);
      }
      if (price_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(Price);
      }
      if (quantity_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Quantity);
      }
      if (ContractId != 0UL) {
        output.WriteRawTag(200, 2);
        output.WriteUInt64(ContractId);
      }
      if (Position != global::DigitexWire.OrderPosition.Undefined) {
        output.WriteRawTag(232, 2);
        output.WriteEnum((int) Position);
      }
      if (OldContractId != 0UL) {
        output.WriteRawTag(200, 3);
        output.WriteUInt64(OldContractId);
      }
      if (OldClientId.Length != 0) {
        output.WriteRawTag(138, 4);
        output.WriteBytes(OldClientId);
      }
      if (paidPrice_ != null) {
        output.WriteRawTag(146, 4);
        output.WriteMessage(PaidPrice);
      }
      if (liquidationPrice_ != null) {
        output.WriteRawTag(154, 4);
        output.WriteMessage(LiquidationPrice);
      }
      if (TradeTimestamp != 0L) {
        output.WriteRawTag(168, 4);
        output.WriteInt64(TradeTimestamp);
      }
      if (TradeTraderId != 0) {
        output.WriteRawTag(208, 4);
        output.WriteUInt32(TradeTraderId);
      }
      if (IsIncrease != 0) {
        output.WriteRawTag(160, 10);
        output.WriteInt32(IsIncrease);
      }
      if (exitPrice_ != null) {
        output.WriteRawTag(178, 10);
        output.WriteMessage(ExitPrice);
      }
      if (IsLiquidation != 0) {
        output.WriteRawTag(184, 10);
        output.WriteInt32(IsLiquidation);
      }
      if (OpenTime != 0L) {
        output.WriteRawTag(144, 12);
        output.WriteInt64(OpenTime);
      }
      if (entryQuantity_ != null) {
        output.WriteRawTag(154, 12);
        output.WriteMessage(EntryQuantity);
      }
      if (exitQuantity_ != null) {
        output.WriteRawTag(162, 12);
        output.WriteMessage(ExitQuantity);
      }
      if (exitVolume_ != null) {
        output.WriteRawTag(170, 12);
        output.WriteMessage(ExitVolume);
      }
      if (fundingPaidPrice_ != null) {
        output.WriteRawTag(178, 12);
        output.WriteMessage(FundingPaidPrice);
      }
      if (fundingQuantity_ != null) {
        output.WriteRawTag(186, 12);
        output.WriteMessage(FundingQuantity);
      }
      if (fundingVolume_ != null) {
        output.WriteRawTag(194, 12);
        output.WriteMessage(FundingVolume);
      }
      if (FundingCount != 0) {
        output.WriteRawTag(200, 12);
        output.WriteInt32(FundingCount);
      }
      if (bankruptcyPrice_ != null) {
        output.WriteRawTag(210, 12);
        output.WriteMessage(BankruptcyPrice);
      }
      if (IsFunding != 0) {
        output.WriteRawTag(216, 12);
        output.WriteInt32(IsFunding);
      }
      if (IsMaker != 0) {
        output.WriteRawTag(248, 12);
        output.WriteInt32(IsMaker);
      }
      if (OrigContractId != 0UL) {
        output.WriteRawTag(128, 13);
        output.WriteUInt64(OrigContractId);
      }
      if (IsSettlement != 0) {
        output.WriteRawTag(168, 17);
        output.WriteInt32(IsSettlement);
      }
      if (volume_ != null) {
        output.WriteRawTag(186, 17);
        output.WriteMessage(Volume);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TradeTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TradeTimestamp);
      }
      if (TradeTraderId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TradeTraderId);
      }
      if (Position != global::DigitexWire.OrderPosition.Undefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Position);
      }
      if (price_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Price);
      }
      if (paidPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PaidPrice);
      }
      if (liquidationPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LiquidationPrice);
      }
      if (bankruptcyPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BankruptcyPrice);
      }
      if (quantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Quantity);
      }
      if (exitPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExitPrice);
      }
      if (Leverage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Leverage);
      }
      if (ContractId != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(ContractId);
      }
      if (OldContractId != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(OldContractId);
      }
      if (OldClientId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(OldClientId);
      }
      if (IsIncrease != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsIncrease);
      }
      if (IsLiquidation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsLiquidation);
      }
      if (OpenTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(OpenTime);
      }
      if (entryQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EntryQuantity);
      }
      if (exitQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExitQuantity);
      }
      if (exitVolume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExitVolume);
      }
      if (fundingPaidPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FundingPaidPrice);
      }
      if (fundingQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FundingQuantity);
      }
      if (fundingVolume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FundingVolume);
      }
      if (FundingCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FundingCount);
      }
      if (IsFunding != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsFunding);
      }
      if (IsMaker != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsMaker);
      }
      if (OrigContractId != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(OrigContractId);
      }
      if (IsSettlement != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsSettlement);
      }
      if (volume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Volume);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TradeMessage other) {
      if (other == null) {
        return;
      }
      if (other.TradeTimestamp != 0L) {
        TradeTimestamp = other.TradeTimestamp;
      }
      if (other.TradeTraderId != 0) {
        TradeTraderId = other.TradeTraderId;
      }
      if (other.Position != global::DigitexWire.OrderPosition.Undefined) {
        Position = other.Position;
      }
      if (other.price_ != null) {
        if (price_ == null) {
          Price = new global::DigitexWire.Decimal();
        }
        Price.MergeFrom(other.Price);
      }
      if (other.paidPrice_ != null) {
        if (paidPrice_ == null) {
          PaidPrice = new global::DigitexWire.Decimal();
        }
        PaidPrice.MergeFrom(other.PaidPrice);
      }
      if (other.liquidationPrice_ != null) {
        if (liquidationPrice_ == null) {
          LiquidationPrice = new global::DigitexWire.Decimal();
        }
        LiquidationPrice.MergeFrom(other.LiquidationPrice);
      }
      if (other.bankruptcyPrice_ != null) {
        if (bankruptcyPrice_ == null) {
          BankruptcyPrice = new global::DigitexWire.Decimal();
        }
        BankruptcyPrice.MergeFrom(other.BankruptcyPrice);
      }
      if (other.quantity_ != null) {
        if (quantity_ == null) {
          Quantity = new global::DigitexWire.Decimal();
        }
        Quantity.MergeFrom(other.Quantity);
      }
      if (other.exitPrice_ != null) {
        if (exitPrice_ == null) {
          ExitPrice = new global::DigitexWire.Decimal();
        }
        ExitPrice.MergeFrom(other.ExitPrice);
      }
      if (other.Leverage != 0) {
        Leverage = other.Leverage;
      }
      if (other.ContractId != 0UL) {
        ContractId = other.ContractId;
      }
      if (other.OldContractId != 0UL) {
        OldContractId = other.OldContractId;
      }
      if (other.OldClientId.Length != 0) {
        OldClientId = other.OldClientId;
      }
      if (other.IsIncrease != 0) {
        IsIncrease = other.IsIncrease;
      }
      if (other.IsLiquidation != 0) {
        IsLiquidation = other.IsLiquidation;
      }
      if (other.OpenTime != 0L) {
        OpenTime = other.OpenTime;
      }
      if (other.entryQuantity_ != null) {
        if (entryQuantity_ == null) {
          EntryQuantity = new global::DigitexWire.Decimal();
        }
        EntryQuantity.MergeFrom(other.EntryQuantity);
      }
      if (other.exitQuantity_ != null) {
        if (exitQuantity_ == null) {
          ExitQuantity = new global::DigitexWire.Decimal();
        }
        ExitQuantity.MergeFrom(other.ExitQuantity);
      }
      if (other.exitVolume_ != null) {
        if (exitVolume_ == null) {
          ExitVolume = new global::DigitexWire.Decimal();
        }
        ExitVolume.MergeFrom(other.ExitVolume);
      }
      if (other.fundingPaidPrice_ != null) {
        if (fundingPaidPrice_ == null) {
          FundingPaidPrice = new global::DigitexWire.Decimal();
        }
        FundingPaidPrice.MergeFrom(other.FundingPaidPrice);
      }
      if (other.fundingQuantity_ != null) {
        if (fundingQuantity_ == null) {
          FundingQuantity = new global::DigitexWire.Decimal();
        }
        FundingQuantity.MergeFrom(other.FundingQuantity);
      }
      if (other.fundingVolume_ != null) {
        if (fundingVolume_ == null) {
          FundingVolume = new global::DigitexWire.Decimal();
        }
        FundingVolume.MergeFrom(other.FundingVolume);
      }
      if (other.FundingCount != 0) {
        FundingCount = other.FundingCount;
      }
      if (other.IsFunding != 0) {
        IsFunding = other.IsFunding;
      }
      if (other.IsMaker != 0) {
        IsMaker = other.IsMaker;
      }
      if (other.OrigContractId != 0UL) {
        OrigContractId = other.OrigContractId;
      }
      if (other.IsSettlement != 0) {
        IsSettlement = other.IsSettlement;
      }
      if (other.volume_ != null) {
        if (volume_ == null) {
          Volume = new global::DigitexWire.Decimal();
        }
        Volume.MergeFrom(other.Volume);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 272: {
            Leverage = input.ReadUInt32();
            break;
          }
          case 306: {
            if (price_ == null) {
              Price = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Price);
            break;
          }
          case 314: {
            if (quantity_ == null) {
              Quantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Quantity);
            break;
          }
          case 328: {
            ContractId = input.ReadUInt64();
            break;
          }
          case 360: {
            Position = (global::DigitexWire.OrderPosition) input.ReadEnum();
            break;
          }
          case 456: {
            OldContractId = input.ReadUInt64();
            break;
          }
          case 522: {
            OldClientId = input.ReadBytes();
            break;
          }
          case 530: {
            if (paidPrice_ == null) {
              PaidPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PaidPrice);
            break;
          }
          case 538: {
            if (liquidationPrice_ == null) {
              LiquidationPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LiquidationPrice);
            break;
          }
          case 552: {
            TradeTimestamp = input.ReadInt64();
            break;
          }
          case 592: {
            TradeTraderId = input.ReadUInt32();
            break;
          }
          case 1312: {
            IsIncrease = input.ReadInt32();
            break;
          }
          case 1330: {
            if (exitPrice_ == null) {
              ExitPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(ExitPrice);
            break;
          }
          case 1336: {
            IsLiquidation = input.ReadInt32();
            break;
          }
          case 1552: {
            OpenTime = input.ReadInt64();
            break;
          }
          case 1562: {
            if (entryQuantity_ == null) {
              EntryQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(EntryQuantity);
            break;
          }
          case 1570: {
            if (exitQuantity_ == null) {
              ExitQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(ExitQuantity);
            break;
          }
          case 1578: {
            if (exitVolume_ == null) {
              ExitVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(ExitVolume);
            break;
          }
          case 1586: {
            if (fundingPaidPrice_ == null) {
              FundingPaidPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FundingPaidPrice);
            break;
          }
          case 1594: {
            if (fundingQuantity_ == null) {
              FundingQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FundingQuantity);
            break;
          }
          case 1602: {
            if (fundingVolume_ == null) {
              FundingVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FundingVolume);
            break;
          }
          case 1608: {
            FundingCount = input.ReadInt32();
            break;
          }
          case 1618: {
            if (bankruptcyPrice_ == null) {
              BankruptcyPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BankruptcyPrice);
            break;
          }
          case 1624: {
            IsFunding = input.ReadInt32();
            break;
          }
          case 1656: {
            IsMaker = input.ReadInt32();
            break;
          }
          case 1664: {
            OrigContractId = input.ReadUInt64();
            break;
          }
          case 2216: {
            IsSettlement = input.ReadInt32();
            break;
          }
          case 2234: {
            if (volume_ == null) {
              Volume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Volume);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 272: {
            Leverage = input.ReadUInt32();
            break;
          }
          case 306: {
            if (price_ == null) {
              Price = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Price);
            break;
          }
          case 314: {
            if (quantity_ == null) {
              Quantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Quantity);
            break;
          }
          case 328: {
            ContractId = input.ReadUInt64();
            break;
          }
          case 360: {
            Position = (global::DigitexWire.OrderPosition) input.ReadEnum();
            break;
          }
          case 456: {
            OldContractId = input.ReadUInt64();
            break;
          }
          case 522: {
            OldClientId = input.ReadBytes();
            break;
          }
          case 530: {
            if (paidPrice_ == null) {
              PaidPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PaidPrice);
            break;
          }
          case 538: {
            if (liquidationPrice_ == null) {
              LiquidationPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LiquidationPrice);
            break;
          }
          case 552: {
            TradeTimestamp = input.ReadInt64();
            break;
          }
          case 592: {
            TradeTraderId = input.ReadUInt32();
            break;
          }
          case 1312: {
            IsIncrease = input.ReadInt32();
            break;
          }
          case 1330: {
            if (exitPrice_ == null) {
              ExitPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(ExitPrice);
            break;
          }
          case 1336: {
            IsLiquidation = input.ReadInt32();
            break;
          }
          case 1552: {
            OpenTime = input.ReadInt64();
            break;
          }
          case 1562: {
            if (entryQuantity_ == null) {
              EntryQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(EntryQuantity);
            break;
          }
          case 1570: {
            if (exitQuantity_ == null) {
              ExitQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(ExitQuantity);
            break;
          }
          case 1578: {
            if (exitVolume_ == null) {
              ExitVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(ExitVolume);
            break;
          }
          case 1586: {
            if (fundingPaidPrice_ == null) {
              FundingPaidPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FundingPaidPrice);
            break;
          }
          case 1594: {
            if (fundingQuantity_ == null) {
              FundingQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FundingQuantity);
            break;
          }
          case 1602: {
            if (fundingVolume_ == null) {
              FundingVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FundingVolume);
            break;
          }
          case 1608: {
            FundingCount = input.ReadInt32();
            break;
          }
          case 1618: {
            if (bankruptcyPrice_ == null) {
              BankruptcyPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BankruptcyPrice);
            break;
          }
          case 1624: {
            IsFunding = input.ReadInt32();
            break;
          }
          case 1656: {
            IsMaker = input.ReadInt32();
            break;
          }
          case 1664: {
            OrigContractId = input.ReadUInt64();
            break;
          }
          case 2216: {
            IsSettlement = input.ReadInt32();
            break;
          }
          case 2234: {
            if (volume_ == null) {
              Volume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Volume);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OrderFilledMessage : pb::IMessage<OrderFilledMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderFilledMessage> _parser = new pb::MessageParser<OrderFilledMessage>(() => new OrderFilledMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderFilledMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderFilledMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderFilledMessage(OrderFilledMessage other) : this() {
      status_ = other.status_;
      newClientId_ = other.newClientId_;
      orderType_ = other.orderType_;
      side_ = other.side_;
      leverage_ = other.leverage_;
      duration_ = other.duration_;
      price_ = other.price_ != null ? other.price_.Clone() : null;
      quantity_ = other.quantity_ != null ? other.quantity_.Clone() : null;
      paidPrice_ = other.paidPrice_ != null ? other.paidPrice_.Clone() : null;
      origClientId_ = other.origClientId_;
      openTime_ = other.openTime_;
      origQuantity_ = other.origQuantity_ != null ? other.origQuantity_.Clone() : null;
      volume_ = other.volume_ != null ? other.volume_.Clone() : null;
      droppedQuantity_ = other.droppedQuantity_ != null ? other.droppedQuantity_.Clone() : null;
      oldOrderId_ = other.oldOrderId_;
      origOrderId_ = other.origOrderId_;
      traderBalance_ = other.traderBalance_ != null ? other.traderBalance_.Clone() : null;
      orderMargin_ = other.orderMargin_ != null ? other.orderMargin_.Clone() : null;
      positionMargin_ = other.positionMargin_ != null ? other.positionMargin_.Clone() : null;
      upnl_ = other.upnl_ != null ? other.upnl_.Clone() : null;
      pnl_ = other.pnl_ != null ? other.pnl_.Clone() : null;
      accumQuantity_ = other.accumQuantity_ != null ? other.accumQuantity_.Clone() : null;
      positionContracts_ = other.positionContracts_ != null ? other.positionContracts_.Clone() : null;
      positionVolume_ = other.positionVolume_ != null ? other.positionVolume_.Clone() : null;
      positionLiquidationVolume_ = other.positionLiquidationVolume_ != null ? other.positionLiquidationVolume_.Clone() : null;
      positionBankruptcyVolume_ = other.positionBankruptcyVolume_ != null ? other.positionBankruptcyVolume_.Clone() : null;
      positionType_ = other.positionType_;
      lastTradePrice_ = other.lastTradePrice_ != null ? other.lastTradePrice_.Clone() : null;
      lastTradeQuantity_ = other.lastTradeQuantity_ != null ? other.lastTradeQuantity_.Clone() : null;
      lastTradeTimestamp_ = other.lastTradeTimestamp_;
      buyOrderMargin_ = other.buyOrderMargin_ != null ? other.buyOrderMargin_.Clone() : null;
      sellOrderMargin_ = other.sellOrderMargin_ != null ? other.sellOrderMargin_.Clone() : null;
      buyOrderQuantity_ = other.buyOrderQuantity_ != null ? other.buyOrderQuantity_.Clone() : null;
      sellOrderQuantity_ = other.sellOrderQuantity_ != null ? other.sellOrderQuantity_.Clone() : null;
      markPrice_ = other.markPrice_ != null ? other.markPrice_.Clone() : null;
      traderBalance2_ = other.traderBalance2_ != null ? other.traderBalance2_.Clone() : null;
      fullPositionMargin_ = other.fullPositionMargin_ != null ? other.fullPositionMargin_.Clone() : null;
      fullBuyOrderMargin_ = other.fullBuyOrderMargin_ != null ? other.fullBuyOrderMargin_.Clone() : null;
      fullSellOrderMargin_ = other.fullSellOrderMargin_ != null ? other.fullSellOrderMargin_.Clone() : null;
      trades_ = other.trades_.Clone();
      rawTrades_ = other.rawTrades_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderFilledMessage Clone() {
      return new OrderFilledMessage(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 42;
    private global::DigitexWire.OrderStatus status_ = global::DigitexWire.OrderStatus.StatusUndefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "new_client_id" field.</summary>
    public const int NewClientIdFieldNumber = 44;
    private pb::ByteString newClientId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NewClientId {
      get { return newClientId_; }
      set {
        newClientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_type" field.</summary>
    public const int OrderTypeFieldNumber = 32;
    private global::DigitexWire.OrderType orderType_ = global::DigitexWire.OrderType.TypeUndefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderType OrderType {
      get { return orderType_; }
      set {
        orderType_ = value;
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 33;
    private global::DigitexWire.OrderSide side_ = global::DigitexWire.OrderSide.SideUndefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "leverage" field.</summary>
    public const int LeverageFieldNumber = 34;
    private uint leverage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Leverage {
      get { return leverage_; }
      set {
        leverage_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 35;
    private global::DigitexWire.OrderDuration duration_ = global::DigitexWire.OrderDuration.DurationUndefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderDuration Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 38;
    private global::DigitexWire.Decimal price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 39;
    private global::DigitexWire.Decimal quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "paid_price" field.</summary>
    public const int PaidPriceFieldNumber = 66;
    private global::DigitexWire.Decimal paidPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PaidPrice {
      get { return paidPrice_; }
      set {
        paidPrice_ = value;
      }
    }

    /// <summary>Field number for the "orig_client_id" field.</summary>
    public const int OrigClientIdFieldNumber = 204;
    private pb::ByteString origClientId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OrigClientId {
      get { return origClientId_; }
      set {
        origClientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "open_time" field.</summary>
    public const int OpenTimeFieldNumber = 205;
    private long openTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OpenTime {
      get { return openTime_; }
      set {
        openTime_ = value;
      }
    }

    /// <summary>Field number for the "orig_quantity" field.</summary>
    public const int OrigQuantityFieldNumber = 206;
    private global::DigitexWire.Decimal origQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal OrigQuantity {
      get { return origQuantity_; }
      set {
        origQuantity_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 279;
    private global::DigitexWire.Decimal volume_;
    /// <summary>
    /// for spot market if 'price * quantity' has been rounded
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "dropped_quantity" field.</summary>
    public const int DroppedQuantityFieldNumber = 152;
    private global::DigitexWire.Decimal droppedQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal DroppedQuantity {
      get { return droppedQuantity_; }
      set {
        droppedQuantity_ = value;
      }
    }

    /// <summary>Field number for the "old_order_id" field.</summary>
    public const int OldOrderIdFieldNumber = 153;
    private pb::ByteString oldOrderId_ = pb::ByteString.Empty;
    /// <summary>
    /// from v129: the auto-generated order_id that matched
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OldOrderId {
      get { return oldOrderId_; }
      set {
        oldOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orig_order_id" field.</summary>
    public const int OrigOrderIdFieldNumber = 327;
    private pb::ByteString origOrderId_ = pb::ByteString.Empty;
    /// <summary>
    /// from v129: the auto-generated order_id of the first order in chain
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OrigOrderId {
      get { return origOrderId_; }
      set {
        origOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trader_balance" field.</summary>
    public const int TraderBalanceFieldNumber = 51;
    private global::DigitexWire.Decimal traderBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal TraderBalance {
      get { return traderBalance_; }
      set {
        traderBalance_ = value;
      }
    }

    /// <summary>Field number for the "order_margin" field.</summary>
    public const int OrderMarginFieldNumber = 76;
    private global::DigitexWire.Decimal orderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal OrderMargin {
      get { return orderMargin_; }
      set {
        orderMargin_ = value;
      }
    }

    /// <summary>Field number for the "position_margin" field.</summary>
    public const int PositionMarginFieldNumber = 78;
    private global::DigitexWire.Decimal positionMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionMargin {
      get { return positionMargin_; }
      set {
        positionMargin_ = value;
      }
    }

    /// <summary>Field number for the "upnl" field.</summary>
    public const int UpnlFieldNumber = 79;
    private global::DigitexWire.Decimal upnl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Upnl {
      get { return upnl_; }
      set {
        upnl_ = value;
      }
    }

    /// <summary>Field number for the "pnl" field.</summary>
    public const int PnlFieldNumber = 154;
    private global::DigitexWire.Decimal pnl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Pnl {
      get { return pnl_; }
      set {
        pnl_ = value;
      }
    }

    /// <summary>Field number for the "accum_quantity" field.</summary>
    public const int AccumQuantityFieldNumber = 181;
    private global::DigitexWire.Decimal accumQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal AccumQuantity {
      get { return accumQuantity_; }
      set {
        accumQuantity_ = value;
      }
    }

    /// <summary>Field number for the "position_contracts" field.</summary>
    public const int PositionContractsFieldNumber = 104;
    private global::DigitexWire.Decimal positionContracts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionContracts {
      get { return positionContracts_; }
      set {
        positionContracts_ = value;
      }
    }

    /// <summary>Field number for the "position_volume" field.</summary>
    public const int PositionVolumeFieldNumber = 105;
    private global::DigitexWire.Decimal positionVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionVolume {
      get { return positionVolume_; }
      set {
        positionVolume_ = value;
      }
    }

    /// <summary>Field number for the "position_liquidation_volume" field.</summary>
    public const int PositionLiquidationVolumeFieldNumber = 106;
    private global::DigitexWire.Decimal positionLiquidationVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionLiquidationVolume {
      get { return positionLiquidationVolume_; }
      set {
        positionLiquidationVolume_ = value;
      }
    }

    /// <summary>Field number for the "position_bankruptcy_volume" field.</summary>
    public const int PositionBankruptcyVolumeFieldNumber = 117;
    private global::DigitexWire.Decimal positionBankruptcyVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionBankruptcyVolume {
      get { return positionBankruptcyVolume_; }
      set {
        positionBankruptcyVolume_ = value;
      }
    }

    /// <summary>Field number for the "position_type" field.</summary>
    public const int PositionTypeFieldNumber = 107;
    private global::DigitexWire.OrderPosition positionType_ = global::DigitexWire.OrderPosition.Undefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderPosition PositionType {
      get { return positionType_; }
      set {
        positionType_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_price" field.</summary>
    public const int LastTradePriceFieldNumber = 113;
    private global::DigitexWire.Decimal lastTradePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal LastTradePrice {
      get { return lastTradePrice_; }
      set {
        lastTradePrice_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_quantity" field.</summary>
    public const int LastTradeQuantityFieldNumber = 116;
    private global::DigitexWire.Decimal lastTradeQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal LastTradeQuantity {
      get { return lastTradeQuantity_; }
      set {
        lastTradeQuantity_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_timestamp" field.</summary>
    public const int LastTradeTimestampFieldNumber = 296;
    private long lastTradeTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastTradeTimestamp {
      get { return lastTradeTimestamp_; }
      set {
        lastTradeTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "buy_order_margin" field.</summary>
    public const int BuyOrderMarginFieldNumber = 118;
    private global::DigitexWire.Decimal buyOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal BuyOrderMargin {
      get { return buyOrderMargin_; }
      set {
        buyOrderMargin_ = value;
      }
    }

    /// <summary>Field number for the "sell_order_margin" field.</summary>
    public const int SellOrderMarginFieldNumber = 119;
    private global::DigitexWire.Decimal sellOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal SellOrderMargin {
      get { return sellOrderMargin_; }
      set {
        sellOrderMargin_ = value;
      }
    }

    /// <summary>Field number for the "buy_order_quantity" field.</summary>
    public const int BuyOrderQuantityFieldNumber = 182;
    private global::DigitexWire.Decimal buyOrderQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal BuyOrderQuantity {
      get { return buyOrderQuantity_; }
      set {
        buyOrderQuantity_ = value;
      }
    }

    /// <summary>Field number for the "sell_order_quantity" field.</summary>
    public const int SellOrderQuantityFieldNumber = 183;
    private global::DigitexWire.Decimal sellOrderQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal SellOrderQuantity {
      get { return sellOrderQuantity_; }
      set {
        sellOrderQuantity_ = value;
      }
    }

    /// <summary>Field number for the "mark_price" field.</summary>
    public const int MarkPriceFieldNumber = 52;
    private global::DigitexWire.Decimal markPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal MarkPrice {
      get { return markPrice_; }
      set {
        markPrice_ = value;
      }
    }

    /// <summary>Field number for the "trader_balance_2" field.</summary>
    public const int TraderBalance2FieldNumber = 278;
    private global::DigitexWire.Decimal traderBalance2_;
    /// <summary>
    /// for spot market, balance in base currency
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal TraderBalance2 {
      get { return traderBalance2_; }
      set {
        traderBalance2_ = value;
      }
    }

    /// <summary>Field number for the "full_position_margin" field.</summary>
    public const int FullPositionMarginFieldNumber = 298;
    private global::DigitexWire.Decimal fullPositionMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FullPositionMargin {
      get { return fullPositionMargin_; }
      set {
        fullPositionMargin_ = value;
      }
    }

    /// <summary>Field number for the "full_buy_order_margin" field.</summary>
    public const int FullBuyOrderMarginFieldNumber = 299;
    private global::DigitexWire.Decimal fullBuyOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FullBuyOrderMargin {
      get { return fullBuyOrderMargin_; }
      set {
        fullBuyOrderMargin_ = value;
      }
    }

    /// <summary>Field number for the "full_sell_order_margin" field.</summary>
    public const int FullSellOrderMarginFieldNumber = 300;
    private global::DigitexWire.Decimal fullSellOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FullSellOrderMargin {
      get { return fullSellOrderMargin_; }
      set {
        fullSellOrderMargin_ = value;
      }
    }

    /// <summary>Field number for the "trades" field.</summary>
    public const int TradesFieldNumber = 46;
    private static readonly pb::FieldCodec<global::DigitexWire.TradeMessage> _repeated_trades_codec
        = pb::FieldCodec.ForMessage(370, global::DigitexWire.TradeMessage.Parser);
    private readonly pbc::RepeatedField<global::DigitexWire.TradeMessage> trades_ = new pbc::RepeatedField<global::DigitexWire.TradeMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DigitexWire.TradeMessage> Trades {
      get { return trades_; }
    }

    /// <summary>Field number for the "raw_trades" field.</summary>
    public const int RawTradesFieldNumber = 82;
    private static readonly pb::FieldCodec<global::DigitexWire.TradeMessage> _repeated_rawTrades_codec
        = pb::FieldCodec.ForMessage(658, global::DigitexWire.TradeMessage.Parser);
    private readonly pbc::RepeatedField<global::DigitexWire.TradeMessage> rawTrades_ = new pbc::RepeatedField<global::DigitexWire.TradeMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DigitexWire.TradeMessage> RawTrades {
      get { return rawTrades_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderFilledMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderFilledMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (NewClientId != other.NewClientId) return false;
      if (OrderType != other.OrderType) return false;
      if (Side != other.Side) return false;
      if (Leverage != other.Leverage) return false;
      if (Duration != other.Duration) return false;
      if (!object.Equals(Price, other.Price)) return false;
      if (!object.Equals(Quantity, other.Quantity)) return false;
      if (!object.Equals(PaidPrice, other.PaidPrice)) return false;
      if (OrigClientId != other.OrigClientId) return false;
      if (OpenTime != other.OpenTime) return false;
      if (!object.Equals(OrigQuantity, other.OrigQuantity)) return false;
      if (!object.Equals(Volume, other.Volume)) return false;
      if (!object.Equals(DroppedQuantity, other.DroppedQuantity)) return false;
      if (OldOrderId != other.OldOrderId) return false;
      if (OrigOrderId != other.OrigOrderId) return false;
      if (!object.Equals(TraderBalance, other.TraderBalance)) return false;
      if (!object.Equals(OrderMargin, other.OrderMargin)) return false;
      if (!object.Equals(PositionMargin, other.PositionMargin)) return false;
      if (!object.Equals(Upnl, other.Upnl)) return false;
      if (!object.Equals(Pnl, other.Pnl)) return false;
      if (!object.Equals(AccumQuantity, other.AccumQuantity)) return false;
      if (!object.Equals(PositionContracts, other.PositionContracts)) return false;
      if (!object.Equals(PositionVolume, other.PositionVolume)) return false;
      if (!object.Equals(PositionLiquidationVolume, other.PositionLiquidationVolume)) return false;
      if (!object.Equals(PositionBankruptcyVolume, other.PositionBankruptcyVolume)) return false;
      if (PositionType != other.PositionType) return false;
      if (!object.Equals(LastTradePrice, other.LastTradePrice)) return false;
      if (!object.Equals(LastTradeQuantity, other.LastTradeQuantity)) return false;
      if (LastTradeTimestamp != other.LastTradeTimestamp) return false;
      if (!object.Equals(BuyOrderMargin, other.BuyOrderMargin)) return false;
      if (!object.Equals(SellOrderMargin, other.SellOrderMargin)) return false;
      if (!object.Equals(BuyOrderQuantity, other.BuyOrderQuantity)) return false;
      if (!object.Equals(SellOrderQuantity, other.SellOrderQuantity)) return false;
      if (!object.Equals(MarkPrice, other.MarkPrice)) return false;
      if (!object.Equals(TraderBalance2, other.TraderBalance2)) return false;
      if (!object.Equals(FullPositionMargin, other.FullPositionMargin)) return false;
      if (!object.Equals(FullBuyOrderMargin, other.FullBuyOrderMargin)) return false;
      if (!object.Equals(FullSellOrderMargin, other.FullSellOrderMargin)) return false;
      if(!trades_.Equals(other.trades_)) return false;
      if(!rawTrades_.Equals(other.rawTrades_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != global::DigitexWire.OrderStatus.StatusUndefined) hash ^= Status.GetHashCode();
      if (NewClientId.Length != 0) hash ^= NewClientId.GetHashCode();
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) hash ^= OrderType.GetHashCode();
      if (Side != global::DigitexWire.OrderSide.SideUndefined) hash ^= Side.GetHashCode();
      if (Leverage != 0) hash ^= Leverage.GetHashCode();
      if (Duration != global::DigitexWire.OrderDuration.DurationUndefined) hash ^= Duration.GetHashCode();
      if (price_ != null) hash ^= Price.GetHashCode();
      if (quantity_ != null) hash ^= Quantity.GetHashCode();
      if (paidPrice_ != null) hash ^= PaidPrice.GetHashCode();
      if (OrigClientId.Length != 0) hash ^= OrigClientId.GetHashCode();
      if (OpenTime != 0L) hash ^= OpenTime.GetHashCode();
      if (origQuantity_ != null) hash ^= OrigQuantity.GetHashCode();
      if (volume_ != null) hash ^= Volume.GetHashCode();
      if (droppedQuantity_ != null) hash ^= DroppedQuantity.GetHashCode();
      if (OldOrderId.Length != 0) hash ^= OldOrderId.GetHashCode();
      if (OrigOrderId.Length != 0) hash ^= OrigOrderId.GetHashCode();
      if (traderBalance_ != null) hash ^= TraderBalance.GetHashCode();
      if (orderMargin_ != null) hash ^= OrderMargin.GetHashCode();
      if (positionMargin_ != null) hash ^= PositionMargin.GetHashCode();
      if (upnl_ != null) hash ^= Upnl.GetHashCode();
      if (pnl_ != null) hash ^= Pnl.GetHashCode();
      if (accumQuantity_ != null) hash ^= AccumQuantity.GetHashCode();
      if (positionContracts_ != null) hash ^= PositionContracts.GetHashCode();
      if (positionVolume_ != null) hash ^= PositionVolume.GetHashCode();
      if (positionLiquidationVolume_ != null) hash ^= PositionLiquidationVolume.GetHashCode();
      if (positionBankruptcyVolume_ != null) hash ^= PositionBankruptcyVolume.GetHashCode();
      if (PositionType != global::DigitexWire.OrderPosition.Undefined) hash ^= PositionType.GetHashCode();
      if (lastTradePrice_ != null) hash ^= LastTradePrice.GetHashCode();
      if (lastTradeQuantity_ != null) hash ^= LastTradeQuantity.GetHashCode();
      if (LastTradeTimestamp != 0L) hash ^= LastTradeTimestamp.GetHashCode();
      if (buyOrderMargin_ != null) hash ^= BuyOrderMargin.GetHashCode();
      if (sellOrderMargin_ != null) hash ^= SellOrderMargin.GetHashCode();
      if (buyOrderQuantity_ != null) hash ^= BuyOrderQuantity.GetHashCode();
      if (sellOrderQuantity_ != null) hash ^= SellOrderQuantity.GetHashCode();
      if (markPrice_ != null) hash ^= MarkPrice.GetHashCode();
      if (traderBalance2_ != null) hash ^= TraderBalance2.GetHashCode();
      if (fullPositionMargin_ != null) hash ^= FullPositionMargin.GetHashCode();
      if (fullBuyOrderMargin_ != null) hash ^= FullBuyOrderMargin.GetHashCode();
      if (fullSellOrderMargin_ != null) hash ^= FullSellOrderMargin.GetHashCode();
      hash ^= trades_.GetHashCode();
      hash ^= rawTrades_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) OrderType);
      }
      if (Side != global::DigitexWire.OrderSide.SideUndefined) {
        output.WriteRawTag(136, 2);
        output.WriteEnum((int) Side);
      }
      if (Leverage != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(Leverage);
      }
      if (Duration != global::DigitexWire.OrderDuration.DurationUndefined) {
        output.WriteRawTag(152, 2);
        output.WriteEnum((int) Duration);
      }
      if (price_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(Price);
      }
      if (quantity_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Quantity);
      }
      if (Status != global::DigitexWire.OrderStatus.StatusUndefined) {
        output.WriteRawTag(208, 2);
        output.WriteEnum((int) Status);
      }
      if (NewClientId.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteBytes(NewClientId);
      }
      trades_.WriteTo(output, _repeated_trades_codec);
      if (traderBalance_ != null) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(TraderBalance);
      }
      if (markPrice_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(MarkPrice);
      }
      if (paidPrice_ != null) {
        output.WriteRawTag(146, 4);
        output.WriteMessage(PaidPrice);
      }
      if (orderMargin_ != null) {
        output.WriteRawTag(226, 4);
        output.WriteMessage(OrderMargin);
      }
      if (positionMargin_ != null) {
        output.WriteRawTag(242, 4);
        output.WriteMessage(PositionMargin);
      }
      if (upnl_ != null) {
        output.WriteRawTag(250, 4);
        output.WriteMessage(Upnl);
      }
      rawTrades_.WriteTo(output, _repeated_rawTrades_codec);
      if (positionContracts_ != null) {
        output.WriteRawTag(194, 6);
        output.WriteMessage(PositionContracts);
      }
      if (positionVolume_ != null) {
        output.WriteRawTag(202, 6);
        output.WriteMessage(PositionVolume);
      }
      if (positionLiquidationVolume_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(PositionLiquidationVolume);
      }
      if (PositionType != global::DigitexWire.OrderPosition.Undefined) {
        output.WriteRawTag(216, 6);
        output.WriteEnum((int) PositionType);
      }
      if (lastTradePrice_ != null) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(LastTradePrice);
      }
      if (lastTradeQuantity_ != null) {
        output.WriteRawTag(162, 7);
        output.WriteMessage(LastTradeQuantity);
      }
      if (positionBankruptcyVolume_ != null) {
        output.WriteRawTag(170, 7);
        output.WriteMessage(PositionBankruptcyVolume);
      }
      if (buyOrderMargin_ != null) {
        output.WriteRawTag(178, 7);
        output.WriteMessage(BuyOrderMargin);
      }
      if (sellOrderMargin_ != null) {
        output.WriteRawTag(186, 7);
        output.WriteMessage(SellOrderMargin);
      }
      if (droppedQuantity_ != null) {
        output.WriteRawTag(194, 9);
        output.WriteMessage(DroppedQuantity);
      }
      if (OldOrderId.Length != 0) {
        output.WriteRawTag(202, 9);
        output.WriteBytes(OldOrderId);
      }
      if (pnl_ != null) {
        output.WriteRawTag(210, 9);
        output.WriteMessage(Pnl);
      }
      if (accumQuantity_ != null) {
        output.WriteRawTag(170, 11);
        output.WriteMessage(AccumQuantity);
      }
      if (buyOrderQuantity_ != null) {
        output.WriteRawTag(178, 11);
        output.WriteMessage(BuyOrderQuantity);
      }
      if (sellOrderQuantity_ != null) {
        output.WriteRawTag(186, 11);
        output.WriteMessage(SellOrderQuantity);
      }
      if (OrigClientId.Length != 0) {
        output.WriteRawTag(226, 12);
        output.WriteBytes(OrigClientId);
      }
      if (OpenTime != 0L) {
        output.WriteRawTag(232, 12);
        output.WriteInt64(OpenTime);
      }
      if (origQuantity_ != null) {
        output.WriteRawTag(242, 12);
        output.WriteMessage(OrigQuantity);
      }
      if (traderBalance2_ != null) {
        output.WriteRawTag(178, 17);
        output.WriteMessage(TraderBalance2);
      }
      if (volume_ != null) {
        output.WriteRawTag(186, 17);
        output.WriteMessage(Volume);
      }
      if (LastTradeTimestamp != 0L) {
        output.WriteRawTag(192, 18);
        output.WriteInt64(LastTradeTimestamp);
      }
      if (fullPositionMargin_ != null) {
        output.WriteRawTag(210, 18);
        output.WriteMessage(FullPositionMargin);
      }
      if (fullBuyOrderMargin_ != null) {
        output.WriteRawTag(218, 18);
        output.WriteMessage(FullBuyOrderMargin);
      }
      if (fullSellOrderMargin_ != null) {
        output.WriteRawTag(226, 18);
        output.WriteMessage(FullSellOrderMargin);
      }
      if (OrigOrderId.Length != 0) {
        output.WriteRawTag(186, 20);
        output.WriteBytes(OrigOrderId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) OrderType);
      }
      if (Side != global::DigitexWire.OrderSide.SideUndefined) {
        output.WriteRawTag(136, 2);
        output.WriteEnum((int) Side);
      }
      if (Leverage != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(Leverage);
      }
      if (Duration != global::DigitexWire.OrderDuration.DurationUndefined) {
        output.WriteRawTag(152, 2);
        output.WriteEnum((int) Duration);
      }
      if (price_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(Price);
      }
      if (quantity_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Quantity);
      }
      if (Status != global::DigitexWire.OrderStatus.StatusUndefined) {
        output.WriteRawTag(208, 2);
        output.WriteEnum((int) Status);
      }
      if (NewClientId.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteBytes(NewClientId);
      }
      trades_.WriteTo(ref output, _repeated_trades_codec);
      if (traderBalance_ != null) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(TraderBalance);
      }
      if (markPrice_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(MarkPrice);
      }
      if (paidPrice_ != null) {
        output.WriteRawTag(146, 4);
        output.WriteMessage(PaidPrice);
      }
      if (orderMargin_ != null) {
        output.WriteRawTag(226, 4);
        output.WriteMessage(OrderMargin);
      }
      if (positionMargin_ != null) {
        output.WriteRawTag(242, 4);
        output.WriteMessage(PositionMargin);
      }
      if (upnl_ != null) {
        output.WriteRawTag(250, 4);
        output.WriteMessage(Upnl);
      }
      rawTrades_.WriteTo(ref output, _repeated_rawTrades_codec);
      if (positionContracts_ != null) {
        output.WriteRawTag(194, 6);
        output.WriteMessage(PositionContracts);
      }
      if (positionVolume_ != null) {
        output.WriteRawTag(202, 6);
        output.WriteMessage(PositionVolume);
      }
      if (positionLiquidationVolume_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(PositionLiquidationVolume);
      }
      if (PositionType != global::DigitexWire.OrderPosition.Undefined) {
        output.WriteRawTag(216, 6);
        output.WriteEnum((int) PositionType);
      }
      if (lastTradePrice_ != null) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(LastTradePrice);
      }
      if (lastTradeQuantity_ != null) {
        output.WriteRawTag(162, 7);
        output.WriteMessage(LastTradeQuantity);
      }
      if (positionBankruptcyVolume_ != null) {
        output.WriteRawTag(170, 7);
        output.WriteMessage(PositionBankruptcyVolume);
      }
      if (buyOrderMargin_ != null) {
        output.WriteRawTag(178, 7);
        output.WriteMessage(BuyOrderMargin);
      }
      if (sellOrderMargin_ != null) {
        output.WriteRawTag(186, 7);
        output.WriteMessage(SellOrderMargin);
      }
      if (droppedQuantity_ != null) {
        output.WriteRawTag(194, 9);
        output.WriteMessage(DroppedQuantity);
      }
      if (OldOrderId.Length != 0) {
        output.WriteRawTag(202, 9);
        output.WriteBytes(OldOrderId);
      }
      if (pnl_ != null) {
        output.WriteRawTag(210, 9);
        output.WriteMessage(Pnl);
      }
      if (accumQuantity_ != null) {
        output.WriteRawTag(170, 11);
        output.WriteMessage(AccumQuantity);
      }
      if (buyOrderQuantity_ != null) {
        output.WriteRawTag(178, 11);
        output.WriteMessage(BuyOrderQuantity);
      }
      if (sellOrderQuantity_ != null) {
        output.WriteRawTag(186, 11);
        output.WriteMessage(SellOrderQuantity);
      }
      if (OrigClientId.Length != 0) {
        output.WriteRawTag(226, 12);
        output.WriteBytes(OrigClientId);
      }
      if (OpenTime != 0L) {
        output.WriteRawTag(232, 12);
        output.WriteInt64(OpenTime);
      }
      if (origQuantity_ != null) {
        output.WriteRawTag(242, 12);
        output.WriteMessage(OrigQuantity);
      }
      if (traderBalance2_ != null) {
        output.WriteRawTag(178, 17);
        output.WriteMessage(TraderBalance2);
      }
      if (volume_ != null) {
        output.WriteRawTag(186, 17);
        output.WriteMessage(Volume);
      }
      if (LastTradeTimestamp != 0L) {
        output.WriteRawTag(192, 18);
        output.WriteInt64(LastTradeTimestamp);
      }
      if (fullPositionMargin_ != null) {
        output.WriteRawTag(210, 18);
        output.WriteMessage(FullPositionMargin);
      }
      if (fullBuyOrderMargin_ != null) {
        output.WriteRawTag(218, 18);
        output.WriteMessage(FullBuyOrderMargin);
      }
      if (fullSellOrderMargin_ != null) {
        output.WriteRawTag(226, 18);
        output.WriteMessage(FullSellOrderMargin);
      }
      if (OrigOrderId.Length != 0) {
        output.WriteRawTag(186, 20);
        output.WriteBytes(OrigOrderId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != global::DigitexWire.OrderStatus.StatusUndefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (NewClientId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(NewClientId);
      }
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OrderType);
      }
      if (Side != global::DigitexWire.OrderSide.SideUndefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (Leverage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Leverage);
      }
      if (Duration != global::DigitexWire.OrderDuration.DurationUndefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Duration);
      }
      if (price_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Price);
      }
      if (quantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Quantity);
      }
      if (paidPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PaidPrice);
      }
      if (OrigClientId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(OrigClientId);
      }
      if (OpenTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(OpenTime);
      }
      if (origQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrigQuantity);
      }
      if (volume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Volume);
      }
      if (droppedQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DroppedQuantity);
      }
      if (OldOrderId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(OldOrderId);
      }
      if (OrigOrderId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(OrigOrderId);
      }
      if (traderBalance_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TraderBalance);
      }
      if (orderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderMargin);
      }
      if (positionMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionMargin);
      }
      if (upnl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Upnl);
      }
      if (pnl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Pnl);
      }
      if (accumQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AccumQuantity);
      }
      if (positionContracts_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionContracts);
      }
      if (positionVolume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionVolume);
      }
      if (positionLiquidationVolume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionLiquidationVolume);
      }
      if (positionBankruptcyVolume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionBankruptcyVolume);
      }
      if (PositionType != global::DigitexWire.OrderPosition.Undefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PositionType);
      }
      if (lastTradePrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastTradePrice);
      }
      if (lastTradeQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastTradeQuantity);
      }
      if (LastTradeTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastTradeTimestamp);
      }
      if (buyOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BuyOrderMargin);
      }
      if (sellOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SellOrderMargin);
      }
      if (buyOrderQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BuyOrderQuantity);
      }
      if (sellOrderQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SellOrderQuantity);
      }
      if (markPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MarkPrice);
      }
      if (traderBalance2_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TraderBalance2);
      }
      if (fullPositionMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FullPositionMargin);
      }
      if (fullBuyOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FullBuyOrderMargin);
      }
      if (fullSellOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FullSellOrderMargin);
      }
      size += trades_.CalculateSize(_repeated_trades_codec);
      size += rawTrades_.CalculateSize(_repeated_rawTrades_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderFilledMessage other) {
      if (other == null) {
        return;
      }
      if (other.Status != global::DigitexWire.OrderStatus.StatusUndefined) {
        Status = other.Status;
      }
      if (other.NewClientId.Length != 0) {
        NewClientId = other.NewClientId;
      }
      if (other.OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        OrderType = other.OrderType;
      }
      if (other.Side != global::DigitexWire.OrderSide.SideUndefined) {
        Side = other.Side;
      }
      if (other.Leverage != 0) {
        Leverage = other.Leverage;
      }
      if (other.Duration != global::DigitexWire.OrderDuration.DurationUndefined) {
        Duration = other.Duration;
      }
      if (other.price_ != null) {
        if (price_ == null) {
          Price = new global::DigitexWire.Decimal();
        }
        Price.MergeFrom(other.Price);
      }
      if (other.quantity_ != null) {
        if (quantity_ == null) {
          Quantity = new global::DigitexWire.Decimal();
        }
        Quantity.MergeFrom(other.Quantity);
      }
      if (other.paidPrice_ != null) {
        if (paidPrice_ == null) {
          PaidPrice = new global::DigitexWire.Decimal();
        }
        PaidPrice.MergeFrom(other.PaidPrice);
      }
      if (other.OrigClientId.Length != 0) {
        OrigClientId = other.OrigClientId;
      }
      if (other.OpenTime != 0L) {
        OpenTime = other.OpenTime;
      }
      if (other.origQuantity_ != null) {
        if (origQuantity_ == null) {
          OrigQuantity = new global::DigitexWire.Decimal();
        }
        OrigQuantity.MergeFrom(other.OrigQuantity);
      }
      if (other.volume_ != null) {
        if (volume_ == null) {
          Volume = new global::DigitexWire.Decimal();
        }
        Volume.MergeFrom(other.Volume);
      }
      if (other.droppedQuantity_ != null) {
        if (droppedQuantity_ == null) {
          DroppedQuantity = new global::DigitexWire.Decimal();
        }
        DroppedQuantity.MergeFrom(other.DroppedQuantity);
      }
      if (other.OldOrderId.Length != 0) {
        OldOrderId = other.OldOrderId;
      }
      if (other.OrigOrderId.Length != 0) {
        OrigOrderId = other.OrigOrderId;
      }
      if (other.traderBalance_ != null) {
        if (traderBalance_ == null) {
          TraderBalance = new global::DigitexWire.Decimal();
        }
        TraderBalance.MergeFrom(other.TraderBalance);
      }
      if (other.orderMargin_ != null) {
        if (orderMargin_ == null) {
          OrderMargin = new global::DigitexWire.Decimal();
        }
        OrderMargin.MergeFrom(other.OrderMargin);
      }
      if (other.positionMargin_ != null) {
        if (positionMargin_ == null) {
          PositionMargin = new global::DigitexWire.Decimal();
        }
        PositionMargin.MergeFrom(other.PositionMargin);
      }
      if (other.upnl_ != null) {
        if (upnl_ == null) {
          Upnl = new global::DigitexWire.Decimal();
        }
        Upnl.MergeFrom(other.Upnl);
      }
      if (other.pnl_ != null) {
        if (pnl_ == null) {
          Pnl = new global::DigitexWire.Decimal();
        }
        Pnl.MergeFrom(other.Pnl);
      }
      if (other.accumQuantity_ != null) {
        if (accumQuantity_ == null) {
          AccumQuantity = new global::DigitexWire.Decimal();
        }
        AccumQuantity.MergeFrom(other.AccumQuantity);
      }
      if (other.positionContracts_ != null) {
        if (positionContracts_ == null) {
          PositionContracts = new global::DigitexWire.Decimal();
        }
        PositionContracts.MergeFrom(other.PositionContracts);
      }
      if (other.positionVolume_ != null) {
        if (positionVolume_ == null) {
          PositionVolume = new global::DigitexWire.Decimal();
        }
        PositionVolume.MergeFrom(other.PositionVolume);
      }
      if (other.positionLiquidationVolume_ != null) {
        if (positionLiquidationVolume_ == null) {
          PositionLiquidationVolume = new global::DigitexWire.Decimal();
        }
        PositionLiquidationVolume.MergeFrom(other.PositionLiquidationVolume);
      }
      if (other.positionBankruptcyVolume_ != null) {
        if (positionBankruptcyVolume_ == null) {
          PositionBankruptcyVolume = new global::DigitexWire.Decimal();
        }
        PositionBankruptcyVolume.MergeFrom(other.PositionBankruptcyVolume);
      }
      if (other.PositionType != global::DigitexWire.OrderPosition.Undefined) {
        PositionType = other.PositionType;
      }
      if (other.lastTradePrice_ != null) {
        if (lastTradePrice_ == null) {
          LastTradePrice = new global::DigitexWire.Decimal();
        }
        LastTradePrice.MergeFrom(other.LastTradePrice);
      }
      if (other.lastTradeQuantity_ != null) {
        if (lastTradeQuantity_ == null) {
          LastTradeQuantity = new global::DigitexWire.Decimal();
        }
        LastTradeQuantity.MergeFrom(other.LastTradeQuantity);
      }
      if (other.LastTradeTimestamp != 0L) {
        LastTradeTimestamp = other.LastTradeTimestamp;
      }
      if (other.buyOrderMargin_ != null) {
        if (buyOrderMargin_ == null) {
          BuyOrderMargin = new global::DigitexWire.Decimal();
        }
        BuyOrderMargin.MergeFrom(other.BuyOrderMargin);
      }
      if (other.sellOrderMargin_ != null) {
        if (sellOrderMargin_ == null) {
          SellOrderMargin = new global::DigitexWire.Decimal();
        }
        SellOrderMargin.MergeFrom(other.SellOrderMargin);
      }
      if (other.buyOrderQuantity_ != null) {
        if (buyOrderQuantity_ == null) {
          BuyOrderQuantity = new global::DigitexWire.Decimal();
        }
        BuyOrderQuantity.MergeFrom(other.BuyOrderQuantity);
      }
      if (other.sellOrderQuantity_ != null) {
        if (sellOrderQuantity_ == null) {
          SellOrderQuantity = new global::DigitexWire.Decimal();
        }
        SellOrderQuantity.MergeFrom(other.SellOrderQuantity);
      }
      if (other.markPrice_ != null) {
        if (markPrice_ == null) {
          MarkPrice = new global::DigitexWire.Decimal();
        }
        MarkPrice.MergeFrom(other.MarkPrice);
      }
      if (other.traderBalance2_ != null) {
        if (traderBalance2_ == null) {
          TraderBalance2 = new global::DigitexWire.Decimal();
        }
        TraderBalance2.MergeFrom(other.TraderBalance2);
      }
      if (other.fullPositionMargin_ != null) {
        if (fullPositionMargin_ == null) {
          FullPositionMargin = new global::DigitexWire.Decimal();
        }
        FullPositionMargin.MergeFrom(other.FullPositionMargin);
      }
      if (other.fullBuyOrderMargin_ != null) {
        if (fullBuyOrderMargin_ == null) {
          FullBuyOrderMargin = new global::DigitexWire.Decimal();
        }
        FullBuyOrderMargin.MergeFrom(other.FullBuyOrderMargin);
      }
      if (other.fullSellOrderMargin_ != null) {
        if (fullSellOrderMargin_ == null) {
          FullSellOrderMargin = new global::DigitexWire.Decimal();
        }
        FullSellOrderMargin.MergeFrom(other.FullSellOrderMargin);
      }
      trades_.Add(other.trades_);
      rawTrades_.Add(other.rawTrades_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 256: {
            OrderType = (global::DigitexWire.OrderType) input.ReadEnum();
            break;
          }
          case 264: {
            Side = (global::DigitexWire.OrderSide) input.ReadEnum();
            break;
          }
          case 272: {
            Leverage = input.ReadUInt32();
            break;
          }
          case 280: {
            Duration = (global::DigitexWire.OrderDuration) input.ReadEnum();
            break;
          }
          case 306: {
            if (price_ == null) {
              Price = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Price);
            break;
          }
          case 314: {
            if (quantity_ == null) {
              Quantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Quantity);
            break;
          }
          case 336: {
            Status = (global::DigitexWire.OrderStatus) input.ReadEnum();
            break;
          }
          case 354: {
            NewClientId = input.ReadBytes();
            break;
          }
          case 370: {
            trades_.AddEntriesFrom(input, _repeated_trades_codec);
            break;
          }
          case 410: {
            if (traderBalance_ == null) {
              TraderBalance = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TraderBalance);
            break;
          }
          case 418: {
            if (markPrice_ == null) {
              MarkPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(MarkPrice);
            break;
          }
          case 530: {
            if (paidPrice_ == null) {
              PaidPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PaidPrice);
            break;
          }
          case 610: {
            if (orderMargin_ == null) {
              OrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OrderMargin);
            break;
          }
          case 626: {
            if (positionMargin_ == null) {
              PositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionMargin);
            break;
          }
          case 634: {
            if (upnl_ == null) {
              Upnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Upnl);
            break;
          }
          case 658: {
            rawTrades_.AddEntriesFrom(input, _repeated_rawTrades_codec);
            break;
          }
          case 834: {
            if (positionContracts_ == null) {
              PositionContracts = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionContracts);
            break;
          }
          case 842: {
            if (positionVolume_ == null) {
              PositionVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionVolume);
            break;
          }
          case 850: {
            if (positionLiquidationVolume_ == null) {
              PositionLiquidationVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionLiquidationVolume);
            break;
          }
          case 856: {
            PositionType = (global::DigitexWire.OrderPosition) input.ReadEnum();
            break;
          }
          case 906: {
            if (lastTradePrice_ == null) {
              LastTradePrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradePrice);
            break;
          }
          case 930: {
            if (lastTradeQuantity_ == null) {
              LastTradeQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradeQuantity);
            break;
          }
          case 938: {
            if (positionBankruptcyVolume_ == null) {
              PositionBankruptcyVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionBankruptcyVolume);
            break;
          }
          case 946: {
            if (buyOrderMargin_ == null) {
              BuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderMargin);
            break;
          }
          case 954: {
            if (sellOrderMargin_ == null) {
              SellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderMargin);
            break;
          }
          case 1218: {
            if (droppedQuantity_ == null) {
              DroppedQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(DroppedQuantity);
            break;
          }
          case 1226: {
            OldOrderId = input.ReadBytes();
            break;
          }
          case 1234: {
            if (pnl_ == null) {
              Pnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Pnl);
            break;
          }
          case 1450: {
            if (accumQuantity_ == null) {
              AccumQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(AccumQuantity);
            break;
          }
          case 1458: {
            if (buyOrderQuantity_ == null) {
              BuyOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderQuantity);
            break;
          }
          case 1466: {
            if (sellOrderQuantity_ == null) {
              SellOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderQuantity);
            break;
          }
          case 1634: {
            OrigClientId = input.ReadBytes();
            break;
          }
          case 1640: {
            OpenTime = input.ReadInt64();
            break;
          }
          case 1650: {
            if (origQuantity_ == null) {
              OrigQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OrigQuantity);
            break;
          }
          case 2226: {
            if (traderBalance2_ == null) {
              TraderBalance2 = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TraderBalance2);
            break;
          }
          case 2234: {
            if (volume_ == null) {
              Volume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Volume);
            break;
          }
          case 2368: {
            LastTradeTimestamp = input.ReadInt64();
            break;
          }
          case 2386: {
            if (fullPositionMargin_ == null) {
              FullPositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullPositionMargin);
            break;
          }
          case 2394: {
            if (fullBuyOrderMargin_ == null) {
              FullBuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullBuyOrderMargin);
            break;
          }
          case 2402: {
            if (fullSellOrderMargin_ == null) {
              FullSellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullSellOrderMargin);
            break;
          }
          case 2618: {
            OrigOrderId = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 256: {
            OrderType = (global::DigitexWire.OrderType) input.ReadEnum();
            break;
          }
          case 264: {
            Side = (global::DigitexWire.OrderSide) input.ReadEnum();
            break;
          }
          case 272: {
            Leverage = input.ReadUInt32();
            break;
          }
          case 280: {
            Duration = (global::DigitexWire.OrderDuration) input.ReadEnum();
            break;
          }
          case 306: {
            if (price_ == null) {
              Price = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Price);
            break;
          }
          case 314: {
            if (quantity_ == null) {
              Quantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Quantity);
            break;
          }
          case 336: {
            Status = (global::DigitexWire.OrderStatus) input.ReadEnum();
            break;
          }
          case 354: {
            NewClientId = input.ReadBytes();
            break;
          }
          case 370: {
            trades_.AddEntriesFrom(ref input, _repeated_trades_codec);
            break;
          }
          case 410: {
            if (traderBalance_ == null) {
              TraderBalance = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TraderBalance);
            break;
          }
          case 418: {
            if (markPrice_ == null) {
              MarkPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(MarkPrice);
            break;
          }
          case 530: {
            if (paidPrice_ == null) {
              PaidPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PaidPrice);
            break;
          }
          case 610: {
            if (orderMargin_ == null) {
              OrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OrderMargin);
            break;
          }
          case 626: {
            if (positionMargin_ == null) {
              PositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionMargin);
            break;
          }
          case 634: {
            if (upnl_ == null) {
              Upnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Upnl);
            break;
          }
          case 658: {
            rawTrades_.AddEntriesFrom(ref input, _repeated_rawTrades_codec);
            break;
          }
          case 834: {
            if (positionContracts_ == null) {
              PositionContracts = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionContracts);
            break;
          }
          case 842: {
            if (positionVolume_ == null) {
              PositionVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionVolume);
            break;
          }
          case 850: {
            if (positionLiquidationVolume_ == null) {
              PositionLiquidationVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionLiquidationVolume);
            break;
          }
          case 856: {
            PositionType = (global::DigitexWire.OrderPosition) input.ReadEnum();
            break;
          }
          case 906: {
            if (lastTradePrice_ == null) {
              LastTradePrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradePrice);
            break;
          }
          case 930: {
            if (lastTradeQuantity_ == null) {
              LastTradeQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradeQuantity);
            break;
          }
          case 938: {
            if (positionBankruptcyVolume_ == null) {
              PositionBankruptcyVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionBankruptcyVolume);
            break;
          }
          case 946: {
            if (buyOrderMargin_ == null) {
              BuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderMargin);
            break;
          }
          case 954: {
            if (sellOrderMargin_ == null) {
              SellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderMargin);
            break;
          }
          case 1218: {
            if (droppedQuantity_ == null) {
              DroppedQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(DroppedQuantity);
            break;
          }
          case 1226: {
            OldOrderId = input.ReadBytes();
            break;
          }
          case 1234: {
            if (pnl_ == null) {
              Pnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Pnl);
            break;
          }
          case 1450: {
            if (accumQuantity_ == null) {
              AccumQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(AccumQuantity);
            break;
          }
          case 1458: {
            if (buyOrderQuantity_ == null) {
              BuyOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderQuantity);
            break;
          }
          case 1466: {
            if (sellOrderQuantity_ == null) {
              SellOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderQuantity);
            break;
          }
          case 1634: {
            OrigClientId = input.ReadBytes();
            break;
          }
          case 1640: {
            OpenTime = input.ReadInt64();
            break;
          }
          case 1650: {
            if (origQuantity_ == null) {
              OrigQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OrigQuantity);
            break;
          }
          case 2226: {
            if (traderBalance2_ == null) {
              TraderBalance2 = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TraderBalance2);
            break;
          }
          case 2234: {
            if (volume_ == null) {
              Volume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Volume);
            break;
          }
          case 2368: {
            LastTradeTimestamp = input.ReadInt64();
            break;
          }
          case 2386: {
            if (fullPositionMargin_ == null) {
              FullPositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullPositionMargin);
            break;
          }
          case 2394: {
            if (fullBuyOrderMargin_ == null) {
              FullBuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullBuyOrderMargin);
            break;
          }
          case 2402: {
            if (fullSellOrderMargin_ == null) {
              FullSellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullSellOrderMargin);
            break;
          }
          case 2618: {
            OrigOrderId = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ExchangeRateUpdateMessage : pb::IMessage<ExchangeRateUpdateMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExchangeRateUpdateMessage> _parser = new pb::MessageParser<ExchangeRateUpdateMessage>(() => new ExchangeRateUpdateMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExchangeRateUpdateMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeRateUpdateMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeRateUpdateMessage(ExchangeRateUpdateMessage other) : this() {
      currencyPairId_ = other.currencyPairId_;
      volume_ = other.volume_ != null ? other.volume_.Clone() : null;
      quantity_ = other.quantity_ != null ? other.quantity_.Clone() : null;
      unreliable_ = other.unreliable_;
      sourceCount_ = other.sourceCount_;
      priceUpdaterId_ = other.priceUpdaterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeRateUpdateMessage Clone() {
      return new ExchangeRateUpdateMessage(this);
    }

    /// <summary>Field number for the "currency_pair_id" field.</summary>
    public const int CurrencyPairIdFieldNumber = 47;
    private uint currencyPairId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrencyPairId {
      get { return currencyPairId_; }
      set {
        currencyPairId_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 48;
    private global::DigitexWire.Decimal volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 39;
    private global::DigitexWire.Decimal quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "unreliable" field.</summary>
    public const int UnreliableFieldNumber = 209;
    private int unreliable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Unreliable {
      get { return unreliable_; }
      set {
        unreliable_ = value;
      }
    }

    /// <summary>Field number for the "source_count" field.</summary>
    public const int SourceCountFieldNumber = 301;
    private int sourceCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceCount {
      get { return sourceCount_; }
      set {
        sourceCount_ = value;
      }
    }

    /// <summary>Field number for the "price_updater_id" field.</summary>
    public const int PriceUpdaterIdFieldNumber = 302;
    private pb::ByteString priceUpdaterId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PriceUpdaterId {
      get { return priceUpdaterId_; }
      set {
        priceUpdaterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExchangeRateUpdateMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExchangeRateUpdateMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrencyPairId != other.CurrencyPairId) return false;
      if (!object.Equals(Volume, other.Volume)) return false;
      if (!object.Equals(Quantity, other.Quantity)) return false;
      if (Unreliable != other.Unreliable) return false;
      if (SourceCount != other.SourceCount) return false;
      if (PriceUpdaterId != other.PriceUpdaterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrencyPairId != 0) hash ^= CurrencyPairId.GetHashCode();
      if (volume_ != null) hash ^= Volume.GetHashCode();
      if (quantity_ != null) hash ^= Quantity.GetHashCode();
      if (Unreliable != 0) hash ^= Unreliable.GetHashCode();
      if (SourceCount != 0) hash ^= SourceCount.GetHashCode();
      if (PriceUpdaterId.Length != 0) hash ^= PriceUpdaterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (quantity_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Quantity);
      }
      if (CurrencyPairId != 0) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(CurrencyPairId);
      }
      if (volume_ != null) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(Volume);
      }
      if (Unreliable != 0) {
        output.WriteRawTag(136, 13);
        output.WriteInt32(Unreliable);
      }
      if (SourceCount != 0) {
        output.WriteRawTag(232, 18);
        output.WriteInt32(SourceCount);
      }
      if (PriceUpdaterId.Length != 0) {
        output.WriteRawTag(242, 18);
        output.WriteBytes(PriceUpdaterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (quantity_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Quantity);
      }
      if (CurrencyPairId != 0) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(CurrencyPairId);
      }
      if (volume_ != null) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(Volume);
      }
      if (Unreliable != 0) {
        output.WriteRawTag(136, 13);
        output.WriteInt32(Unreliable);
      }
      if (SourceCount != 0) {
        output.WriteRawTag(232, 18);
        output.WriteInt32(SourceCount);
      }
      if (PriceUpdaterId.Length != 0) {
        output.WriteRawTag(242, 18);
        output.WriteBytes(PriceUpdaterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrencyPairId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CurrencyPairId);
      }
      if (volume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Volume);
      }
      if (quantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Quantity);
      }
      if (Unreliable != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Unreliable);
      }
      if (SourceCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SourceCount);
      }
      if (PriceUpdaterId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(PriceUpdaterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExchangeRateUpdateMessage other) {
      if (other == null) {
        return;
      }
      if (other.CurrencyPairId != 0) {
        CurrencyPairId = other.CurrencyPairId;
      }
      if (other.volume_ != null) {
        if (volume_ == null) {
          Volume = new global::DigitexWire.Decimal();
        }
        Volume.MergeFrom(other.Volume);
      }
      if (other.quantity_ != null) {
        if (quantity_ == null) {
          Quantity = new global::DigitexWire.Decimal();
        }
        Quantity.MergeFrom(other.Quantity);
      }
      if (other.Unreliable != 0) {
        Unreliable = other.Unreliable;
      }
      if (other.SourceCount != 0) {
        SourceCount = other.SourceCount;
      }
      if (other.PriceUpdaterId.Length != 0) {
        PriceUpdaterId = other.PriceUpdaterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 314: {
            if (quantity_ == null) {
              Quantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Quantity);
            break;
          }
          case 376: {
            CurrencyPairId = input.ReadUInt32();
            break;
          }
          case 386: {
            if (volume_ == null) {
              Volume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Volume);
            break;
          }
          case 1672: {
            Unreliable = input.ReadInt32();
            break;
          }
          case 2408: {
            SourceCount = input.ReadInt32();
            break;
          }
          case 2418: {
            PriceUpdaterId = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 314: {
            if (quantity_ == null) {
              Quantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Quantity);
            break;
          }
          case 376: {
            CurrencyPairId = input.ReadUInt32();
            break;
          }
          case 386: {
            if (volume_ == null) {
              Volume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Volume);
            break;
          }
          case 1672: {
            Unreliable = input.ReadInt32();
            break;
          }
          case 2408: {
            SourceCount = input.ReadInt32();
            break;
          }
          case 2418: {
            PriceUpdaterId = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ExchangeRateMessage : pb::IMessage<ExchangeRateMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExchangeRateMessage> _parser = new pb::MessageParser<ExchangeRateMessage>(() => new ExchangeRateMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExchangeRateMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeRateMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeRateMessage(ExchangeRateMessage other) : this() {
      currencyPairId_ = other.currencyPairId_;
      markPrice_ = other.markPrice_ != null ? other.markPrice_.Clone() : null;
      unreliable_ = other.unreliable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeRateMessage Clone() {
      return new ExchangeRateMessage(this);
    }

    /// <summary>Field number for the "currency_pair_id" field.</summary>
    public const int CurrencyPairIdFieldNumber = 47;
    private uint currencyPairId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrencyPairId {
      get { return currencyPairId_; }
      set {
        currencyPairId_ = value;
      }
    }

    /// <summary>Field number for the "mark_price" field.</summary>
    public const int MarkPriceFieldNumber = 52;
    private global::DigitexWire.Decimal markPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal MarkPrice {
      get { return markPrice_; }
      set {
        markPrice_ = value;
      }
    }

    /// <summary>Field number for the "unreliable" field.</summary>
    public const int UnreliableFieldNumber = 209;
    private int unreliable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Unreliable {
      get { return unreliable_; }
      set {
        unreliable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExchangeRateMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExchangeRateMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrencyPairId != other.CurrencyPairId) return false;
      if (!object.Equals(MarkPrice, other.MarkPrice)) return false;
      if (Unreliable != other.Unreliable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrencyPairId != 0) hash ^= CurrencyPairId.GetHashCode();
      if (markPrice_ != null) hash ^= MarkPrice.GetHashCode();
      if (Unreliable != 0) hash ^= Unreliable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CurrencyPairId != 0) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(CurrencyPairId);
      }
      if (markPrice_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(MarkPrice);
      }
      if (Unreliable != 0) {
        output.WriteRawTag(136, 13);
        output.WriteInt32(Unreliable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CurrencyPairId != 0) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(CurrencyPairId);
      }
      if (markPrice_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(MarkPrice);
      }
      if (Unreliable != 0) {
        output.WriteRawTag(136, 13);
        output.WriteInt32(Unreliable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrencyPairId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CurrencyPairId);
      }
      if (markPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MarkPrice);
      }
      if (Unreliable != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Unreliable);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExchangeRateMessage other) {
      if (other == null) {
        return;
      }
      if (other.CurrencyPairId != 0) {
        CurrencyPairId = other.CurrencyPairId;
      }
      if (other.markPrice_ != null) {
        if (markPrice_ == null) {
          MarkPrice = new global::DigitexWire.Decimal();
        }
        MarkPrice.MergeFrom(other.MarkPrice);
      }
      if (other.Unreliable != 0) {
        Unreliable = other.Unreliable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 376: {
            CurrencyPairId = input.ReadUInt32();
            break;
          }
          case 418: {
            if (markPrice_ == null) {
              MarkPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(MarkPrice);
            break;
          }
          case 1672: {
            Unreliable = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 376: {
            CurrencyPairId = input.ReadUInt32();
            break;
          }
          case 418: {
            if (markPrice_ == null) {
              MarkPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(MarkPrice);
            break;
          }
          case 1672: {
            Unreliable = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TraderBalanceMessage : pb::IMessage<TraderBalanceMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TraderBalanceMessage> _parser = new pb::MessageParser<TraderBalanceMessage>(() => new TraderBalanceMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TraderBalanceMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraderBalanceMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraderBalanceMessage(TraderBalanceMessage other) : this() {
      currencyId_ = other.currencyId_;
      traderBalance_ = other.traderBalance_ != null ? other.traderBalance_.Clone() : null;
      orderMargin_ = other.orderMargin_ != null ? other.orderMargin_.Clone() : null;
      positionMargin_ = other.positionMargin_ != null ? other.positionMargin_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraderBalanceMessage Clone() {
      return new TraderBalanceMessage(this);
    }

    /// <summary>Field number for the "currency_id" field.</summary>
    public const int CurrencyIdFieldNumber = 49;
    private uint currencyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrencyId {
      get { return currencyId_; }
      set {
        currencyId_ = value;
      }
    }

    /// <summary>Field number for the "trader_balance" field.</summary>
    public const int TraderBalanceFieldNumber = 51;
    private global::DigitexWire.Decimal traderBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal TraderBalance {
      get { return traderBalance_; }
      set {
        traderBalance_ = value;
      }
    }

    /// <summary>Field number for the "order_margin" field.</summary>
    public const int OrderMarginFieldNumber = 76;
    private global::DigitexWire.Decimal orderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal OrderMargin {
      get { return orderMargin_; }
      set {
        orderMargin_ = value;
      }
    }

    /// <summary>Field number for the "position_margin" field.</summary>
    public const int PositionMarginFieldNumber = 78;
    private global::DigitexWire.Decimal positionMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionMargin {
      get { return positionMargin_; }
      set {
        positionMargin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TraderBalanceMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TraderBalanceMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrencyId != other.CurrencyId) return false;
      if (!object.Equals(TraderBalance, other.TraderBalance)) return false;
      if (!object.Equals(OrderMargin, other.OrderMargin)) return false;
      if (!object.Equals(PositionMargin, other.PositionMargin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrencyId != 0) hash ^= CurrencyId.GetHashCode();
      if (traderBalance_ != null) hash ^= TraderBalance.GetHashCode();
      if (orderMargin_ != null) hash ^= OrderMargin.GetHashCode();
      if (positionMargin_ != null) hash ^= PositionMargin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CurrencyId != 0) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(CurrencyId);
      }
      if (traderBalance_ != null) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(TraderBalance);
      }
      if (orderMargin_ != null) {
        output.WriteRawTag(226, 4);
        output.WriteMessage(OrderMargin);
      }
      if (positionMargin_ != null) {
        output.WriteRawTag(242, 4);
        output.WriteMessage(PositionMargin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CurrencyId != 0) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(CurrencyId);
      }
      if (traderBalance_ != null) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(TraderBalance);
      }
      if (orderMargin_ != null) {
        output.WriteRawTag(226, 4);
        output.WriteMessage(OrderMargin);
      }
      if (positionMargin_ != null) {
        output.WriteRawTag(242, 4);
        output.WriteMessage(PositionMargin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrencyId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CurrencyId);
      }
      if (traderBalance_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TraderBalance);
      }
      if (orderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderMargin);
      }
      if (positionMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionMargin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TraderBalanceMessage other) {
      if (other == null) {
        return;
      }
      if (other.CurrencyId != 0) {
        CurrencyId = other.CurrencyId;
      }
      if (other.traderBalance_ != null) {
        if (traderBalance_ == null) {
          TraderBalance = new global::DigitexWire.Decimal();
        }
        TraderBalance.MergeFrom(other.TraderBalance);
      }
      if (other.orderMargin_ != null) {
        if (orderMargin_ == null) {
          OrderMargin = new global::DigitexWire.Decimal();
        }
        OrderMargin.MergeFrom(other.OrderMargin);
      }
      if (other.positionMargin_ != null) {
        if (positionMargin_ == null) {
          PositionMargin = new global::DigitexWire.Decimal();
        }
        PositionMargin.MergeFrom(other.PositionMargin);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 392: {
            CurrencyId = input.ReadUInt32();
            break;
          }
          case 410: {
            if (traderBalance_ == null) {
              TraderBalance = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TraderBalance);
            break;
          }
          case 610: {
            if (orderMargin_ == null) {
              OrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OrderMargin);
            break;
          }
          case 626: {
            if (positionMargin_ == null) {
              PositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionMargin);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 392: {
            CurrencyId = input.ReadUInt32();
            break;
          }
          case 410: {
            if (traderBalance_ == null) {
              TraderBalance = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TraderBalance);
            break;
          }
          case 610: {
            if (orderMargin_ == null) {
              OrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OrderMargin);
            break;
          }
          case 626: {
            if (positionMargin_ == null) {
              PositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionMargin);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PositionEventMessage : pb::IMessage<PositionEventMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PositionEventMessage> _parser = new pb::MessageParser<PositionEventMessage>(() => new PositionEventMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PositionEventMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionEventMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionEventMessage(PositionEventMessage other) : this() {
      liquidatedTrades_ = other.liquidatedTrades_.Clone();
      terminatedOrders_ = other.terminatedOrders_.Clone();
      orders_ = other.orders_.Clone();
      traderBalance_ = other.traderBalance_ != null ? other.traderBalance_.Clone() : null;
      orderMargin_ = other.orderMargin_ != null ? other.orderMargin_.Clone() : null;
      positionMargin_ = other.positionMargin_ != null ? other.positionMargin_.Clone() : null;
      upnl_ = other.upnl_ != null ? other.upnl_.Clone() : null;
      pnl_ = other.pnl_ != null ? other.pnl_.Clone() : null;
      accumQuantity_ = other.accumQuantity_ != null ? other.accumQuantity_.Clone() : null;
      positionContracts_ = other.positionContracts_ != null ? other.positionContracts_.Clone() : null;
      positionVolume_ = other.positionVolume_ != null ? other.positionVolume_.Clone() : null;
      positionLiquidationVolume_ = other.positionLiquidationVolume_ != null ? other.positionLiquidationVolume_.Clone() : null;
      positionBankruptcyVolume_ = other.positionBankruptcyVolume_ != null ? other.positionBankruptcyVolume_.Clone() : null;
      positionType_ = other.positionType_;
      lastTradePrice_ = other.lastTradePrice_ != null ? other.lastTradePrice_.Clone() : null;
      lastTradeQuantity_ = other.lastTradeQuantity_ != null ? other.lastTradeQuantity_.Clone() : null;
      lastTradeTimestamp_ = other.lastTradeTimestamp_;
      buyOrderMargin_ = other.buyOrderMargin_ != null ? other.buyOrderMargin_.Clone() : null;
      sellOrderMargin_ = other.sellOrderMargin_ != null ? other.sellOrderMargin_.Clone() : null;
      traderBalanceIncrement_ = other.traderBalanceIncrement_ != null ? other.traderBalanceIncrement_.Clone() : null;
      buyOrderQuantity_ = other.buyOrderQuantity_ != null ? other.buyOrderQuantity_.Clone() : null;
      sellOrderQuantity_ = other.sellOrderQuantity_ != null ? other.sellOrderQuantity_.Clone() : null;
      fullPositionMargin_ = other.fullPositionMargin_ != null ? other.fullPositionMargin_.Clone() : null;
      fullBuyOrderMargin_ = other.fullBuyOrderMargin_ != null ? other.fullBuyOrderMargin_.Clone() : null;
      fullSellOrderMargin_ = other.fullSellOrderMargin_ != null ? other.fullSellOrderMargin_.Clone() : null;
      markPrice_ = other.markPrice_ != null ? other.markPrice_.Clone() : null;
      floorMarkPrice_ = other.floorMarkPrice_ != null ? other.floorMarkPrice_.Clone() : null;
      ceilMarkPrice_ = other.ceilMarkPrice_ != null ? other.ceilMarkPrice_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionEventMessage Clone() {
      return new PositionEventMessage(this);
    }

    /// <summary>Field number for the "liquidated_trades" field.</summary>
    public const int LiquidatedTradesFieldNumber = 168;
    private static readonly pb::FieldCodec<global::DigitexWire.TradeMessage> _repeated_liquidatedTrades_codec
        = pb::FieldCodec.ForMessage(1346, global::DigitexWire.TradeMessage.Parser);
    private readonly pbc::RepeatedField<global::DigitexWire.TradeMessage> liquidatedTrades_ = new pbc::RepeatedField<global::DigitexWire.TradeMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DigitexWire.TradeMessage> LiquidatedTrades {
      get { return liquidatedTrades_; }
    }

    /// <summary>Field number for the "terminated_orders" field.</summary>
    public const int TerminatedOrdersFieldNumber = 96;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_terminatedOrders_codec
        = pb::FieldCodec.ForBytes(770);
    private readonly pbc::RepeatedField<pb::ByteString> terminatedOrders_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// DEPRECATED, see orders
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> TerminatedOrders {
      get { return terminatedOrders_; }
    }

    /// <summary>Field number for the "orders" field.</summary>
    public const int OrdersFieldNumber = 70;
    private static readonly pb::FieldCodec<global::DigitexWire.OrderMessage> _repeated_orders_codec
        = pb::FieldCodec.ForMessage(562, global::DigitexWire.OrderMessage.Parser);
    private readonly pbc::RepeatedField<global::DigitexWire.OrderMessage> orders_ = new pbc::RepeatedField<global::DigitexWire.OrderMessage>();
    /// <summary>
    /// liquidated orders
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DigitexWire.OrderMessage> Orders {
      get { return orders_; }
    }

    /// <summary>Field number for the "trader_balance" field.</summary>
    public const int TraderBalanceFieldNumber = 51;
    private global::DigitexWire.Decimal traderBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal TraderBalance {
      get { return traderBalance_; }
      set {
        traderBalance_ = value;
      }
    }

    /// <summary>Field number for the "order_margin" field.</summary>
    public const int OrderMarginFieldNumber = 76;
    private global::DigitexWire.Decimal orderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal OrderMargin {
      get { return orderMargin_; }
      set {
        orderMargin_ = value;
      }
    }

    /// <summary>Field number for the "position_margin" field.</summary>
    public const int PositionMarginFieldNumber = 78;
    private global::DigitexWire.Decimal positionMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionMargin {
      get { return positionMargin_; }
      set {
        positionMargin_ = value;
      }
    }

    /// <summary>Field number for the "upnl" field.</summary>
    public const int UpnlFieldNumber = 79;
    private global::DigitexWire.Decimal upnl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Upnl {
      get { return upnl_; }
      set {
        upnl_ = value;
      }
    }

    /// <summary>Field number for the "pnl" field.</summary>
    public const int PnlFieldNumber = 154;
    private global::DigitexWire.Decimal pnl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Pnl {
      get { return pnl_; }
      set {
        pnl_ = value;
      }
    }

    /// <summary>Field number for the "accum_quantity" field.</summary>
    public const int AccumQuantityFieldNumber = 181;
    private global::DigitexWire.Decimal accumQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal AccumQuantity {
      get { return accumQuantity_; }
      set {
        accumQuantity_ = value;
      }
    }

    /// <summary>Field number for the "position_contracts" field.</summary>
    public const int PositionContractsFieldNumber = 104;
    private global::DigitexWire.Decimal positionContracts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionContracts {
      get { return positionContracts_; }
      set {
        positionContracts_ = value;
      }
    }

    /// <summary>Field number for the "position_volume" field.</summary>
    public const int PositionVolumeFieldNumber = 105;
    private global::DigitexWire.Decimal positionVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionVolume {
      get { return positionVolume_; }
      set {
        positionVolume_ = value;
      }
    }

    /// <summary>Field number for the "position_liquidation_volume" field.</summary>
    public const int PositionLiquidationVolumeFieldNumber = 106;
    private global::DigitexWire.Decimal positionLiquidationVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionLiquidationVolume {
      get { return positionLiquidationVolume_; }
      set {
        positionLiquidationVolume_ = value;
      }
    }

    /// <summary>Field number for the "position_bankruptcy_volume" field.</summary>
    public const int PositionBankruptcyVolumeFieldNumber = 117;
    private global::DigitexWire.Decimal positionBankruptcyVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionBankruptcyVolume {
      get { return positionBankruptcyVolume_; }
      set {
        positionBankruptcyVolume_ = value;
      }
    }

    /// <summary>Field number for the "position_type" field.</summary>
    public const int PositionTypeFieldNumber = 107;
    private global::DigitexWire.OrderPosition positionType_ = global::DigitexWire.OrderPosition.Undefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderPosition PositionType {
      get { return positionType_; }
      set {
        positionType_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_price" field.</summary>
    public const int LastTradePriceFieldNumber = 113;
    private global::DigitexWire.Decimal lastTradePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal LastTradePrice {
      get { return lastTradePrice_; }
      set {
        lastTradePrice_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_quantity" field.</summary>
    public const int LastTradeQuantityFieldNumber = 116;
    private global::DigitexWire.Decimal lastTradeQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal LastTradeQuantity {
      get { return lastTradeQuantity_; }
      set {
        lastTradeQuantity_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_timestamp" field.</summary>
    public const int LastTradeTimestampFieldNumber = 296;
    private long lastTradeTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastTradeTimestamp {
      get { return lastTradeTimestamp_; }
      set {
        lastTradeTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "buy_order_margin" field.</summary>
    public const int BuyOrderMarginFieldNumber = 118;
    private global::DigitexWire.Decimal buyOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal BuyOrderMargin {
      get { return buyOrderMargin_; }
      set {
        buyOrderMargin_ = value;
      }
    }

    /// <summary>Field number for the "sell_order_margin" field.</summary>
    public const int SellOrderMarginFieldNumber = 119;
    private global::DigitexWire.Decimal sellOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal SellOrderMargin {
      get { return sellOrderMargin_; }
      set {
        sellOrderMargin_ = value;
      }
    }

    /// <summary>Field number for the "trader_balance_increment" field.</summary>
    public const int TraderBalanceIncrementFieldNumber = 134;
    private global::DigitexWire.Decimal traderBalanceIncrement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal TraderBalanceIncrement {
      get { return traderBalanceIncrement_; }
      set {
        traderBalanceIncrement_ = value;
      }
    }

    /// <summary>Field number for the "buy_order_quantity" field.</summary>
    public const int BuyOrderQuantityFieldNumber = 182;
    private global::DigitexWire.Decimal buyOrderQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal BuyOrderQuantity {
      get { return buyOrderQuantity_; }
      set {
        buyOrderQuantity_ = value;
      }
    }

    /// <summary>Field number for the "sell_order_quantity" field.</summary>
    public const int SellOrderQuantityFieldNumber = 183;
    private global::DigitexWire.Decimal sellOrderQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal SellOrderQuantity {
      get { return sellOrderQuantity_; }
      set {
        sellOrderQuantity_ = value;
      }
    }

    /// <summary>Field number for the "full_position_margin" field.</summary>
    public const int FullPositionMarginFieldNumber = 298;
    private global::DigitexWire.Decimal fullPositionMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FullPositionMargin {
      get { return fullPositionMargin_; }
      set {
        fullPositionMargin_ = value;
      }
    }

    /// <summary>Field number for the "full_buy_order_margin" field.</summary>
    public const int FullBuyOrderMarginFieldNumber = 299;
    private global::DigitexWire.Decimal fullBuyOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FullBuyOrderMargin {
      get { return fullBuyOrderMargin_; }
      set {
        fullBuyOrderMargin_ = value;
      }
    }

    /// <summary>Field number for the "full_sell_order_margin" field.</summary>
    public const int FullSellOrderMarginFieldNumber = 300;
    private global::DigitexWire.Decimal fullSellOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FullSellOrderMargin {
      get { return fullSellOrderMargin_; }
      set {
        fullSellOrderMargin_ = value;
      }
    }

    /// <summary>Field number for the "mark_price" field.</summary>
    public const int MarkPriceFieldNumber = 52;
    private global::DigitexWire.Decimal markPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal MarkPrice {
      get { return markPrice_; }
      set {
        markPrice_ = value;
      }
    }

    /// <summary>Field number for the "floor_mark_price" field.</summary>
    public const int FloorMarkPriceFieldNumber = 135;
    private global::DigitexWire.Decimal floorMarkPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FloorMarkPrice {
      get { return floorMarkPrice_; }
      set {
        floorMarkPrice_ = value;
      }
    }

    /// <summary>Field number for the "ceil_mark_price" field.</summary>
    public const int CeilMarkPriceFieldNumber = 136;
    private global::DigitexWire.Decimal ceilMarkPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal CeilMarkPrice {
      get { return ceilMarkPrice_; }
      set {
        ceilMarkPrice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PositionEventMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PositionEventMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!liquidatedTrades_.Equals(other.liquidatedTrades_)) return false;
      if(!terminatedOrders_.Equals(other.terminatedOrders_)) return false;
      if(!orders_.Equals(other.orders_)) return false;
      if (!object.Equals(TraderBalance, other.TraderBalance)) return false;
      if (!object.Equals(OrderMargin, other.OrderMargin)) return false;
      if (!object.Equals(PositionMargin, other.PositionMargin)) return false;
      if (!object.Equals(Upnl, other.Upnl)) return false;
      if (!object.Equals(Pnl, other.Pnl)) return false;
      if (!object.Equals(AccumQuantity, other.AccumQuantity)) return false;
      if (!object.Equals(PositionContracts, other.PositionContracts)) return false;
      if (!object.Equals(PositionVolume, other.PositionVolume)) return false;
      if (!object.Equals(PositionLiquidationVolume, other.PositionLiquidationVolume)) return false;
      if (!object.Equals(PositionBankruptcyVolume, other.PositionBankruptcyVolume)) return false;
      if (PositionType != other.PositionType) return false;
      if (!object.Equals(LastTradePrice, other.LastTradePrice)) return false;
      if (!object.Equals(LastTradeQuantity, other.LastTradeQuantity)) return false;
      if (LastTradeTimestamp != other.LastTradeTimestamp) return false;
      if (!object.Equals(BuyOrderMargin, other.BuyOrderMargin)) return false;
      if (!object.Equals(SellOrderMargin, other.SellOrderMargin)) return false;
      if (!object.Equals(TraderBalanceIncrement, other.TraderBalanceIncrement)) return false;
      if (!object.Equals(BuyOrderQuantity, other.BuyOrderQuantity)) return false;
      if (!object.Equals(SellOrderQuantity, other.SellOrderQuantity)) return false;
      if (!object.Equals(FullPositionMargin, other.FullPositionMargin)) return false;
      if (!object.Equals(FullBuyOrderMargin, other.FullBuyOrderMargin)) return false;
      if (!object.Equals(FullSellOrderMargin, other.FullSellOrderMargin)) return false;
      if (!object.Equals(MarkPrice, other.MarkPrice)) return false;
      if (!object.Equals(FloorMarkPrice, other.FloorMarkPrice)) return false;
      if (!object.Equals(CeilMarkPrice, other.CeilMarkPrice)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= liquidatedTrades_.GetHashCode();
      hash ^= terminatedOrders_.GetHashCode();
      hash ^= orders_.GetHashCode();
      if (traderBalance_ != null) hash ^= TraderBalance.GetHashCode();
      if (orderMargin_ != null) hash ^= OrderMargin.GetHashCode();
      if (positionMargin_ != null) hash ^= PositionMargin.GetHashCode();
      if (upnl_ != null) hash ^= Upnl.GetHashCode();
      if (pnl_ != null) hash ^= Pnl.GetHashCode();
      if (accumQuantity_ != null) hash ^= AccumQuantity.GetHashCode();
      if (positionContracts_ != null) hash ^= PositionContracts.GetHashCode();
      if (positionVolume_ != null) hash ^= PositionVolume.GetHashCode();
      if (positionLiquidationVolume_ != null) hash ^= PositionLiquidationVolume.GetHashCode();
      if (positionBankruptcyVolume_ != null) hash ^= PositionBankruptcyVolume.GetHashCode();
      if (PositionType != global::DigitexWire.OrderPosition.Undefined) hash ^= PositionType.GetHashCode();
      if (lastTradePrice_ != null) hash ^= LastTradePrice.GetHashCode();
      if (lastTradeQuantity_ != null) hash ^= LastTradeQuantity.GetHashCode();
      if (LastTradeTimestamp != 0L) hash ^= LastTradeTimestamp.GetHashCode();
      if (buyOrderMargin_ != null) hash ^= BuyOrderMargin.GetHashCode();
      if (sellOrderMargin_ != null) hash ^= SellOrderMargin.GetHashCode();
      if (traderBalanceIncrement_ != null) hash ^= TraderBalanceIncrement.GetHashCode();
      if (buyOrderQuantity_ != null) hash ^= BuyOrderQuantity.GetHashCode();
      if (sellOrderQuantity_ != null) hash ^= SellOrderQuantity.GetHashCode();
      if (fullPositionMargin_ != null) hash ^= FullPositionMargin.GetHashCode();
      if (fullBuyOrderMargin_ != null) hash ^= FullBuyOrderMargin.GetHashCode();
      if (fullSellOrderMargin_ != null) hash ^= FullSellOrderMargin.GetHashCode();
      if (markPrice_ != null) hash ^= MarkPrice.GetHashCode();
      if (floorMarkPrice_ != null) hash ^= FloorMarkPrice.GetHashCode();
      if (ceilMarkPrice_ != null) hash ^= CeilMarkPrice.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (traderBalance_ != null) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(TraderBalance);
      }
      if (markPrice_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(MarkPrice);
      }
      orders_.WriteTo(output, _repeated_orders_codec);
      if (orderMargin_ != null) {
        output.WriteRawTag(226, 4);
        output.WriteMessage(OrderMargin);
      }
      if (positionMargin_ != null) {
        output.WriteRawTag(242, 4);
        output.WriteMessage(PositionMargin);
      }
      if (upnl_ != null) {
        output.WriteRawTag(250, 4);
        output.WriteMessage(Upnl);
      }
      terminatedOrders_.WriteTo(output, _repeated_terminatedOrders_codec);
      if (positionContracts_ != null) {
        output.WriteRawTag(194, 6);
        output.WriteMessage(PositionContracts);
      }
      if (positionVolume_ != null) {
        output.WriteRawTag(202, 6);
        output.WriteMessage(PositionVolume);
      }
      if (positionLiquidationVolume_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(PositionLiquidationVolume);
      }
      if (PositionType != global::DigitexWire.OrderPosition.Undefined) {
        output.WriteRawTag(216, 6);
        output.WriteEnum((int) PositionType);
      }
      if (lastTradePrice_ != null) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(LastTradePrice);
      }
      if (lastTradeQuantity_ != null) {
        output.WriteRawTag(162, 7);
        output.WriteMessage(LastTradeQuantity);
      }
      if (positionBankruptcyVolume_ != null) {
        output.WriteRawTag(170, 7);
        output.WriteMessage(PositionBankruptcyVolume);
      }
      if (buyOrderMargin_ != null) {
        output.WriteRawTag(178, 7);
        output.WriteMessage(BuyOrderMargin);
      }
      if (sellOrderMargin_ != null) {
        output.WriteRawTag(186, 7);
        output.WriteMessage(SellOrderMargin);
      }
      if (traderBalanceIncrement_ != null) {
        output.WriteRawTag(178, 8);
        output.WriteMessage(TraderBalanceIncrement);
      }
      if (floorMarkPrice_ != null) {
        output.WriteRawTag(186, 8);
        output.WriteMessage(FloorMarkPrice);
      }
      if (ceilMarkPrice_ != null) {
        output.WriteRawTag(194, 8);
        output.WriteMessage(CeilMarkPrice);
      }
      if (pnl_ != null) {
        output.WriteRawTag(210, 9);
        output.WriteMessage(Pnl);
      }
      liquidatedTrades_.WriteTo(output, _repeated_liquidatedTrades_codec);
      if (accumQuantity_ != null) {
        output.WriteRawTag(170, 11);
        output.WriteMessage(AccumQuantity);
      }
      if (buyOrderQuantity_ != null) {
        output.WriteRawTag(178, 11);
        output.WriteMessage(BuyOrderQuantity);
      }
      if (sellOrderQuantity_ != null) {
        output.WriteRawTag(186, 11);
        output.WriteMessage(SellOrderQuantity);
      }
      if (LastTradeTimestamp != 0L) {
        output.WriteRawTag(192, 18);
        output.WriteInt64(LastTradeTimestamp);
      }
      if (fullPositionMargin_ != null) {
        output.WriteRawTag(210, 18);
        output.WriteMessage(FullPositionMargin);
      }
      if (fullBuyOrderMargin_ != null) {
        output.WriteRawTag(218, 18);
        output.WriteMessage(FullBuyOrderMargin);
      }
      if (fullSellOrderMargin_ != null) {
        output.WriteRawTag(226, 18);
        output.WriteMessage(FullSellOrderMargin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (traderBalance_ != null) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(TraderBalance);
      }
      if (markPrice_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(MarkPrice);
      }
      orders_.WriteTo(ref output, _repeated_orders_codec);
      if (orderMargin_ != null) {
        output.WriteRawTag(226, 4);
        output.WriteMessage(OrderMargin);
      }
      if (positionMargin_ != null) {
        output.WriteRawTag(242, 4);
        output.WriteMessage(PositionMargin);
      }
      if (upnl_ != null) {
        output.WriteRawTag(250, 4);
        output.WriteMessage(Upnl);
      }
      terminatedOrders_.WriteTo(ref output, _repeated_terminatedOrders_codec);
      if (positionContracts_ != null) {
        output.WriteRawTag(194, 6);
        output.WriteMessage(PositionContracts);
      }
      if (positionVolume_ != null) {
        output.WriteRawTag(202, 6);
        output.WriteMessage(PositionVolume);
      }
      if (positionLiquidationVolume_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(PositionLiquidationVolume);
      }
      if (PositionType != global::DigitexWire.OrderPosition.Undefined) {
        output.WriteRawTag(216, 6);
        output.WriteEnum((int) PositionType);
      }
      if (lastTradePrice_ != null) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(LastTradePrice);
      }
      if (lastTradeQuantity_ != null) {
        output.WriteRawTag(162, 7);
        output.WriteMessage(LastTradeQuantity);
      }
      if (positionBankruptcyVolume_ != null) {
        output.WriteRawTag(170, 7);
        output.WriteMessage(PositionBankruptcyVolume);
      }
      if (buyOrderMargin_ != null) {
        output.WriteRawTag(178, 7);
        output.WriteMessage(BuyOrderMargin);
      }
      if (sellOrderMargin_ != null) {
        output.WriteRawTag(186, 7);
        output.WriteMessage(SellOrderMargin);
      }
      if (traderBalanceIncrement_ != null) {
        output.WriteRawTag(178, 8);
        output.WriteMessage(TraderBalanceIncrement);
      }
      if (floorMarkPrice_ != null) {
        output.WriteRawTag(186, 8);
        output.WriteMessage(FloorMarkPrice);
      }
      if (ceilMarkPrice_ != null) {
        output.WriteRawTag(194, 8);
        output.WriteMessage(CeilMarkPrice);
      }
      if (pnl_ != null) {
        output.WriteRawTag(210, 9);
        output.WriteMessage(Pnl);
      }
      liquidatedTrades_.WriteTo(ref output, _repeated_liquidatedTrades_codec);
      if (accumQuantity_ != null) {
        output.WriteRawTag(170, 11);
        output.WriteMessage(AccumQuantity);
      }
      if (buyOrderQuantity_ != null) {
        output.WriteRawTag(178, 11);
        output.WriteMessage(BuyOrderQuantity);
      }
      if (sellOrderQuantity_ != null) {
        output.WriteRawTag(186, 11);
        output.WriteMessage(SellOrderQuantity);
      }
      if (LastTradeTimestamp != 0L) {
        output.WriteRawTag(192, 18);
        output.WriteInt64(LastTradeTimestamp);
      }
      if (fullPositionMargin_ != null) {
        output.WriteRawTag(210, 18);
        output.WriteMessage(FullPositionMargin);
      }
      if (fullBuyOrderMargin_ != null) {
        output.WriteRawTag(218, 18);
        output.WriteMessage(FullBuyOrderMargin);
      }
      if (fullSellOrderMargin_ != null) {
        output.WriteRawTag(226, 18);
        output.WriteMessage(FullSellOrderMargin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += liquidatedTrades_.CalculateSize(_repeated_liquidatedTrades_codec);
      size += terminatedOrders_.CalculateSize(_repeated_terminatedOrders_codec);
      size += orders_.CalculateSize(_repeated_orders_codec);
      if (traderBalance_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TraderBalance);
      }
      if (orderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderMargin);
      }
      if (positionMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionMargin);
      }
      if (upnl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Upnl);
      }
      if (pnl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Pnl);
      }
      if (accumQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AccumQuantity);
      }
      if (positionContracts_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionContracts);
      }
      if (positionVolume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionVolume);
      }
      if (positionLiquidationVolume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionLiquidationVolume);
      }
      if (positionBankruptcyVolume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionBankruptcyVolume);
      }
      if (PositionType != global::DigitexWire.OrderPosition.Undefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PositionType);
      }
      if (lastTradePrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastTradePrice);
      }
      if (lastTradeQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastTradeQuantity);
      }
      if (LastTradeTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastTradeTimestamp);
      }
      if (buyOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BuyOrderMargin);
      }
      if (sellOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SellOrderMargin);
      }
      if (traderBalanceIncrement_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TraderBalanceIncrement);
      }
      if (buyOrderQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BuyOrderQuantity);
      }
      if (sellOrderQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SellOrderQuantity);
      }
      if (fullPositionMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FullPositionMargin);
      }
      if (fullBuyOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FullBuyOrderMargin);
      }
      if (fullSellOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FullSellOrderMargin);
      }
      if (markPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MarkPrice);
      }
      if (floorMarkPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FloorMarkPrice);
      }
      if (ceilMarkPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CeilMarkPrice);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PositionEventMessage other) {
      if (other == null) {
        return;
      }
      liquidatedTrades_.Add(other.liquidatedTrades_);
      terminatedOrders_.Add(other.terminatedOrders_);
      orders_.Add(other.orders_);
      if (other.traderBalance_ != null) {
        if (traderBalance_ == null) {
          TraderBalance = new global::DigitexWire.Decimal();
        }
        TraderBalance.MergeFrom(other.TraderBalance);
      }
      if (other.orderMargin_ != null) {
        if (orderMargin_ == null) {
          OrderMargin = new global::DigitexWire.Decimal();
        }
        OrderMargin.MergeFrom(other.OrderMargin);
      }
      if (other.positionMargin_ != null) {
        if (positionMargin_ == null) {
          PositionMargin = new global::DigitexWire.Decimal();
        }
        PositionMargin.MergeFrom(other.PositionMargin);
      }
      if (other.upnl_ != null) {
        if (upnl_ == null) {
          Upnl = new global::DigitexWire.Decimal();
        }
        Upnl.MergeFrom(other.Upnl);
      }
      if (other.pnl_ != null) {
        if (pnl_ == null) {
          Pnl = new global::DigitexWire.Decimal();
        }
        Pnl.MergeFrom(other.Pnl);
      }
      if (other.accumQuantity_ != null) {
        if (accumQuantity_ == null) {
          AccumQuantity = new global::DigitexWire.Decimal();
        }
        AccumQuantity.MergeFrom(other.AccumQuantity);
      }
      if (other.positionContracts_ != null) {
        if (positionContracts_ == null) {
          PositionContracts = new global::DigitexWire.Decimal();
        }
        PositionContracts.MergeFrom(other.PositionContracts);
      }
      if (other.positionVolume_ != null) {
        if (positionVolume_ == null) {
          PositionVolume = new global::DigitexWire.Decimal();
        }
        PositionVolume.MergeFrom(other.PositionVolume);
      }
      if (other.positionLiquidationVolume_ != null) {
        if (positionLiquidationVolume_ == null) {
          PositionLiquidationVolume = new global::DigitexWire.Decimal();
        }
        PositionLiquidationVolume.MergeFrom(other.PositionLiquidationVolume);
      }
      if (other.positionBankruptcyVolume_ != null) {
        if (positionBankruptcyVolume_ == null) {
          PositionBankruptcyVolume = new global::DigitexWire.Decimal();
        }
        PositionBankruptcyVolume.MergeFrom(other.PositionBankruptcyVolume);
      }
      if (other.PositionType != global::DigitexWire.OrderPosition.Undefined) {
        PositionType = other.PositionType;
      }
      if (other.lastTradePrice_ != null) {
        if (lastTradePrice_ == null) {
          LastTradePrice = new global::DigitexWire.Decimal();
        }
        LastTradePrice.MergeFrom(other.LastTradePrice);
      }
      if (other.lastTradeQuantity_ != null) {
        if (lastTradeQuantity_ == null) {
          LastTradeQuantity = new global::DigitexWire.Decimal();
        }
        LastTradeQuantity.MergeFrom(other.LastTradeQuantity);
      }
      if (other.LastTradeTimestamp != 0L) {
        LastTradeTimestamp = other.LastTradeTimestamp;
      }
      if (other.buyOrderMargin_ != null) {
        if (buyOrderMargin_ == null) {
          BuyOrderMargin = new global::DigitexWire.Decimal();
        }
        BuyOrderMargin.MergeFrom(other.BuyOrderMargin);
      }
      if (other.sellOrderMargin_ != null) {
        if (sellOrderMargin_ == null) {
          SellOrderMargin = new global::DigitexWire.Decimal();
        }
        SellOrderMargin.MergeFrom(other.SellOrderMargin);
      }
      if (other.traderBalanceIncrement_ != null) {
        if (traderBalanceIncrement_ == null) {
          TraderBalanceIncrement = new global::DigitexWire.Decimal();
        }
        TraderBalanceIncrement.MergeFrom(other.TraderBalanceIncrement);
      }
      if (other.buyOrderQuantity_ != null) {
        if (buyOrderQuantity_ == null) {
          BuyOrderQuantity = new global::DigitexWire.Decimal();
        }
        BuyOrderQuantity.MergeFrom(other.BuyOrderQuantity);
      }
      if (other.sellOrderQuantity_ != null) {
        if (sellOrderQuantity_ == null) {
          SellOrderQuantity = new global::DigitexWire.Decimal();
        }
        SellOrderQuantity.MergeFrom(other.SellOrderQuantity);
      }
      if (other.fullPositionMargin_ != null) {
        if (fullPositionMargin_ == null) {
          FullPositionMargin = new global::DigitexWire.Decimal();
        }
        FullPositionMargin.MergeFrom(other.FullPositionMargin);
      }
      if (other.fullBuyOrderMargin_ != null) {
        if (fullBuyOrderMargin_ == null) {
          FullBuyOrderMargin = new global::DigitexWire.Decimal();
        }
        FullBuyOrderMargin.MergeFrom(other.FullBuyOrderMargin);
      }
      if (other.fullSellOrderMargin_ != null) {
        if (fullSellOrderMargin_ == null) {
          FullSellOrderMargin = new global::DigitexWire.Decimal();
        }
        FullSellOrderMargin.MergeFrom(other.FullSellOrderMargin);
      }
      if (other.markPrice_ != null) {
        if (markPrice_ == null) {
          MarkPrice = new global::DigitexWire.Decimal();
        }
        MarkPrice.MergeFrom(other.MarkPrice);
      }
      if (other.floorMarkPrice_ != null) {
        if (floorMarkPrice_ == null) {
          FloorMarkPrice = new global::DigitexWire.Decimal();
        }
        FloorMarkPrice.MergeFrom(other.FloorMarkPrice);
      }
      if (other.ceilMarkPrice_ != null) {
        if (ceilMarkPrice_ == null) {
          CeilMarkPrice = new global::DigitexWire.Decimal();
        }
        CeilMarkPrice.MergeFrom(other.CeilMarkPrice);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 410: {
            if (traderBalance_ == null) {
              TraderBalance = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TraderBalance);
            break;
          }
          case 418: {
            if (markPrice_ == null) {
              MarkPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(MarkPrice);
            break;
          }
          case 562: {
            orders_.AddEntriesFrom(input, _repeated_orders_codec);
            break;
          }
          case 610: {
            if (orderMargin_ == null) {
              OrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OrderMargin);
            break;
          }
          case 626: {
            if (positionMargin_ == null) {
              PositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionMargin);
            break;
          }
          case 634: {
            if (upnl_ == null) {
              Upnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Upnl);
            break;
          }
          case 770: {
            terminatedOrders_.AddEntriesFrom(input, _repeated_terminatedOrders_codec);
            break;
          }
          case 834: {
            if (positionContracts_ == null) {
              PositionContracts = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionContracts);
            break;
          }
          case 842: {
            if (positionVolume_ == null) {
              PositionVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionVolume);
            break;
          }
          case 850: {
            if (positionLiquidationVolume_ == null) {
              PositionLiquidationVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionLiquidationVolume);
            break;
          }
          case 856: {
            PositionType = (global::DigitexWire.OrderPosition) input.ReadEnum();
            break;
          }
          case 906: {
            if (lastTradePrice_ == null) {
              LastTradePrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradePrice);
            break;
          }
          case 930: {
            if (lastTradeQuantity_ == null) {
              LastTradeQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradeQuantity);
            break;
          }
          case 938: {
            if (positionBankruptcyVolume_ == null) {
              PositionBankruptcyVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionBankruptcyVolume);
            break;
          }
          case 946: {
            if (buyOrderMargin_ == null) {
              BuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderMargin);
            break;
          }
          case 954: {
            if (sellOrderMargin_ == null) {
              SellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderMargin);
            break;
          }
          case 1074: {
            if (traderBalanceIncrement_ == null) {
              TraderBalanceIncrement = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TraderBalanceIncrement);
            break;
          }
          case 1082: {
            if (floorMarkPrice_ == null) {
              FloorMarkPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FloorMarkPrice);
            break;
          }
          case 1090: {
            if (ceilMarkPrice_ == null) {
              CeilMarkPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(CeilMarkPrice);
            break;
          }
          case 1234: {
            if (pnl_ == null) {
              Pnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Pnl);
            break;
          }
          case 1346: {
            liquidatedTrades_.AddEntriesFrom(input, _repeated_liquidatedTrades_codec);
            break;
          }
          case 1450: {
            if (accumQuantity_ == null) {
              AccumQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(AccumQuantity);
            break;
          }
          case 1458: {
            if (buyOrderQuantity_ == null) {
              BuyOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderQuantity);
            break;
          }
          case 1466: {
            if (sellOrderQuantity_ == null) {
              SellOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderQuantity);
            break;
          }
          case 2368: {
            LastTradeTimestamp = input.ReadInt64();
            break;
          }
          case 2386: {
            if (fullPositionMargin_ == null) {
              FullPositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullPositionMargin);
            break;
          }
          case 2394: {
            if (fullBuyOrderMargin_ == null) {
              FullBuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullBuyOrderMargin);
            break;
          }
          case 2402: {
            if (fullSellOrderMargin_ == null) {
              FullSellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullSellOrderMargin);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 410: {
            if (traderBalance_ == null) {
              TraderBalance = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TraderBalance);
            break;
          }
          case 418: {
            if (markPrice_ == null) {
              MarkPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(MarkPrice);
            break;
          }
          case 562: {
            orders_.AddEntriesFrom(ref input, _repeated_orders_codec);
            break;
          }
          case 610: {
            if (orderMargin_ == null) {
              OrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OrderMargin);
            break;
          }
          case 626: {
            if (positionMargin_ == null) {
              PositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionMargin);
            break;
          }
          case 634: {
            if (upnl_ == null) {
              Upnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Upnl);
            break;
          }
          case 770: {
            terminatedOrders_.AddEntriesFrom(ref input, _repeated_terminatedOrders_codec);
            break;
          }
          case 834: {
            if (positionContracts_ == null) {
              PositionContracts = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionContracts);
            break;
          }
          case 842: {
            if (positionVolume_ == null) {
              PositionVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionVolume);
            break;
          }
          case 850: {
            if (positionLiquidationVolume_ == null) {
              PositionLiquidationVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionLiquidationVolume);
            break;
          }
          case 856: {
            PositionType = (global::DigitexWire.OrderPosition) input.ReadEnum();
            break;
          }
          case 906: {
            if (lastTradePrice_ == null) {
              LastTradePrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradePrice);
            break;
          }
          case 930: {
            if (lastTradeQuantity_ == null) {
              LastTradeQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradeQuantity);
            break;
          }
          case 938: {
            if (positionBankruptcyVolume_ == null) {
              PositionBankruptcyVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionBankruptcyVolume);
            break;
          }
          case 946: {
            if (buyOrderMargin_ == null) {
              BuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderMargin);
            break;
          }
          case 954: {
            if (sellOrderMargin_ == null) {
              SellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderMargin);
            break;
          }
          case 1074: {
            if (traderBalanceIncrement_ == null) {
              TraderBalanceIncrement = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TraderBalanceIncrement);
            break;
          }
          case 1082: {
            if (floorMarkPrice_ == null) {
              FloorMarkPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FloorMarkPrice);
            break;
          }
          case 1090: {
            if (ceilMarkPrice_ == null) {
              CeilMarkPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(CeilMarkPrice);
            break;
          }
          case 1234: {
            if (pnl_ == null) {
              Pnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Pnl);
            break;
          }
          case 1346: {
            liquidatedTrades_.AddEntriesFrom(ref input, _repeated_liquidatedTrades_codec);
            break;
          }
          case 1450: {
            if (accumQuantity_ == null) {
              AccumQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(AccumQuantity);
            break;
          }
          case 1458: {
            if (buyOrderQuantity_ == null) {
              BuyOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderQuantity);
            break;
          }
          case 1466: {
            if (sellOrderQuantity_ == null) {
              SellOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderQuantity);
            break;
          }
          case 2368: {
            LastTradeTimestamp = input.ReadInt64();
            break;
          }
          case 2386: {
            if (fullPositionMargin_ == null) {
              FullPositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullPositionMargin);
            break;
          }
          case 2394: {
            if (fullBuyOrderMargin_ == null) {
              FullBuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullBuyOrderMargin);
            break;
          }
          case 2402: {
            if (fullSellOrderMargin_ == null) {
              FullSellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullSellOrderMargin);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OrderBookRequestMessage : pb::IMessage<OrderBookRequestMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderBookRequestMessage> _parser = new pb::MessageParser<OrderBookRequestMessage>(() => new OrderBookRequestMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderBookRequestMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderBookRequestMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderBookRequestMessage(OrderBookRequestMessage other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderBookRequestMessage Clone() {
      return new OrderBookRequestMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderBookRequestMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderBookRequestMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderBookRequestMessage other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class OrderBookEntryMessage : pb::IMessage<OrderBookEntryMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderBookEntryMessage> _parser = new pb::MessageParser<OrderBookEntryMessage>(() => new OrderBookEntryMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderBookEntryMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderBookEntryMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderBookEntryMessage(OrderBookEntryMessage other) : this() {
      price_ = other.price_ != null ? other.price_.Clone() : null;
      quantity_ = other.quantity_ != null ? other.quantity_.Clone() : null;
      entryTimestamp_ = other.entryTimestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderBookEntryMessage Clone() {
      return new OrderBookEntryMessage(this);
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 38;
    private global::DigitexWire.Decimal price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 39;
    private global::DigitexWire.Decimal quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "entry_timestamp" field.</summary>
    public const int EntryTimestampFieldNumber = 155;
    private long entryTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EntryTimestamp {
      get { return entryTimestamp_; }
      set {
        entryTimestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderBookEntryMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderBookEntryMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Price, other.Price)) return false;
      if (!object.Equals(Quantity, other.Quantity)) return false;
      if (EntryTimestamp != other.EntryTimestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (price_ != null) hash ^= Price.GetHashCode();
      if (quantity_ != null) hash ^= Quantity.GetHashCode();
      if (EntryTimestamp != 0L) hash ^= EntryTimestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (price_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(Price);
      }
      if (quantity_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Quantity);
      }
      if (EntryTimestamp != 0L) {
        output.WriteRawTag(216, 9);
        output.WriteInt64(EntryTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (price_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(Price);
      }
      if (quantity_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Quantity);
      }
      if (EntryTimestamp != 0L) {
        output.WriteRawTag(216, 9);
        output.WriteInt64(EntryTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (price_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Price);
      }
      if (quantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Quantity);
      }
      if (EntryTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(EntryTimestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderBookEntryMessage other) {
      if (other == null) {
        return;
      }
      if (other.price_ != null) {
        if (price_ == null) {
          Price = new global::DigitexWire.Decimal();
        }
        Price.MergeFrom(other.Price);
      }
      if (other.quantity_ != null) {
        if (quantity_ == null) {
          Quantity = new global::DigitexWire.Decimal();
        }
        Quantity.MergeFrom(other.Quantity);
      }
      if (other.EntryTimestamp != 0L) {
        EntryTimestamp = other.EntryTimestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 306: {
            if (price_ == null) {
              Price = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Price);
            break;
          }
          case 314: {
            if (quantity_ == null) {
              Quantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Quantity);
            break;
          }
          case 1240: {
            EntryTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 306: {
            if (price_ == null) {
              Price = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Price);
            break;
          }
          case 314: {
            if (quantity_ == null) {
              Quantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Quantity);
            break;
          }
          case 1240: {
            EntryTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OrderBookTradeEntryMessage : pb::IMessage<OrderBookTradeEntryMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderBookTradeEntryMessage> _parser = new pb::MessageParser<OrderBookTradeEntryMessage>(() => new OrderBookTradeEntryMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderBookTradeEntryMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderBookTradeEntryMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderBookTradeEntryMessage(OrderBookTradeEntryMessage other) : this() {
      price_ = other.price_ != null ? other.price_.Clone() : null;
      quantity_ = other.quantity_ != null ? other.quantity_.Clone() : null;
      entryTimestamp_ = other.entryTimestamp_;
      side_ = other.side_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderBookTradeEntryMessage Clone() {
      return new OrderBookTradeEntryMessage(this);
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 38;
    private global::DigitexWire.Decimal price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 39;
    private global::DigitexWire.Decimal quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "entry_timestamp" field.</summary>
    public const int EntryTimestampFieldNumber = 155;
    private long entryTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EntryTimestamp {
      get { return entryTimestamp_; }
      set {
        entryTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 33;
    private global::DigitexWire.OrderSide side_ = global::DigitexWire.OrderSide.SideUndefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderBookTradeEntryMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderBookTradeEntryMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Price, other.Price)) return false;
      if (!object.Equals(Quantity, other.Quantity)) return false;
      if (EntryTimestamp != other.EntryTimestamp) return false;
      if (Side != other.Side) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (price_ != null) hash ^= Price.GetHashCode();
      if (quantity_ != null) hash ^= Quantity.GetHashCode();
      if (EntryTimestamp != 0L) hash ^= EntryTimestamp.GetHashCode();
      if (Side != global::DigitexWire.OrderSide.SideUndefined) hash ^= Side.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Side != global::DigitexWire.OrderSide.SideUndefined) {
        output.WriteRawTag(136, 2);
        output.WriteEnum((int) Side);
      }
      if (price_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(Price);
      }
      if (quantity_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Quantity);
      }
      if (EntryTimestamp != 0L) {
        output.WriteRawTag(216, 9);
        output.WriteInt64(EntryTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Side != global::DigitexWire.OrderSide.SideUndefined) {
        output.WriteRawTag(136, 2);
        output.WriteEnum((int) Side);
      }
      if (price_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(Price);
      }
      if (quantity_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Quantity);
      }
      if (EntryTimestamp != 0L) {
        output.WriteRawTag(216, 9);
        output.WriteInt64(EntryTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (price_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Price);
      }
      if (quantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Quantity);
      }
      if (EntryTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(EntryTimestamp);
      }
      if (Side != global::DigitexWire.OrderSide.SideUndefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderBookTradeEntryMessage other) {
      if (other == null) {
        return;
      }
      if (other.price_ != null) {
        if (price_ == null) {
          Price = new global::DigitexWire.Decimal();
        }
        Price.MergeFrom(other.Price);
      }
      if (other.quantity_ != null) {
        if (quantity_ == null) {
          Quantity = new global::DigitexWire.Decimal();
        }
        Quantity.MergeFrom(other.Quantity);
      }
      if (other.EntryTimestamp != 0L) {
        EntryTimestamp = other.EntryTimestamp;
      }
      if (other.Side != global::DigitexWire.OrderSide.SideUndefined) {
        Side = other.Side;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 264: {
            Side = (global::DigitexWire.OrderSide) input.ReadEnum();
            break;
          }
          case 306: {
            if (price_ == null) {
              Price = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Price);
            break;
          }
          case 314: {
            if (quantity_ == null) {
              Quantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Quantity);
            break;
          }
          case 1240: {
            EntryTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 264: {
            Side = (global::DigitexWire.OrderSide) input.ReadEnum();
            break;
          }
          case 306: {
            if (price_ == null) {
              Price = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Price);
            break;
          }
          case 314: {
            if (quantity_ == null) {
              Quantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Quantity);
            break;
          }
          case 1240: {
            EntryTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OrderBookMessage : pb::IMessage<OrderBookMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderBookMessage> _parser = new pb::MessageParser<OrderBookMessage>(() => new OrderBookMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderBookMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderBookMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderBookMessage(OrderBookMessage other) : this() {
      bids_ = other.bids_.Clone();
      asks_ = other.asks_.Clone();
      markPrice_ = other.markPrice_ != null ? other.markPrice_.Clone() : null;
      lastTradePrice_ = other.lastTradePrice_ != null ? other.lastTradePrice_.Clone() : null;
      lastTradeQuantity_ = other.lastTradeQuantity_ != null ? other.lastTradeQuantity_.Clone() : null;
      lastTradeTimestamp_ = other.lastTradeTimestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderBookMessage Clone() {
      return new OrderBookMessage(this);
    }

    /// <summary>Field number for the "bids" field.</summary>
    public const int BidsFieldNumber = 53;
    private static readonly pb::FieldCodec<global::DigitexWire.OrderBookEntryMessage> _repeated_bids_codec
        = pb::FieldCodec.ForMessage(426, global::DigitexWire.OrderBookEntryMessage.Parser);
    private readonly pbc::RepeatedField<global::DigitexWire.OrderBookEntryMessage> bids_ = new pbc::RepeatedField<global::DigitexWire.OrderBookEntryMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DigitexWire.OrderBookEntryMessage> Bids {
      get { return bids_; }
    }

    /// <summary>Field number for the "asks" field.</summary>
    public const int AsksFieldNumber = 54;
    private static readonly pb::FieldCodec<global::DigitexWire.OrderBookEntryMessage> _repeated_asks_codec
        = pb::FieldCodec.ForMessage(434, global::DigitexWire.OrderBookEntryMessage.Parser);
    private readonly pbc::RepeatedField<global::DigitexWire.OrderBookEntryMessage> asks_ = new pbc::RepeatedField<global::DigitexWire.OrderBookEntryMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DigitexWire.OrderBookEntryMessage> Asks {
      get { return asks_; }
    }

    /// <summary>Field number for the "mark_price" field.</summary>
    public const int MarkPriceFieldNumber = 52;
    private global::DigitexWire.Decimal markPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal MarkPrice {
      get { return markPrice_; }
      set {
        markPrice_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_price" field.</summary>
    public const int LastTradePriceFieldNumber = 113;
    private global::DigitexWire.Decimal lastTradePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal LastTradePrice {
      get { return lastTradePrice_; }
      set {
        lastTradePrice_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_quantity" field.</summary>
    public const int LastTradeQuantityFieldNumber = 116;
    private global::DigitexWire.Decimal lastTradeQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal LastTradeQuantity {
      get { return lastTradeQuantity_; }
      set {
        lastTradeQuantity_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_timestamp" field.</summary>
    public const int LastTradeTimestampFieldNumber = 296;
    private long lastTradeTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastTradeTimestamp {
      get { return lastTradeTimestamp_; }
      set {
        lastTradeTimestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderBookMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderBookMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!bids_.Equals(other.bids_)) return false;
      if(!asks_.Equals(other.asks_)) return false;
      if (!object.Equals(MarkPrice, other.MarkPrice)) return false;
      if (!object.Equals(LastTradePrice, other.LastTradePrice)) return false;
      if (!object.Equals(LastTradeQuantity, other.LastTradeQuantity)) return false;
      if (LastTradeTimestamp != other.LastTradeTimestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= bids_.GetHashCode();
      hash ^= asks_.GetHashCode();
      if (markPrice_ != null) hash ^= MarkPrice.GetHashCode();
      if (lastTradePrice_ != null) hash ^= LastTradePrice.GetHashCode();
      if (lastTradeQuantity_ != null) hash ^= LastTradeQuantity.GetHashCode();
      if (LastTradeTimestamp != 0L) hash ^= LastTradeTimestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (markPrice_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(MarkPrice);
      }
      bids_.WriteTo(output, _repeated_bids_codec);
      asks_.WriteTo(output, _repeated_asks_codec);
      if (lastTradePrice_ != null) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(LastTradePrice);
      }
      if (lastTradeQuantity_ != null) {
        output.WriteRawTag(162, 7);
        output.WriteMessage(LastTradeQuantity);
      }
      if (LastTradeTimestamp != 0L) {
        output.WriteRawTag(192, 18);
        output.WriteInt64(LastTradeTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (markPrice_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(MarkPrice);
      }
      bids_.WriteTo(ref output, _repeated_bids_codec);
      asks_.WriteTo(ref output, _repeated_asks_codec);
      if (lastTradePrice_ != null) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(LastTradePrice);
      }
      if (lastTradeQuantity_ != null) {
        output.WriteRawTag(162, 7);
        output.WriteMessage(LastTradeQuantity);
      }
      if (LastTradeTimestamp != 0L) {
        output.WriteRawTag(192, 18);
        output.WriteInt64(LastTradeTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bids_.CalculateSize(_repeated_bids_codec);
      size += asks_.CalculateSize(_repeated_asks_codec);
      if (markPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MarkPrice);
      }
      if (lastTradePrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastTradePrice);
      }
      if (lastTradeQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastTradeQuantity);
      }
      if (LastTradeTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastTradeTimestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderBookMessage other) {
      if (other == null) {
        return;
      }
      bids_.Add(other.bids_);
      asks_.Add(other.asks_);
      if (other.markPrice_ != null) {
        if (markPrice_ == null) {
          MarkPrice = new global::DigitexWire.Decimal();
        }
        MarkPrice.MergeFrom(other.MarkPrice);
      }
      if (other.lastTradePrice_ != null) {
        if (lastTradePrice_ == null) {
          LastTradePrice = new global::DigitexWire.Decimal();
        }
        LastTradePrice.MergeFrom(other.LastTradePrice);
      }
      if (other.lastTradeQuantity_ != null) {
        if (lastTradeQuantity_ == null) {
          LastTradeQuantity = new global::DigitexWire.Decimal();
        }
        LastTradeQuantity.MergeFrom(other.LastTradeQuantity);
      }
      if (other.LastTradeTimestamp != 0L) {
        LastTradeTimestamp = other.LastTradeTimestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 418: {
            if (markPrice_ == null) {
              MarkPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(MarkPrice);
            break;
          }
          case 426: {
            bids_.AddEntriesFrom(input, _repeated_bids_codec);
            break;
          }
          case 434: {
            asks_.AddEntriesFrom(input, _repeated_asks_codec);
            break;
          }
          case 906: {
            if (lastTradePrice_ == null) {
              LastTradePrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradePrice);
            break;
          }
          case 930: {
            if (lastTradeQuantity_ == null) {
              LastTradeQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradeQuantity);
            break;
          }
          case 2368: {
            LastTradeTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 418: {
            if (markPrice_ == null) {
              MarkPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(MarkPrice);
            break;
          }
          case 426: {
            bids_.AddEntriesFrom(ref input, _repeated_bids_codec);
            break;
          }
          case 434: {
            asks_.AddEntriesFrom(ref input, _repeated_asks_codec);
            break;
          }
          case 906: {
            if (lastTradePrice_ == null) {
              LastTradePrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradePrice);
            break;
          }
          case 930: {
            if (lastTradeQuantity_ == null) {
              LastTradeQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradeQuantity);
            break;
          }
          case 2368: {
            LastTradeTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OrderBookUpdatedMessage : pb::IMessage<OrderBookUpdatedMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderBookUpdatedMessage> _parser = new pb::MessageParser<OrderBookUpdatedMessage>(() => new OrderBookUpdatedMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderBookUpdatedMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderBookUpdatedMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderBookUpdatedMessage(OrderBookUpdatedMessage other) : this() {
      bidUpdates_ = other.bidUpdates_.Clone();
      askUpdates_ = other.askUpdates_.Clone();
      trades_ = other.trades_.Clone();
      trades2_ = other.trades2_.Clone();
      markPrice_ = other.markPrice_ != null ? other.markPrice_.Clone() : null;
      lastFullTimestamp_ = other.lastFullTimestamp_;
      updateSerial_ = other.updateSerial_;
      lastTradePrice_ = other.lastTradePrice_ != null ? other.lastTradePrice_.Clone() : null;
      lastTradeQuantity_ = other.lastTradeQuantity_ != null ? other.lastTradeQuantity_.Clone() : null;
      lastTradeTimestamp_ = other.lastTradeTimestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderBookUpdatedMessage Clone() {
      return new OrderBookUpdatedMessage(this);
    }

    /// <summary>Field number for the "bid_updates" field.</summary>
    public const int BidUpdatesFieldNumber = 58;
    private static readonly pb::FieldCodec<global::DigitexWire.OrderBookEntryMessage> _repeated_bidUpdates_codec
        = pb::FieldCodec.ForMessage(466, global::DigitexWire.OrderBookEntryMessage.Parser);
    private readonly pbc::RepeatedField<global::DigitexWire.OrderBookEntryMessage> bidUpdates_ = new pbc::RepeatedField<global::DigitexWire.OrderBookEntryMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DigitexWire.OrderBookEntryMessage> BidUpdates {
      get { return bidUpdates_; }
    }

    /// <summary>Field number for the "ask_updates" field.</summary>
    public const int AskUpdatesFieldNumber = 59;
    private static readonly pb::FieldCodec<global::DigitexWire.OrderBookEntryMessage> _repeated_askUpdates_codec
        = pb::FieldCodec.ForMessage(474, global::DigitexWire.OrderBookEntryMessage.Parser);
    private readonly pbc::RepeatedField<global::DigitexWire.OrderBookEntryMessage> askUpdates_ = new pbc::RepeatedField<global::DigitexWire.OrderBookEntryMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DigitexWire.OrderBookEntryMessage> AskUpdates {
      get { return askUpdates_; }
    }

    /// <summary>Field number for the "trades" field.</summary>
    public const int TradesFieldNumber = 60;
    private static readonly pb::FieldCodec<global::DigitexWire.OrderBookEntryMessage> _repeated_trades_codec
        = pb::FieldCodec.ForMessage(482, global::DigitexWire.OrderBookEntryMessage.Parser);
    private readonly pbc::RepeatedField<global::DigitexWire.OrderBookEntryMessage> trades_ = new pbc::RepeatedField<global::DigitexWire.OrderBookEntryMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DigitexWire.OrderBookEntryMessage> Trades {
      get { return trades_; }
    }

    /// <summary>Field number for the "trades2" field.</summary>
    public const int Trades2FieldNumber = 292;
    private static readonly pb::FieldCodec<global::DigitexWire.OrderBookTradeEntryMessage> _repeated_trades2_codec
        = pb::FieldCodec.ForMessage(2338, global::DigitexWire.OrderBookTradeEntryMessage.Parser);
    private readonly pbc::RepeatedField<global::DigitexWire.OrderBookTradeEntryMessage> trades2_ = new pbc::RepeatedField<global::DigitexWire.OrderBookTradeEntryMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DigitexWire.OrderBookTradeEntryMessage> Trades2 {
      get { return trades2_; }
    }

    /// <summary>Field number for the "mark_price" field.</summary>
    public const int MarkPriceFieldNumber = 52;
    private global::DigitexWire.Decimal markPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal MarkPrice {
      get { return markPrice_; }
      set {
        markPrice_ = value;
      }
    }

    /// <summary>Field number for the "last_full_timestamp" field.</summary>
    public const int LastFullTimestampFieldNumber = 55;
    private long lastFullTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastFullTimestamp {
      get { return lastFullTimestamp_; }
      set {
        lastFullTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "update_serial" field.</summary>
    public const int UpdateSerialFieldNumber = 56;
    private long updateSerial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdateSerial {
      get { return updateSerial_; }
      set {
        updateSerial_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_price" field.</summary>
    public const int LastTradePriceFieldNumber = 113;
    private global::DigitexWire.Decimal lastTradePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal LastTradePrice {
      get { return lastTradePrice_; }
      set {
        lastTradePrice_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_quantity" field.</summary>
    public const int LastTradeQuantityFieldNumber = 116;
    private global::DigitexWire.Decimal lastTradeQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal LastTradeQuantity {
      get { return lastTradeQuantity_; }
      set {
        lastTradeQuantity_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_timestamp" field.</summary>
    public const int LastTradeTimestampFieldNumber = 296;
    private long lastTradeTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastTradeTimestamp {
      get { return lastTradeTimestamp_; }
      set {
        lastTradeTimestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderBookUpdatedMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderBookUpdatedMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!bidUpdates_.Equals(other.bidUpdates_)) return false;
      if(!askUpdates_.Equals(other.askUpdates_)) return false;
      if(!trades_.Equals(other.trades_)) return false;
      if(!trades2_.Equals(other.trades2_)) return false;
      if (!object.Equals(MarkPrice, other.MarkPrice)) return false;
      if (LastFullTimestamp != other.LastFullTimestamp) return false;
      if (UpdateSerial != other.UpdateSerial) return false;
      if (!object.Equals(LastTradePrice, other.LastTradePrice)) return false;
      if (!object.Equals(LastTradeQuantity, other.LastTradeQuantity)) return false;
      if (LastTradeTimestamp != other.LastTradeTimestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= bidUpdates_.GetHashCode();
      hash ^= askUpdates_.GetHashCode();
      hash ^= trades_.GetHashCode();
      hash ^= trades2_.GetHashCode();
      if (markPrice_ != null) hash ^= MarkPrice.GetHashCode();
      if (LastFullTimestamp != 0L) hash ^= LastFullTimestamp.GetHashCode();
      if (UpdateSerial != 0L) hash ^= UpdateSerial.GetHashCode();
      if (lastTradePrice_ != null) hash ^= LastTradePrice.GetHashCode();
      if (lastTradeQuantity_ != null) hash ^= LastTradeQuantity.GetHashCode();
      if (LastTradeTimestamp != 0L) hash ^= LastTradeTimestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (markPrice_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(MarkPrice);
      }
      if (LastFullTimestamp != 0L) {
        output.WriteRawTag(184, 3);
        output.WriteInt64(LastFullTimestamp);
      }
      if (UpdateSerial != 0L) {
        output.WriteRawTag(192, 3);
        output.WriteInt64(UpdateSerial);
      }
      bidUpdates_.WriteTo(output, _repeated_bidUpdates_codec);
      askUpdates_.WriteTo(output, _repeated_askUpdates_codec);
      trades_.WriteTo(output, _repeated_trades_codec);
      if (lastTradePrice_ != null) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(LastTradePrice);
      }
      if (lastTradeQuantity_ != null) {
        output.WriteRawTag(162, 7);
        output.WriteMessage(LastTradeQuantity);
      }
      trades2_.WriteTo(output, _repeated_trades2_codec);
      if (LastTradeTimestamp != 0L) {
        output.WriteRawTag(192, 18);
        output.WriteInt64(LastTradeTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (markPrice_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(MarkPrice);
      }
      if (LastFullTimestamp != 0L) {
        output.WriteRawTag(184, 3);
        output.WriteInt64(LastFullTimestamp);
      }
      if (UpdateSerial != 0L) {
        output.WriteRawTag(192, 3);
        output.WriteInt64(UpdateSerial);
      }
      bidUpdates_.WriteTo(ref output, _repeated_bidUpdates_codec);
      askUpdates_.WriteTo(ref output, _repeated_askUpdates_codec);
      trades_.WriteTo(ref output, _repeated_trades_codec);
      if (lastTradePrice_ != null) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(LastTradePrice);
      }
      if (lastTradeQuantity_ != null) {
        output.WriteRawTag(162, 7);
        output.WriteMessage(LastTradeQuantity);
      }
      trades2_.WriteTo(ref output, _repeated_trades2_codec);
      if (LastTradeTimestamp != 0L) {
        output.WriteRawTag(192, 18);
        output.WriteInt64(LastTradeTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bidUpdates_.CalculateSize(_repeated_bidUpdates_codec);
      size += askUpdates_.CalculateSize(_repeated_askUpdates_codec);
      size += trades_.CalculateSize(_repeated_trades_codec);
      size += trades2_.CalculateSize(_repeated_trades2_codec);
      if (markPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MarkPrice);
      }
      if (LastFullTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastFullTimestamp);
      }
      if (UpdateSerial != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UpdateSerial);
      }
      if (lastTradePrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastTradePrice);
      }
      if (lastTradeQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastTradeQuantity);
      }
      if (LastTradeTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastTradeTimestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderBookUpdatedMessage other) {
      if (other == null) {
        return;
      }
      bidUpdates_.Add(other.bidUpdates_);
      askUpdates_.Add(other.askUpdates_);
      trades_.Add(other.trades_);
      trades2_.Add(other.trades2_);
      if (other.markPrice_ != null) {
        if (markPrice_ == null) {
          MarkPrice = new global::DigitexWire.Decimal();
        }
        MarkPrice.MergeFrom(other.MarkPrice);
      }
      if (other.LastFullTimestamp != 0L) {
        LastFullTimestamp = other.LastFullTimestamp;
      }
      if (other.UpdateSerial != 0L) {
        UpdateSerial = other.UpdateSerial;
      }
      if (other.lastTradePrice_ != null) {
        if (lastTradePrice_ == null) {
          LastTradePrice = new global::DigitexWire.Decimal();
        }
        LastTradePrice.MergeFrom(other.LastTradePrice);
      }
      if (other.lastTradeQuantity_ != null) {
        if (lastTradeQuantity_ == null) {
          LastTradeQuantity = new global::DigitexWire.Decimal();
        }
        LastTradeQuantity.MergeFrom(other.LastTradeQuantity);
      }
      if (other.LastTradeTimestamp != 0L) {
        LastTradeTimestamp = other.LastTradeTimestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 418: {
            if (markPrice_ == null) {
              MarkPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(MarkPrice);
            break;
          }
          case 440: {
            LastFullTimestamp = input.ReadInt64();
            break;
          }
          case 448: {
            UpdateSerial = input.ReadInt64();
            break;
          }
          case 466: {
            bidUpdates_.AddEntriesFrom(input, _repeated_bidUpdates_codec);
            break;
          }
          case 474: {
            askUpdates_.AddEntriesFrom(input, _repeated_askUpdates_codec);
            break;
          }
          case 482: {
            trades_.AddEntriesFrom(input, _repeated_trades_codec);
            break;
          }
          case 906: {
            if (lastTradePrice_ == null) {
              LastTradePrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradePrice);
            break;
          }
          case 930: {
            if (lastTradeQuantity_ == null) {
              LastTradeQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradeQuantity);
            break;
          }
          case 2338: {
            trades2_.AddEntriesFrom(input, _repeated_trades2_codec);
            break;
          }
          case 2368: {
            LastTradeTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 418: {
            if (markPrice_ == null) {
              MarkPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(MarkPrice);
            break;
          }
          case 440: {
            LastFullTimestamp = input.ReadInt64();
            break;
          }
          case 448: {
            UpdateSerial = input.ReadInt64();
            break;
          }
          case 466: {
            bidUpdates_.AddEntriesFrom(ref input, _repeated_bidUpdates_codec);
            break;
          }
          case 474: {
            askUpdates_.AddEntriesFrom(ref input, _repeated_askUpdates_codec);
            break;
          }
          case 482: {
            trades_.AddEntriesFrom(ref input, _repeated_trades_codec);
            break;
          }
          case 906: {
            if (lastTradePrice_ == null) {
              LastTradePrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradePrice);
            break;
          }
          case 930: {
            if (lastTradeQuantity_ == null) {
              LastTradeQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradeQuantity);
            break;
          }
          case 2338: {
            trades2_.AddEntriesFrom(ref input, _repeated_trades2_codec);
            break;
          }
          case 2368: {
            LastTradeTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PingMessage : pb::IMessage<PingMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PingMessage> _parser = new pb::MessageParser<PingMessage>(() => new PingMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingMessage(PingMessage other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingMessage Clone() {
      return new PingMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingMessage other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class PongMessage : pb::IMessage<PongMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PongMessage> _parser = new pb::MessageParser<PongMessage>(() => new PongMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PongMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PongMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PongMessage(PongMessage other) : this() {
      pingSender_ = other.pingSender_;
      pingSerial_ = other.pingSerial_;
      pingTimestamp_ = other.pingTimestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PongMessage Clone() {
      return new PongMessage(this);
    }

    /// <summary>Field number for the "ping_sender" field.</summary>
    public const int PingSenderFieldNumber = 61;
    private uint pingSender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PingSender {
      get { return pingSender_; }
      set {
        pingSender_ = value;
      }
    }

    /// <summary>Field number for the "ping_serial" field.</summary>
    public const int PingSerialFieldNumber = 62;
    private ulong pingSerial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PingSerial {
      get { return pingSerial_; }
      set {
        pingSerial_ = value;
      }
    }

    /// <summary>Field number for the "ping_timestamp" field.</summary>
    public const int PingTimestampFieldNumber = 63;
    private long pingTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PingTimestamp {
      get { return pingTimestamp_; }
      set {
        pingTimestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PongMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PongMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PingSender != other.PingSender) return false;
      if (PingSerial != other.PingSerial) return false;
      if (PingTimestamp != other.PingTimestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PingSender != 0) hash ^= PingSender.GetHashCode();
      if (PingSerial != 0UL) hash ^= PingSerial.GetHashCode();
      if (PingTimestamp != 0L) hash ^= PingTimestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PingSender != 0) {
        output.WriteRawTag(232, 3);
        output.WriteUInt32(PingSender);
      }
      if (PingSerial != 0UL) {
        output.WriteRawTag(240, 3);
        output.WriteUInt64(PingSerial);
      }
      if (PingTimestamp != 0L) {
        output.WriteRawTag(248, 3);
        output.WriteInt64(PingTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PingSender != 0) {
        output.WriteRawTag(232, 3);
        output.WriteUInt32(PingSender);
      }
      if (PingSerial != 0UL) {
        output.WriteRawTag(240, 3);
        output.WriteUInt64(PingSerial);
      }
      if (PingTimestamp != 0L) {
        output.WriteRawTag(248, 3);
        output.WriteInt64(PingTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PingSender != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PingSender);
      }
      if (PingSerial != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(PingSerial);
      }
      if (PingTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PingTimestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PongMessage other) {
      if (other == null) {
        return;
      }
      if (other.PingSender != 0) {
        PingSender = other.PingSender;
      }
      if (other.PingSerial != 0UL) {
        PingSerial = other.PingSerial;
      }
      if (other.PingTimestamp != 0L) {
        PingTimestamp = other.PingTimestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 488: {
            PingSender = input.ReadUInt32();
            break;
          }
          case 496: {
            PingSerial = input.ReadUInt64();
            break;
          }
          case 504: {
            PingTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 488: {
            PingSender = input.ReadUInt32();
            break;
          }
          case 496: {
            PingSerial = input.ReadUInt64();
            break;
          }
          case 504: {
            PingTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GetTraderStatusMessage : pb::IMessage<GetTraderStatusMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetTraderStatusMessage> _parser = new pb::MessageParser<GetTraderStatusMessage>(() => new GetTraderStatusMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTraderStatusMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTraderStatusMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTraderStatusMessage(GetTraderStatusMessage other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTraderStatusMessage Clone() {
      return new GetTraderStatusMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTraderStatusMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTraderStatusMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTraderStatusMessage other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class OrderMessage : pb::IMessage<OrderMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderMessage> _parser = new pb::MessageParser<OrderMessage>(() => new OrderMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderMessage(OrderMessage other) : this() {
      orderClientId_ = other.orderClientId_;
      orderTimestamp_ = other.orderTimestamp_;
      orderTraderId_ = other.orderTraderId_;
      orderType_ = other.orderType_;
      side_ = other.side_;
      leverage_ = other.leverage_;
      duration_ = other.duration_;
      price_ = other.price_ != null ? other.price_.Clone() : null;
      quantity_ = other.quantity_ != null ? other.quantity_.Clone() : null;
      paidPrice_ = other.paidPrice_ != null ? other.paidPrice_.Clone() : null;
      volume_ = other.volume_ != null ? other.volume_.Clone() : null;
      contractId_ = other.contractId_;
      oldClientId_ = other.oldClientId_;
      origClientId_ = other.origClientId_;
      openTime_ = other.openTime_;
      origQuantity_ = other.origQuantity_ != null ? other.origQuantity_.Clone() : null;
      isClosing_ = other.isClosing_;
      mayIncrease_ = other.mayIncrease_;
      origOrderId_ = other.origOrderId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderMessage Clone() {
      return new OrderMessage(this);
    }

    /// <summary>Field number for the "order_client_id" field.</summary>
    public const int OrderClientIdFieldNumber = 71;
    private pb::ByteString orderClientId_ = pb::ByteString.Empty;
    /// <summary>
    /// FIXME: rename to order_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OrderClientId {
      get { return orderClientId_; }
      set {
        orderClientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_timestamp" field.</summary>
    public const int OrderTimestampFieldNumber = 72;
    private long orderTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OrderTimestamp {
      get { return orderTimestamp_; }
      set {
        orderTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "order_trader_id" field.</summary>
    public const int OrderTraderIdFieldNumber = 73;
    private uint orderTraderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OrderTraderId {
      get { return orderTraderId_; }
      set {
        orderTraderId_ = value;
      }
    }

    /// <summary>Field number for the "order_type" field.</summary>
    public const int OrderTypeFieldNumber = 32;
    private global::DigitexWire.OrderType orderType_ = global::DigitexWire.OrderType.TypeUndefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderType OrderType {
      get { return orderType_; }
      set {
        orderType_ = value;
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 33;
    private global::DigitexWire.OrderSide side_ = global::DigitexWire.OrderSide.SideUndefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "leverage" field.</summary>
    public const int LeverageFieldNumber = 34;
    private uint leverage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Leverage {
      get { return leverage_; }
      set {
        leverage_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 35;
    private global::DigitexWire.OrderDuration duration_ = global::DigitexWire.OrderDuration.DurationUndefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderDuration Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 38;
    private global::DigitexWire.Decimal price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 39;
    private global::DigitexWire.Decimal quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "paid_price" field.</summary>
    public const int PaidPriceFieldNumber = 66;
    private global::DigitexWire.Decimal paidPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PaidPrice {
      get { return paidPrice_; }
      set {
        paidPrice_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 279;
    private global::DigitexWire.Decimal volume_;
    /// <summary>
    /// for spot market if 'price * quantity' has been rounded
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "contract_id" field.</summary>
    public const int ContractIdFieldNumber = 41;
    private ulong contractId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ContractId {
      get { return contractId_; }
      set {
        contractId_ = value;
      }
    }

    /// <summary>Field number for the "old_client_id" field.</summary>
    public const int OldClientIdFieldNumber = 153;
    private pb::ByteString oldClientId_ = pb::ByteString.Empty;
    /// <summary>
    /// FIXME: rename to old_order_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OldClientId {
      get { return oldClientId_; }
      set {
        oldClientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orig_client_id" field.</summary>
    public const int OrigClientIdFieldNumber = 204;
    private pb::ByteString origClientId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OrigClientId {
      get { return origClientId_; }
      set {
        origClientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "open_time" field.</summary>
    public const int OpenTimeFieldNumber = 205;
    private long openTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OpenTime {
      get { return openTime_; }
      set {
        openTime_ = value;
      }
    }

    /// <summary>Field number for the "orig_quantity" field.</summary>
    public const int OrigQuantityFieldNumber = 206;
    private global::DigitexWire.Decimal origQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal OrigQuantity {
      get { return origQuantity_; }
      set {
        origQuantity_ = value;
      }
    }

    /// <summary>Field number for the "is_closing" field.</summary>
    public const int IsClosingFieldNumber = 280;
    private int isClosing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsClosing {
      get { return isClosing_; }
      set {
        isClosing_ = value;
      }
    }

    /// <summary>Field number for the "may_increase" field.</summary>
    public const int MayIncreaseFieldNumber = 293;
    private int mayIncrease_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MayIncrease {
      get { return mayIncrease_; }
      set {
        mayIncrease_ = value;
      }
    }

    /// <summary>Field number for the "orig_order_id" field.</summary>
    public const int OrigOrderIdFieldNumber = 327;
    private pb::ByteString origOrderId_ = pb::ByteString.Empty;
    /// <summary>
    /// from v129: the auto-generated order_id of the first order in chain
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OrigOrderId {
      get { return origOrderId_; }
      set {
        origOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderClientId != other.OrderClientId) return false;
      if (OrderTimestamp != other.OrderTimestamp) return false;
      if (OrderTraderId != other.OrderTraderId) return false;
      if (OrderType != other.OrderType) return false;
      if (Side != other.Side) return false;
      if (Leverage != other.Leverage) return false;
      if (Duration != other.Duration) return false;
      if (!object.Equals(Price, other.Price)) return false;
      if (!object.Equals(Quantity, other.Quantity)) return false;
      if (!object.Equals(PaidPrice, other.PaidPrice)) return false;
      if (!object.Equals(Volume, other.Volume)) return false;
      if (ContractId != other.ContractId) return false;
      if (OldClientId != other.OldClientId) return false;
      if (OrigClientId != other.OrigClientId) return false;
      if (OpenTime != other.OpenTime) return false;
      if (!object.Equals(OrigQuantity, other.OrigQuantity)) return false;
      if (IsClosing != other.IsClosing) return false;
      if (MayIncrease != other.MayIncrease) return false;
      if (OrigOrderId != other.OrigOrderId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderClientId.Length != 0) hash ^= OrderClientId.GetHashCode();
      if (OrderTimestamp != 0L) hash ^= OrderTimestamp.GetHashCode();
      if (OrderTraderId != 0) hash ^= OrderTraderId.GetHashCode();
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) hash ^= OrderType.GetHashCode();
      if (Side != global::DigitexWire.OrderSide.SideUndefined) hash ^= Side.GetHashCode();
      if (Leverage != 0) hash ^= Leverage.GetHashCode();
      if (Duration != global::DigitexWire.OrderDuration.DurationUndefined) hash ^= Duration.GetHashCode();
      if (price_ != null) hash ^= Price.GetHashCode();
      if (quantity_ != null) hash ^= Quantity.GetHashCode();
      if (paidPrice_ != null) hash ^= PaidPrice.GetHashCode();
      if (volume_ != null) hash ^= Volume.GetHashCode();
      if (ContractId != 0UL) hash ^= ContractId.GetHashCode();
      if (OldClientId.Length != 0) hash ^= OldClientId.GetHashCode();
      if (OrigClientId.Length != 0) hash ^= OrigClientId.GetHashCode();
      if (OpenTime != 0L) hash ^= OpenTime.GetHashCode();
      if (origQuantity_ != null) hash ^= OrigQuantity.GetHashCode();
      if (IsClosing != 0) hash ^= IsClosing.GetHashCode();
      if (MayIncrease != 0) hash ^= MayIncrease.GetHashCode();
      if (OrigOrderId.Length != 0) hash ^= OrigOrderId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) OrderType);
      }
      if (Side != global::DigitexWire.OrderSide.SideUndefined) {
        output.WriteRawTag(136, 2);
        output.WriteEnum((int) Side);
      }
      if (Leverage != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(Leverage);
      }
      if (Duration != global::DigitexWire.OrderDuration.DurationUndefined) {
        output.WriteRawTag(152, 2);
        output.WriteEnum((int) Duration);
      }
      if (price_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(Price);
      }
      if (quantity_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Quantity);
      }
      if (ContractId != 0UL) {
        output.WriteRawTag(200, 2);
        output.WriteUInt64(ContractId);
      }
      if (paidPrice_ != null) {
        output.WriteRawTag(146, 4);
        output.WriteMessage(PaidPrice);
      }
      if (OrderClientId.Length != 0) {
        output.WriteRawTag(186, 4);
        output.WriteBytes(OrderClientId);
      }
      if (OrderTimestamp != 0L) {
        output.WriteRawTag(192, 4);
        output.WriteInt64(OrderTimestamp);
      }
      if (OrderTraderId != 0) {
        output.WriteRawTag(200, 4);
        output.WriteUInt32(OrderTraderId);
      }
      if (OldClientId.Length != 0) {
        output.WriteRawTag(202, 9);
        output.WriteBytes(OldClientId);
      }
      if (OrigClientId.Length != 0) {
        output.WriteRawTag(226, 12);
        output.WriteBytes(OrigClientId);
      }
      if (OpenTime != 0L) {
        output.WriteRawTag(232, 12);
        output.WriteInt64(OpenTime);
      }
      if (origQuantity_ != null) {
        output.WriteRawTag(242, 12);
        output.WriteMessage(OrigQuantity);
      }
      if (volume_ != null) {
        output.WriteRawTag(186, 17);
        output.WriteMessage(Volume);
      }
      if (IsClosing != 0) {
        output.WriteRawTag(192, 17);
        output.WriteInt32(IsClosing);
      }
      if (MayIncrease != 0) {
        output.WriteRawTag(168, 18);
        output.WriteInt32(MayIncrease);
      }
      if (OrigOrderId.Length != 0) {
        output.WriteRawTag(186, 20);
        output.WriteBytes(OrigOrderId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) OrderType);
      }
      if (Side != global::DigitexWire.OrderSide.SideUndefined) {
        output.WriteRawTag(136, 2);
        output.WriteEnum((int) Side);
      }
      if (Leverage != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(Leverage);
      }
      if (Duration != global::DigitexWire.OrderDuration.DurationUndefined) {
        output.WriteRawTag(152, 2);
        output.WriteEnum((int) Duration);
      }
      if (price_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(Price);
      }
      if (quantity_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Quantity);
      }
      if (ContractId != 0UL) {
        output.WriteRawTag(200, 2);
        output.WriteUInt64(ContractId);
      }
      if (paidPrice_ != null) {
        output.WriteRawTag(146, 4);
        output.WriteMessage(PaidPrice);
      }
      if (OrderClientId.Length != 0) {
        output.WriteRawTag(186, 4);
        output.WriteBytes(OrderClientId);
      }
      if (OrderTimestamp != 0L) {
        output.WriteRawTag(192, 4);
        output.WriteInt64(OrderTimestamp);
      }
      if (OrderTraderId != 0) {
        output.WriteRawTag(200, 4);
        output.WriteUInt32(OrderTraderId);
      }
      if (OldClientId.Length != 0) {
        output.WriteRawTag(202, 9);
        output.WriteBytes(OldClientId);
      }
      if (OrigClientId.Length != 0) {
        output.WriteRawTag(226, 12);
        output.WriteBytes(OrigClientId);
      }
      if (OpenTime != 0L) {
        output.WriteRawTag(232, 12);
        output.WriteInt64(OpenTime);
      }
      if (origQuantity_ != null) {
        output.WriteRawTag(242, 12);
        output.WriteMessage(OrigQuantity);
      }
      if (volume_ != null) {
        output.WriteRawTag(186, 17);
        output.WriteMessage(Volume);
      }
      if (IsClosing != 0) {
        output.WriteRawTag(192, 17);
        output.WriteInt32(IsClosing);
      }
      if (MayIncrease != 0) {
        output.WriteRawTag(168, 18);
        output.WriteInt32(MayIncrease);
      }
      if (OrigOrderId.Length != 0) {
        output.WriteRawTag(186, 20);
        output.WriteBytes(OrigOrderId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrderClientId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(OrderClientId);
      }
      if (OrderTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(OrderTimestamp);
      }
      if (OrderTraderId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OrderTraderId);
      }
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OrderType);
      }
      if (Side != global::DigitexWire.OrderSide.SideUndefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (Leverage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Leverage);
      }
      if (Duration != global::DigitexWire.OrderDuration.DurationUndefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Duration);
      }
      if (price_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Price);
      }
      if (quantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Quantity);
      }
      if (paidPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PaidPrice);
      }
      if (volume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Volume);
      }
      if (ContractId != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(ContractId);
      }
      if (OldClientId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(OldClientId);
      }
      if (OrigClientId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(OrigClientId);
      }
      if (OpenTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(OpenTime);
      }
      if (origQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrigQuantity);
      }
      if (IsClosing != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsClosing);
      }
      if (MayIncrease != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MayIncrease);
      }
      if (OrigOrderId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(OrigOrderId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderMessage other) {
      if (other == null) {
        return;
      }
      if (other.OrderClientId.Length != 0) {
        OrderClientId = other.OrderClientId;
      }
      if (other.OrderTimestamp != 0L) {
        OrderTimestamp = other.OrderTimestamp;
      }
      if (other.OrderTraderId != 0) {
        OrderTraderId = other.OrderTraderId;
      }
      if (other.OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        OrderType = other.OrderType;
      }
      if (other.Side != global::DigitexWire.OrderSide.SideUndefined) {
        Side = other.Side;
      }
      if (other.Leverage != 0) {
        Leverage = other.Leverage;
      }
      if (other.Duration != global::DigitexWire.OrderDuration.DurationUndefined) {
        Duration = other.Duration;
      }
      if (other.price_ != null) {
        if (price_ == null) {
          Price = new global::DigitexWire.Decimal();
        }
        Price.MergeFrom(other.Price);
      }
      if (other.quantity_ != null) {
        if (quantity_ == null) {
          Quantity = new global::DigitexWire.Decimal();
        }
        Quantity.MergeFrom(other.Quantity);
      }
      if (other.paidPrice_ != null) {
        if (paidPrice_ == null) {
          PaidPrice = new global::DigitexWire.Decimal();
        }
        PaidPrice.MergeFrom(other.PaidPrice);
      }
      if (other.volume_ != null) {
        if (volume_ == null) {
          Volume = new global::DigitexWire.Decimal();
        }
        Volume.MergeFrom(other.Volume);
      }
      if (other.ContractId != 0UL) {
        ContractId = other.ContractId;
      }
      if (other.OldClientId.Length != 0) {
        OldClientId = other.OldClientId;
      }
      if (other.OrigClientId.Length != 0) {
        OrigClientId = other.OrigClientId;
      }
      if (other.OpenTime != 0L) {
        OpenTime = other.OpenTime;
      }
      if (other.origQuantity_ != null) {
        if (origQuantity_ == null) {
          OrigQuantity = new global::DigitexWire.Decimal();
        }
        OrigQuantity.MergeFrom(other.OrigQuantity);
      }
      if (other.IsClosing != 0) {
        IsClosing = other.IsClosing;
      }
      if (other.MayIncrease != 0) {
        MayIncrease = other.MayIncrease;
      }
      if (other.OrigOrderId.Length != 0) {
        OrigOrderId = other.OrigOrderId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 256: {
            OrderType = (global::DigitexWire.OrderType) input.ReadEnum();
            break;
          }
          case 264: {
            Side = (global::DigitexWire.OrderSide) input.ReadEnum();
            break;
          }
          case 272: {
            Leverage = input.ReadUInt32();
            break;
          }
          case 280: {
            Duration = (global::DigitexWire.OrderDuration) input.ReadEnum();
            break;
          }
          case 306: {
            if (price_ == null) {
              Price = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Price);
            break;
          }
          case 314: {
            if (quantity_ == null) {
              Quantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Quantity);
            break;
          }
          case 328: {
            ContractId = input.ReadUInt64();
            break;
          }
          case 530: {
            if (paidPrice_ == null) {
              PaidPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PaidPrice);
            break;
          }
          case 570: {
            OrderClientId = input.ReadBytes();
            break;
          }
          case 576: {
            OrderTimestamp = input.ReadInt64();
            break;
          }
          case 584: {
            OrderTraderId = input.ReadUInt32();
            break;
          }
          case 1226: {
            OldClientId = input.ReadBytes();
            break;
          }
          case 1634: {
            OrigClientId = input.ReadBytes();
            break;
          }
          case 1640: {
            OpenTime = input.ReadInt64();
            break;
          }
          case 1650: {
            if (origQuantity_ == null) {
              OrigQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OrigQuantity);
            break;
          }
          case 2234: {
            if (volume_ == null) {
              Volume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Volume);
            break;
          }
          case 2240: {
            IsClosing = input.ReadInt32();
            break;
          }
          case 2344: {
            MayIncrease = input.ReadInt32();
            break;
          }
          case 2618: {
            OrigOrderId = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 256: {
            OrderType = (global::DigitexWire.OrderType) input.ReadEnum();
            break;
          }
          case 264: {
            Side = (global::DigitexWire.OrderSide) input.ReadEnum();
            break;
          }
          case 272: {
            Leverage = input.ReadUInt32();
            break;
          }
          case 280: {
            Duration = (global::DigitexWire.OrderDuration) input.ReadEnum();
            break;
          }
          case 306: {
            if (price_ == null) {
              Price = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Price);
            break;
          }
          case 314: {
            if (quantity_ == null) {
              Quantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Quantity);
            break;
          }
          case 328: {
            ContractId = input.ReadUInt64();
            break;
          }
          case 530: {
            if (paidPrice_ == null) {
              PaidPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PaidPrice);
            break;
          }
          case 570: {
            OrderClientId = input.ReadBytes();
            break;
          }
          case 576: {
            OrderTimestamp = input.ReadInt64();
            break;
          }
          case 584: {
            OrderTraderId = input.ReadUInt32();
            break;
          }
          case 1226: {
            OldClientId = input.ReadBytes();
            break;
          }
          case 1634: {
            OrigClientId = input.ReadBytes();
            break;
          }
          case 1640: {
            OpenTime = input.ReadInt64();
            break;
          }
          case 1650: {
            if (origQuantity_ == null) {
              OrigQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OrigQuantity);
            break;
          }
          case 2234: {
            if (volume_ == null) {
              Volume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Volume);
            break;
          }
          case 2240: {
            IsClosing = input.ReadInt32();
            break;
          }
          case 2344: {
            MayIncrease = input.ReadInt32();
            break;
          }
          case 2618: {
            OrigOrderId = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TraderStatusMessage : pb::IMessage<TraderStatusMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TraderStatusMessage> _parser = new pb::MessageParser<TraderStatusMessage>(() => new TraderStatusMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TraderStatusMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraderStatusMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraderStatusMessage(TraderStatusMessage other) : this() {
      traderBalance_ = other.traderBalance_ != null ? other.traderBalance_.Clone() : null;
      orderMargin_ = other.orderMargin_ != null ? other.orderMargin_.Clone() : null;
      positionMargin_ = other.positionMargin_ != null ? other.positionMargin_.Clone() : null;
      upnl_ = other.upnl_ != null ? other.upnl_.Clone() : null;
      pnl_ = other.pnl_ != null ? other.pnl_.Clone() : null;
      accumQuantity_ = other.accumQuantity_ != null ? other.accumQuantity_.Clone() : null;
      markPrice_ = other.markPrice_ != null ? other.markPrice_.Clone() : null;
      positionContracts_ = other.positionContracts_ != null ? other.positionContracts_.Clone() : null;
      positionVolume_ = other.positionVolume_ != null ? other.positionVolume_.Clone() : null;
      positionLiquidationVolume_ = other.positionLiquidationVolume_ != null ? other.positionLiquidationVolume_.Clone() : null;
      positionBankruptcyVolume_ = other.positionBankruptcyVolume_ != null ? other.positionBankruptcyVolume_.Clone() : null;
      positionType_ = other.positionType_;
      lastTradePrice_ = other.lastTradePrice_ != null ? other.lastTradePrice_.Clone() : null;
      lastTradeQuantity_ = other.lastTradeQuantity_ != null ? other.lastTradeQuantity_.Clone() : null;
      lastTradeTimestamp_ = other.lastTradeTimestamp_;
      buyOrderMargin_ = other.buyOrderMargin_ != null ? other.buyOrderMargin_.Clone() : null;
      sellOrderMargin_ = other.sellOrderMargin_ != null ? other.sellOrderMargin_.Clone() : null;
      trades_ = other.trades_.Clone();
      orders_ = other.orders_.Clone();
      leverage_ = other.leverage_;
      buyOrderQuantity_ = other.buyOrderQuantity_ != null ? other.buyOrderQuantity_.Clone() : null;
      sellOrderQuantity_ = other.sellOrderQuantity_ != null ? other.sellOrderQuantity_.Clone() : null;
      traderBalance2_ = other.traderBalance2_ != null ? other.traderBalance2_.Clone() : null;
      delayedActions_ = other.delayedActions_.Clone();
      fullPositionMargin_ = other.fullPositionMargin_ != null ? other.fullPositionMargin_.Clone() : null;
      fullBuyOrderMargin_ = other.fullBuyOrderMargin_ != null ? other.fullBuyOrderMargin_.Clone() : null;
      fullSellOrderMargin_ = other.fullSellOrderMargin_ != null ? other.fullSellOrderMargin_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraderStatusMessage Clone() {
      return new TraderStatusMessage(this);
    }

    /// <summary>Field number for the "trader_balance" field.</summary>
    public const int TraderBalanceFieldNumber = 51;
    private global::DigitexWire.Decimal traderBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal TraderBalance {
      get { return traderBalance_; }
      set {
        traderBalance_ = value;
      }
    }

    /// <summary>Field number for the "order_margin" field.</summary>
    public const int OrderMarginFieldNumber = 76;
    private global::DigitexWire.Decimal orderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal OrderMargin {
      get { return orderMargin_; }
      set {
        orderMargin_ = value;
      }
    }

    /// <summary>Field number for the "position_margin" field.</summary>
    public const int PositionMarginFieldNumber = 78;
    private global::DigitexWire.Decimal positionMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionMargin {
      get { return positionMargin_; }
      set {
        positionMargin_ = value;
      }
    }

    /// <summary>Field number for the "upnl" field.</summary>
    public const int UpnlFieldNumber = 79;
    private global::DigitexWire.Decimal upnl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Upnl {
      get { return upnl_; }
      set {
        upnl_ = value;
      }
    }

    /// <summary>Field number for the "pnl" field.</summary>
    public const int PnlFieldNumber = 154;
    private global::DigitexWire.Decimal pnl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Pnl {
      get { return pnl_; }
      set {
        pnl_ = value;
      }
    }

    /// <summary>Field number for the "accum_quantity" field.</summary>
    public const int AccumQuantityFieldNumber = 181;
    private global::DigitexWire.Decimal accumQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal AccumQuantity {
      get { return accumQuantity_; }
      set {
        accumQuantity_ = value;
      }
    }

    /// <summary>Field number for the "mark_price" field.</summary>
    public const int MarkPriceFieldNumber = 52;
    private global::DigitexWire.Decimal markPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal MarkPrice {
      get { return markPrice_; }
      set {
        markPrice_ = value;
      }
    }

    /// <summary>Field number for the "position_contracts" field.</summary>
    public const int PositionContractsFieldNumber = 104;
    private global::DigitexWire.Decimal positionContracts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionContracts {
      get { return positionContracts_; }
      set {
        positionContracts_ = value;
      }
    }

    /// <summary>Field number for the "position_volume" field.</summary>
    public const int PositionVolumeFieldNumber = 105;
    private global::DigitexWire.Decimal positionVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionVolume {
      get { return positionVolume_; }
      set {
        positionVolume_ = value;
      }
    }

    /// <summary>Field number for the "position_liquidation_volume" field.</summary>
    public const int PositionLiquidationVolumeFieldNumber = 106;
    private global::DigitexWire.Decimal positionLiquidationVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionLiquidationVolume {
      get { return positionLiquidationVolume_; }
      set {
        positionLiquidationVolume_ = value;
      }
    }

    /// <summary>Field number for the "position_bankruptcy_volume" field.</summary>
    public const int PositionBankruptcyVolumeFieldNumber = 117;
    private global::DigitexWire.Decimal positionBankruptcyVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionBankruptcyVolume {
      get { return positionBankruptcyVolume_; }
      set {
        positionBankruptcyVolume_ = value;
      }
    }

    /// <summary>Field number for the "position_type" field.</summary>
    public const int PositionTypeFieldNumber = 107;
    private global::DigitexWire.OrderPosition positionType_ = global::DigitexWire.OrderPosition.Undefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderPosition PositionType {
      get { return positionType_; }
      set {
        positionType_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_price" field.</summary>
    public const int LastTradePriceFieldNumber = 113;
    private global::DigitexWire.Decimal lastTradePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal LastTradePrice {
      get { return lastTradePrice_; }
      set {
        lastTradePrice_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_quantity" field.</summary>
    public const int LastTradeQuantityFieldNumber = 116;
    private global::DigitexWire.Decimal lastTradeQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal LastTradeQuantity {
      get { return lastTradeQuantity_; }
      set {
        lastTradeQuantity_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_timestamp" field.</summary>
    public const int LastTradeTimestampFieldNumber = 296;
    private long lastTradeTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastTradeTimestamp {
      get { return lastTradeTimestamp_; }
      set {
        lastTradeTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "buy_order_margin" field.</summary>
    public const int BuyOrderMarginFieldNumber = 118;
    private global::DigitexWire.Decimal buyOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal BuyOrderMargin {
      get { return buyOrderMargin_; }
      set {
        buyOrderMargin_ = value;
      }
    }

    /// <summary>Field number for the "sell_order_margin" field.</summary>
    public const int SellOrderMarginFieldNumber = 119;
    private global::DigitexWire.Decimal sellOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal SellOrderMargin {
      get { return sellOrderMargin_; }
      set {
        sellOrderMargin_ = value;
      }
    }

    /// <summary>Field number for the "trades" field.</summary>
    public const int TradesFieldNumber = 46;
    private static readonly pb::FieldCodec<global::DigitexWire.TradeMessage> _repeated_trades_codec
        = pb::FieldCodec.ForMessage(370, global::DigitexWire.TradeMessage.Parser);
    private readonly pbc::RepeatedField<global::DigitexWire.TradeMessage> trades_ = new pbc::RepeatedField<global::DigitexWire.TradeMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DigitexWire.TradeMessage> Trades {
      get { return trades_; }
    }

    /// <summary>Field number for the "orders" field.</summary>
    public const int OrdersFieldNumber = 70;
    private static readonly pb::FieldCodec<global::DigitexWire.OrderMessage> _repeated_orders_codec
        = pb::FieldCodec.ForMessage(562, global::DigitexWire.OrderMessage.Parser);
    private readonly pbc::RepeatedField<global::DigitexWire.OrderMessage> orders_ = new pbc::RepeatedField<global::DigitexWire.OrderMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DigitexWire.OrderMessage> Orders {
      get { return orders_; }
    }

    /// <summary>Field number for the "leverage" field.</summary>
    public const int LeverageFieldNumber = 34;
    private uint leverage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Leverage {
      get { return leverage_; }
      set {
        leverage_ = value;
      }
    }

    /// <summary>Field number for the "buy_order_quantity" field.</summary>
    public const int BuyOrderQuantityFieldNumber = 182;
    private global::DigitexWire.Decimal buyOrderQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal BuyOrderQuantity {
      get { return buyOrderQuantity_; }
      set {
        buyOrderQuantity_ = value;
      }
    }

    /// <summary>Field number for the "sell_order_quantity" field.</summary>
    public const int SellOrderQuantityFieldNumber = 183;
    private global::DigitexWire.Decimal sellOrderQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal SellOrderQuantity {
      get { return sellOrderQuantity_; }
      set {
        sellOrderQuantity_ = value;
      }
    }

    /// <summary>Field number for the "trader_balance_2" field.</summary>
    public const int TraderBalance2FieldNumber = 278;
    private global::DigitexWire.Decimal traderBalance2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal TraderBalance2 {
      get { return traderBalance2_; }
      set {
        traderBalance2_ = value;
      }
    }

    /// <summary>Field number for the "delayed_actions" field.</summary>
    public const int DelayedActionsFieldNumber = 288;
    private static readonly pb::FieldCodec<global::DigitexWire.DelayedActionMessage> _repeated_delayedActions_codec
        = pb::FieldCodec.ForMessage(2306, global::DigitexWire.DelayedActionMessage.Parser);
    private readonly pbc::RepeatedField<global::DigitexWire.DelayedActionMessage> delayedActions_ = new pbc::RepeatedField<global::DigitexWire.DelayedActionMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DigitexWire.DelayedActionMessage> DelayedActions {
      get { return delayedActions_; }
    }

    /// <summary>Field number for the "full_position_margin" field.</summary>
    public const int FullPositionMarginFieldNumber = 298;
    private global::DigitexWire.Decimal fullPositionMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FullPositionMargin {
      get { return fullPositionMargin_; }
      set {
        fullPositionMargin_ = value;
      }
    }

    /// <summary>Field number for the "full_buy_order_margin" field.</summary>
    public const int FullBuyOrderMarginFieldNumber = 299;
    private global::DigitexWire.Decimal fullBuyOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FullBuyOrderMargin {
      get { return fullBuyOrderMargin_; }
      set {
        fullBuyOrderMargin_ = value;
      }
    }

    /// <summary>Field number for the "full_sell_order_margin" field.</summary>
    public const int FullSellOrderMarginFieldNumber = 300;
    private global::DigitexWire.Decimal fullSellOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FullSellOrderMargin {
      get { return fullSellOrderMargin_; }
      set {
        fullSellOrderMargin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TraderStatusMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TraderStatusMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TraderBalance, other.TraderBalance)) return false;
      if (!object.Equals(OrderMargin, other.OrderMargin)) return false;
      if (!object.Equals(PositionMargin, other.PositionMargin)) return false;
      if (!object.Equals(Upnl, other.Upnl)) return false;
      if (!object.Equals(Pnl, other.Pnl)) return false;
      if (!object.Equals(AccumQuantity, other.AccumQuantity)) return false;
      if (!object.Equals(MarkPrice, other.MarkPrice)) return false;
      if (!object.Equals(PositionContracts, other.PositionContracts)) return false;
      if (!object.Equals(PositionVolume, other.PositionVolume)) return false;
      if (!object.Equals(PositionLiquidationVolume, other.PositionLiquidationVolume)) return false;
      if (!object.Equals(PositionBankruptcyVolume, other.PositionBankruptcyVolume)) return false;
      if (PositionType != other.PositionType) return false;
      if (!object.Equals(LastTradePrice, other.LastTradePrice)) return false;
      if (!object.Equals(LastTradeQuantity, other.LastTradeQuantity)) return false;
      if (LastTradeTimestamp != other.LastTradeTimestamp) return false;
      if (!object.Equals(BuyOrderMargin, other.BuyOrderMargin)) return false;
      if (!object.Equals(SellOrderMargin, other.SellOrderMargin)) return false;
      if(!trades_.Equals(other.trades_)) return false;
      if(!orders_.Equals(other.orders_)) return false;
      if (Leverage != other.Leverage) return false;
      if (!object.Equals(BuyOrderQuantity, other.BuyOrderQuantity)) return false;
      if (!object.Equals(SellOrderQuantity, other.SellOrderQuantity)) return false;
      if (!object.Equals(TraderBalance2, other.TraderBalance2)) return false;
      if(!delayedActions_.Equals(other.delayedActions_)) return false;
      if (!object.Equals(FullPositionMargin, other.FullPositionMargin)) return false;
      if (!object.Equals(FullBuyOrderMargin, other.FullBuyOrderMargin)) return false;
      if (!object.Equals(FullSellOrderMargin, other.FullSellOrderMargin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (traderBalance_ != null) hash ^= TraderBalance.GetHashCode();
      if (orderMargin_ != null) hash ^= OrderMargin.GetHashCode();
      if (positionMargin_ != null) hash ^= PositionMargin.GetHashCode();
      if (upnl_ != null) hash ^= Upnl.GetHashCode();
      if (pnl_ != null) hash ^= Pnl.GetHashCode();
      if (accumQuantity_ != null) hash ^= AccumQuantity.GetHashCode();
      if (markPrice_ != null) hash ^= MarkPrice.GetHashCode();
      if (positionContracts_ != null) hash ^= PositionContracts.GetHashCode();
      if (positionVolume_ != null) hash ^= PositionVolume.GetHashCode();
      if (positionLiquidationVolume_ != null) hash ^= PositionLiquidationVolume.GetHashCode();
      if (positionBankruptcyVolume_ != null) hash ^= PositionBankruptcyVolume.GetHashCode();
      if (PositionType != global::DigitexWire.OrderPosition.Undefined) hash ^= PositionType.GetHashCode();
      if (lastTradePrice_ != null) hash ^= LastTradePrice.GetHashCode();
      if (lastTradeQuantity_ != null) hash ^= LastTradeQuantity.GetHashCode();
      if (LastTradeTimestamp != 0L) hash ^= LastTradeTimestamp.GetHashCode();
      if (buyOrderMargin_ != null) hash ^= BuyOrderMargin.GetHashCode();
      if (sellOrderMargin_ != null) hash ^= SellOrderMargin.GetHashCode();
      hash ^= trades_.GetHashCode();
      hash ^= orders_.GetHashCode();
      if (Leverage != 0) hash ^= Leverage.GetHashCode();
      if (buyOrderQuantity_ != null) hash ^= BuyOrderQuantity.GetHashCode();
      if (sellOrderQuantity_ != null) hash ^= SellOrderQuantity.GetHashCode();
      if (traderBalance2_ != null) hash ^= TraderBalance2.GetHashCode();
      hash ^= delayedActions_.GetHashCode();
      if (fullPositionMargin_ != null) hash ^= FullPositionMargin.GetHashCode();
      if (fullBuyOrderMargin_ != null) hash ^= FullBuyOrderMargin.GetHashCode();
      if (fullSellOrderMargin_ != null) hash ^= FullSellOrderMargin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Leverage != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(Leverage);
      }
      trades_.WriteTo(output, _repeated_trades_codec);
      if (traderBalance_ != null) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(TraderBalance);
      }
      if (markPrice_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(MarkPrice);
      }
      orders_.WriteTo(output, _repeated_orders_codec);
      if (orderMargin_ != null) {
        output.WriteRawTag(226, 4);
        output.WriteMessage(OrderMargin);
      }
      if (positionMargin_ != null) {
        output.WriteRawTag(242, 4);
        output.WriteMessage(PositionMargin);
      }
      if (upnl_ != null) {
        output.WriteRawTag(250, 4);
        output.WriteMessage(Upnl);
      }
      if (positionContracts_ != null) {
        output.WriteRawTag(194, 6);
        output.WriteMessage(PositionContracts);
      }
      if (positionVolume_ != null) {
        output.WriteRawTag(202, 6);
        output.WriteMessage(PositionVolume);
      }
      if (positionLiquidationVolume_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(PositionLiquidationVolume);
      }
      if (PositionType != global::DigitexWire.OrderPosition.Undefined) {
        output.WriteRawTag(216, 6);
        output.WriteEnum((int) PositionType);
      }
      if (lastTradePrice_ != null) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(LastTradePrice);
      }
      if (lastTradeQuantity_ != null) {
        output.WriteRawTag(162, 7);
        output.WriteMessage(LastTradeQuantity);
      }
      if (positionBankruptcyVolume_ != null) {
        output.WriteRawTag(170, 7);
        output.WriteMessage(PositionBankruptcyVolume);
      }
      if (buyOrderMargin_ != null) {
        output.WriteRawTag(178, 7);
        output.WriteMessage(BuyOrderMargin);
      }
      if (sellOrderMargin_ != null) {
        output.WriteRawTag(186, 7);
        output.WriteMessage(SellOrderMargin);
      }
      if (pnl_ != null) {
        output.WriteRawTag(210, 9);
        output.WriteMessage(Pnl);
      }
      if (accumQuantity_ != null) {
        output.WriteRawTag(170, 11);
        output.WriteMessage(AccumQuantity);
      }
      if (buyOrderQuantity_ != null) {
        output.WriteRawTag(178, 11);
        output.WriteMessage(BuyOrderQuantity);
      }
      if (sellOrderQuantity_ != null) {
        output.WriteRawTag(186, 11);
        output.WriteMessage(SellOrderQuantity);
      }
      if (traderBalance2_ != null) {
        output.WriteRawTag(178, 17);
        output.WriteMessage(TraderBalance2);
      }
      delayedActions_.WriteTo(output, _repeated_delayedActions_codec);
      if (LastTradeTimestamp != 0L) {
        output.WriteRawTag(192, 18);
        output.WriteInt64(LastTradeTimestamp);
      }
      if (fullPositionMargin_ != null) {
        output.WriteRawTag(210, 18);
        output.WriteMessage(FullPositionMargin);
      }
      if (fullBuyOrderMargin_ != null) {
        output.WriteRawTag(218, 18);
        output.WriteMessage(FullBuyOrderMargin);
      }
      if (fullSellOrderMargin_ != null) {
        output.WriteRawTag(226, 18);
        output.WriteMessage(FullSellOrderMargin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Leverage != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(Leverage);
      }
      trades_.WriteTo(ref output, _repeated_trades_codec);
      if (traderBalance_ != null) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(TraderBalance);
      }
      if (markPrice_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(MarkPrice);
      }
      orders_.WriteTo(ref output, _repeated_orders_codec);
      if (orderMargin_ != null) {
        output.WriteRawTag(226, 4);
        output.WriteMessage(OrderMargin);
      }
      if (positionMargin_ != null) {
        output.WriteRawTag(242, 4);
        output.WriteMessage(PositionMargin);
      }
      if (upnl_ != null) {
        output.WriteRawTag(250, 4);
        output.WriteMessage(Upnl);
      }
      if (positionContracts_ != null) {
        output.WriteRawTag(194, 6);
        output.WriteMessage(PositionContracts);
      }
      if (positionVolume_ != null) {
        output.WriteRawTag(202, 6);
        output.WriteMessage(PositionVolume);
      }
      if (positionLiquidationVolume_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(PositionLiquidationVolume);
      }
      if (PositionType != global::DigitexWire.OrderPosition.Undefined) {
        output.WriteRawTag(216, 6);
        output.WriteEnum((int) PositionType);
      }
      if (lastTradePrice_ != null) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(LastTradePrice);
      }
      if (lastTradeQuantity_ != null) {
        output.WriteRawTag(162, 7);
        output.WriteMessage(LastTradeQuantity);
      }
      if (positionBankruptcyVolume_ != null) {
        output.WriteRawTag(170, 7);
        output.WriteMessage(PositionBankruptcyVolume);
      }
      if (buyOrderMargin_ != null) {
        output.WriteRawTag(178, 7);
        output.WriteMessage(BuyOrderMargin);
      }
      if (sellOrderMargin_ != null) {
        output.WriteRawTag(186, 7);
        output.WriteMessage(SellOrderMargin);
      }
      if (pnl_ != null) {
        output.WriteRawTag(210, 9);
        output.WriteMessage(Pnl);
      }
      if (accumQuantity_ != null) {
        output.WriteRawTag(170, 11);
        output.WriteMessage(AccumQuantity);
      }
      if (buyOrderQuantity_ != null) {
        output.WriteRawTag(178, 11);
        output.WriteMessage(BuyOrderQuantity);
      }
      if (sellOrderQuantity_ != null) {
        output.WriteRawTag(186, 11);
        output.WriteMessage(SellOrderQuantity);
      }
      if (traderBalance2_ != null) {
        output.WriteRawTag(178, 17);
        output.WriteMessage(TraderBalance2);
      }
      delayedActions_.WriteTo(ref output, _repeated_delayedActions_codec);
      if (LastTradeTimestamp != 0L) {
        output.WriteRawTag(192, 18);
        output.WriteInt64(LastTradeTimestamp);
      }
      if (fullPositionMargin_ != null) {
        output.WriteRawTag(210, 18);
        output.WriteMessage(FullPositionMargin);
      }
      if (fullBuyOrderMargin_ != null) {
        output.WriteRawTag(218, 18);
        output.WriteMessage(FullBuyOrderMargin);
      }
      if (fullSellOrderMargin_ != null) {
        output.WriteRawTag(226, 18);
        output.WriteMessage(FullSellOrderMargin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (traderBalance_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TraderBalance);
      }
      if (orderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderMargin);
      }
      if (positionMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionMargin);
      }
      if (upnl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Upnl);
      }
      if (pnl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Pnl);
      }
      if (accumQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AccumQuantity);
      }
      if (markPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MarkPrice);
      }
      if (positionContracts_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionContracts);
      }
      if (positionVolume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionVolume);
      }
      if (positionLiquidationVolume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionLiquidationVolume);
      }
      if (positionBankruptcyVolume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionBankruptcyVolume);
      }
      if (PositionType != global::DigitexWire.OrderPosition.Undefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PositionType);
      }
      if (lastTradePrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastTradePrice);
      }
      if (lastTradeQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastTradeQuantity);
      }
      if (LastTradeTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastTradeTimestamp);
      }
      if (buyOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BuyOrderMargin);
      }
      if (sellOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SellOrderMargin);
      }
      size += trades_.CalculateSize(_repeated_trades_codec);
      size += orders_.CalculateSize(_repeated_orders_codec);
      if (Leverage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Leverage);
      }
      if (buyOrderQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BuyOrderQuantity);
      }
      if (sellOrderQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SellOrderQuantity);
      }
      if (traderBalance2_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TraderBalance2);
      }
      size += delayedActions_.CalculateSize(_repeated_delayedActions_codec);
      if (fullPositionMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FullPositionMargin);
      }
      if (fullBuyOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FullBuyOrderMargin);
      }
      if (fullSellOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FullSellOrderMargin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TraderStatusMessage other) {
      if (other == null) {
        return;
      }
      if (other.traderBalance_ != null) {
        if (traderBalance_ == null) {
          TraderBalance = new global::DigitexWire.Decimal();
        }
        TraderBalance.MergeFrom(other.TraderBalance);
      }
      if (other.orderMargin_ != null) {
        if (orderMargin_ == null) {
          OrderMargin = new global::DigitexWire.Decimal();
        }
        OrderMargin.MergeFrom(other.OrderMargin);
      }
      if (other.positionMargin_ != null) {
        if (positionMargin_ == null) {
          PositionMargin = new global::DigitexWire.Decimal();
        }
        PositionMargin.MergeFrom(other.PositionMargin);
      }
      if (other.upnl_ != null) {
        if (upnl_ == null) {
          Upnl = new global::DigitexWire.Decimal();
        }
        Upnl.MergeFrom(other.Upnl);
      }
      if (other.pnl_ != null) {
        if (pnl_ == null) {
          Pnl = new global::DigitexWire.Decimal();
        }
        Pnl.MergeFrom(other.Pnl);
      }
      if (other.accumQuantity_ != null) {
        if (accumQuantity_ == null) {
          AccumQuantity = new global::DigitexWire.Decimal();
        }
        AccumQuantity.MergeFrom(other.AccumQuantity);
      }
      if (other.markPrice_ != null) {
        if (markPrice_ == null) {
          MarkPrice = new global::DigitexWire.Decimal();
        }
        MarkPrice.MergeFrom(other.MarkPrice);
      }
      if (other.positionContracts_ != null) {
        if (positionContracts_ == null) {
          PositionContracts = new global::DigitexWire.Decimal();
        }
        PositionContracts.MergeFrom(other.PositionContracts);
      }
      if (other.positionVolume_ != null) {
        if (positionVolume_ == null) {
          PositionVolume = new global::DigitexWire.Decimal();
        }
        PositionVolume.MergeFrom(other.PositionVolume);
      }
      if (other.positionLiquidationVolume_ != null) {
        if (positionLiquidationVolume_ == null) {
          PositionLiquidationVolume = new global::DigitexWire.Decimal();
        }
        PositionLiquidationVolume.MergeFrom(other.PositionLiquidationVolume);
      }
      if (other.positionBankruptcyVolume_ != null) {
        if (positionBankruptcyVolume_ == null) {
          PositionBankruptcyVolume = new global::DigitexWire.Decimal();
        }
        PositionBankruptcyVolume.MergeFrom(other.PositionBankruptcyVolume);
      }
      if (other.PositionType != global::DigitexWire.OrderPosition.Undefined) {
        PositionType = other.PositionType;
      }
      if (other.lastTradePrice_ != null) {
        if (lastTradePrice_ == null) {
          LastTradePrice = new global::DigitexWire.Decimal();
        }
        LastTradePrice.MergeFrom(other.LastTradePrice);
      }
      if (other.lastTradeQuantity_ != null) {
        if (lastTradeQuantity_ == null) {
          LastTradeQuantity = new global::DigitexWire.Decimal();
        }
        LastTradeQuantity.MergeFrom(other.LastTradeQuantity);
      }
      if (other.LastTradeTimestamp != 0L) {
        LastTradeTimestamp = other.LastTradeTimestamp;
      }
      if (other.buyOrderMargin_ != null) {
        if (buyOrderMargin_ == null) {
          BuyOrderMargin = new global::DigitexWire.Decimal();
        }
        BuyOrderMargin.MergeFrom(other.BuyOrderMargin);
      }
      if (other.sellOrderMargin_ != null) {
        if (sellOrderMargin_ == null) {
          SellOrderMargin = new global::DigitexWire.Decimal();
        }
        SellOrderMargin.MergeFrom(other.SellOrderMargin);
      }
      trades_.Add(other.trades_);
      orders_.Add(other.orders_);
      if (other.Leverage != 0) {
        Leverage = other.Leverage;
      }
      if (other.buyOrderQuantity_ != null) {
        if (buyOrderQuantity_ == null) {
          BuyOrderQuantity = new global::DigitexWire.Decimal();
        }
        BuyOrderQuantity.MergeFrom(other.BuyOrderQuantity);
      }
      if (other.sellOrderQuantity_ != null) {
        if (sellOrderQuantity_ == null) {
          SellOrderQuantity = new global::DigitexWire.Decimal();
        }
        SellOrderQuantity.MergeFrom(other.SellOrderQuantity);
      }
      if (other.traderBalance2_ != null) {
        if (traderBalance2_ == null) {
          TraderBalance2 = new global::DigitexWire.Decimal();
        }
        TraderBalance2.MergeFrom(other.TraderBalance2);
      }
      delayedActions_.Add(other.delayedActions_);
      if (other.fullPositionMargin_ != null) {
        if (fullPositionMargin_ == null) {
          FullPositionMargin = new global::DigitexWire.Decimal();
        }
        FullPositionMargin.MergeFrom(other.FullPositionMargin);
      }
      if (other.fullBuyOrderMargin_ != null) {
        if (fullBuyOrderMargin_ == null) {
          FullBuyOrderMargin = new global::DigitexWire.Decimal();
        }
        FullBuyOrderMargin.MergeFrom(other.FullBuyOrderMargin);
      }
      if (other.fullSellOrderMargin_ != null) {
        if (fullSellOrderMargin_ == null) {
          FullSellOrderMargin = new global::DigitexWire.Decimal();
        }
        FullSellOrderMargin.MergeFrom(other.FullSellOrderMargin);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 272: {
            Leverage = input.ReadUInt32();
            break;
          }
          case 370: {
            trades_.AddEntriesFrom(input, _repeated_trades_codec);
            break;
          }
          case 410: {
            if (traderBalance_ == null) {
              TraderBalance = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TraderBalance);
            break;
          }
          case 418: {
            if (markPrice_ == null) {
              MarkPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(MarkPrice);
            break;
          }
          case 562: {
            orders_.AddEntriesFrom(input, _repeated_orders_codec);
            break;
          }
          case 610: {
            if (orderMargin_ == null) {
              OrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OrderMargin);
            break;
          }
          case 626: {
            if (positionMargin_ == null) {
              PositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionMargin);
            break;
          }
          case 634: {
            if (upnl_ == null) {
              Upnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Upnl);
            break;
          }
          case 834: {
            if (positionContracts_ == null) {
              PositionContracts = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionContracts);
            break;
          }
          case 842: {
            if (positionVolume_ == null) {
              PositionVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionVolume);
            break;
          }
          case 850: {
            if (positionLiquidationVolume_ == null) {
              PositionLiquidationVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionLiquidationVolume);
            break;
          }
          case 856: {
            PositionType = (global::DigitexWire.OrderPosition) input.ReadEnum();
            break;
          }
          case 906: {
            if (lastTradePrice_ == null) {
              LastTradePrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradePrice);
            break;
          }
          case 930: {
            if (lastTradeQuantity_ == null) {
              LastTradeQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradeQuantity);
            break;
          }
          case 938: {
            if (positionBankruptcyVolume_ == null) {
              PositionBankruptcyVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionBankruptcyVolume);
            break;
          }
          case 946: {
            if (buyOrderMargin_ == null) {
              BuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderMargin);
            break;
          }
          case 954: {
            if (sellOrderMargin_ == null) {
              SellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderMargin);
            break;
          }
          case 1234: {
            if (pnl_ == null) {
              Pnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Pnl);
            break;
          }
          case 1450: {
            if (accumQuantity_ == null) {
              AccumQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(AccumQuantity);
            break;
          }
          case 1458: {
            if (buyOrderQuantity_ == null) {
              BuyOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderQuantity);
            break;
          }
          case 1466: {
            if (sellOrderQuantity_ == null) {
              SellOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderQuantity);
            break;
          }
          case 2226: {
            if (traderBalance2_ == null) {
              TraderBalance2 = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TraderBalance2);
            break;
          }
          case 2306: {
            delayedActions_.AddEntriesFrom(input, _repeated_delayedActions_codec);
            break;
          }
          case 2368: {
            LastTradeTimestamp = input.ReadInt64();
            break;
          }
          case 2386: {
            if (fullPositionMargin_ == null) {
              FullPositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullPositionMargin);
            break;
          }
          case 2394: {
            if (fullBuyOrderMargin_ == null) {
              FullBuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullBuyOrderMargin);
            break;
          }
          case 2402: {
            if (fullSellOrderMargin_ == null) {
              FullSellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullSellOrderMargin);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 272: {
            Leverage = input.ReadUInt32();
            break;
          }
          case 370: {
            trades_.AddEntriesFrom(ref input, _repeated_trades_codec);
            break;
          }
          case 410: {
            if (traderBalance_ == null) {
              TraderBalance = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TraderBalance);
            break;
          }
          case 418: {
            if (markPrice_ == null) {
              MarkPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(MarkPrice);
            break;
          }
          case 562: {
            orders_.AddEntriesFrom(ref input, _repeated_orders_codec);
            break;
          }
          case 610: {
            if (orderMargin_ == null) {
              OrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OrderMargin);
            break;
          }
          case 626: {
            if (positionMargin_ == null) {
              PositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionMargin);
            break;
          }
          case 634: {
            if (upnl_ == null) {
              Upnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Upnl);
            break;
          }
          case 834: {
            if (positionContracts_ == null) {
              PositionContracts = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionContracts);
            break;
          }
          case 842: {
            if (positionVolume_ == null) {
              PositionVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionVolume);
            break;
          }
          case 850: {
            if (positionLiquidationVolume_ == null) {
              PositionLiquidationVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionLiquidationVolume);
            break;
          }
          case 856: {
            PositionType = (global::DigitexWire.OrderPosition) input.ReadEnum();
            break;
          }
          case 906: {
            if (lastTradePrice_ == null) {
              LastTradePrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradePrice);
            break;
          }
          case 930: {
            if (lastTradeQuantity_ == null) {
              LastTradeQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradeQuantity);
            break;
          }
          case 938: {
            if (positionBankruptcyVolume_ == null) {
              PositionBankruptcyVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionBankruptcyVolume);
            break;
          }
          case 946: {
            if (buyOrderMargin_ == null) {
              BuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderMargin);
            break;
          }
          case 954: {
            if (sellOrderMargin_ == null) {
              SellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderMargin);
            break;
          }
          case 1234: {
            if (pnl_ == null) {
              Pnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Pnl);
            break;
          }
          case 1450: {
            if (accumQuantity_ == null) {
              AccumQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(AccumQuantity);
            break;
          }
          case 1458: {
            if (buyOrderQuantity_ == null) {
              BuyOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderQuantity);
            break;
          }
          case 1466: {
            if (sellOrderQuantity_ == null) {
              SellOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderQuantity);
            break;
          }
          case 2226: {
            if (traderBalance2_ == null) {
              TraderBalance2 = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TraderBalance2);
            break;
          }
          case 2306: {
            delayedActions_.AddEntriesFrom(ref input, _repeated_delayedActions_codec);
            break;
          }
          case 2368: {
            LastTradeTimestamp = input.ReadInt64();
            break;
          }
          case 2386: {
            if (fullPositionMargin_ == null) {
              FullPositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullPositionMargin);
            break;
          }
          case 2394: {
            if (fullBuyOrderMargin_ == null) {
              FullBuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullBuyOrderMargin);
            break;
          }
          case 2402: {
            if (fullSellOrderMargin_ == null) {
              FullSellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullSellOrderMargin);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FundingMessage : pb::IMessage<FundingMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FundingMessage> _parser = new pb::MessageParser<FundingMessage>(() => new FundingMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FundingMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingMessage(FundingMessage other) : this() {
      trades_ = other.trades_.Clone();
      traderBalance_ = other.traderBalance_ != null ? other.traderBalance_.Clone() : null;
      orderMargin_ = other.orderMargin_ != null ? other.orderMargin_.Clone() : null;
      positionMargin_ = other.positionMargin_ != null ? other.positionMargin_.Clone() : null;
      upnl_ = other.upnl_ != null ? other.upnl_.Clone() : null;
      pnl_ = other.pnl_ != null ? other.pnl_.Clone() : null;
      accumQuantity_ = other.accumQuantity_ != null ? other.accumQuantity_.Clone() : null;
      positionContracts_ = other.positionContracts_ != null ? other.positionContracts_.Clone() : null;
      positionVolume_ = other.positionVolume_ != null ? other.positionVolume_.Clone() : null;
      positionLiquidationVolume_ = other.positionLiquidationVolume_ != null ? other.positionLiquidationVolume_.Clone() : null;
      positionBankruptcyVolume_ = other.positionBankruptcyVolume_ != null ? other.positionBankruptcyVolume_.Clone() : null;
      positionType_ = other.positionType_;
      buyOrderMargin_ = other.buyOrderMargin_ != null ? other.buyOrderMargin_.Clone() : null;
      sellOrderMargin_ = other.sellOrderMargin_ != null ? other.sellOrderMargin_.Clone() : null;
      payoutPerContract_ = other.payoutPerContract_ != null ? other.payoutPerContract_.Clone() : null;
      payout_ = other.payout_ != null ? other.payout_.Clone() : null;
      lastTradePrice_ = other.lastTradePrice_ != null ? other.lastTradePrice_.Clone() : null;
      lastTradeQuantity_ = other.lastTradeQuantity_ != null ? other.lastTradeQuantity_.Clone() : null;
      lastTradeTimestamp_ = other.lastTradeTimestamp_;
      markPrice_ = other.markPrice_ != null ? other.markPrice_.Clone() : null;
      positionMarginChange_ = other.positionMarginChange_ != null ? other.positionMarginChange_.Clone() : null;
      buyOrderQuantity_ = other.buyOrderQuantity_ != null ? other.buyOrderQuantity_.Clone() : null;
      sellOrderQuantity_ = other.sellOrderQuantity_ != null ? other.sellOrderQuantity_.Clone() : null;
      fullPositionMargin_ = other.fullPositionMargin_ != null ? other.fullPositionMargin_.Clone() : null;
      fullBuyOrderMargin_ = other.fullBuyOrderMargin_ != null ? other.fullBuyOrderMargin_.Clone() : null;
      fullSellOrderMargin_ = other.fullSellOrderMargin_ != null ? other.fullSellOrderMargin_.Clone() : null;
      fundingTime_ = other.fundingTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingMessage Clone() {
      return new FundingMessage(this);
    }

    /// <summary>Field number for the "trades" field.</summary>
    public const int TradesFieldNumber = 46;
    private static readonly pb::FieldCodec<global::DigitexWire.TradeMessage> _repeated_trades_codec
        = pb::FieldCodec.ForMessage(370, global::DigitexWire.TradeMessage.Parser);
    private readonly pbc::RepeatedField<global::DigitexWire.TradeMessage> trades_ = new pbc::RepeatedField<global::DigitexWire.TradeMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DigitexWire.TradeMessage> Trades {
      get { return trades_; }
    }

    /// <summary>Field number for the "trader_balance" field.</summary>
    public const int TraderBalanceFieldNumber = 51;
    private global::DigitexWire.Decimal traderBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal TraderBalance {
      get { return traderBalance_; }
      set {
        traderBalance_ = value;
      }
    }

    /// <summary>Field number for the "order_margin" field.</summary>
    public const int OrderMarginFieldNumber = 76;
    private global::DigitexWire.Decimal orderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal OrderMargin {
      get { return orderMargin_; }
      set {
        orderMargin_ = value;
      }
    }

    /// <summary>Field number for the "position_margin" field.</summary>
    public const int PositionMarginFieldNumber = 78;
    private global::DigitexWire.Decimal positionMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionMargin {
      get { return positionMargin_; }
      set {
        positionMargin_ = value;
      }
    }

    /// <summary>Field number for the "upnl" field.</summary>
    public const int UpnlFieldNumber = 79;
    private global::DigitexWire.Decimal upnl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Upnl {
      get { return upnl_; }
      set {
        upnl_ = value;
      }
    }

    /// <summary>Field number for the "pnl" field.</summary>
    public const int PnlFieldNumber = 154;
    private global::DigitexWire.Decimal pnl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Pnl {
      get { return pnl_; }
      set {
        pnl_ = value;
      }
    }

    /// <summary>Field number for the "accum_quantity" field.</summary>
    public const int AccumQuantityFieldNumber = 181;
    private global::DigitexWire.Decimal accumQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal AccumQuantity {
      get { return accumQuantity_; }
      set {
        accumQuantity_ = value;
      }
    }

    /// <summary>Field number for the "position_contracts" field.</summary>
    public const int PositionContractsFieldNumber = 104;
    private global::DigitexWire.Decimal positionContracts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionContracts {
      get { return positionContracts_; }
      set {
        positionContracts_ = value;
      }
    }

    /// <summary>Field number for the "position_volume" field.</summary>
    public const int PositionVolumeFieldNumber = 105;
    private global::DigitexWire.Decimal positionVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionVolume {
      get { return positionVolume_; }
      set {
        positionVolume_ = value;
      }
    }

    /// <summary>Field number for the "position_liquidation_volume" field.</summary>
    public const int PositionLiquidationVolumeFieldNumber = 106;
    private global::DigitexWire.Decimal positionLiquidationVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionLiquidationVolume {
      get { return positionLiquidationVolume_; }
      set {
        positionLiquidationVolume_ = value;
      }
    }

    /// <summary>Field number for the "position_bankruptcy_volume" field.</summary>
    public const int PositionBankruptcyVolumeFieldNumber = 117;
    private global::DigitexWire.Decimal positionBankruptcyVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionBankruptcyVolume {
      get { return positionBankruptcyVolume_; }
      set {
        positionBankruptcyVolume_ = value;
      }
    }

    /// <summary>Field number for the "position_type" field.</summary>
    public const int PositionTypeFieldNumber = 107;
    private global::DigitexWire.OrderPosition positionType_ = global::DigitexWire.OrderPosition.Undefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderPosition PositionType {
      get { return positionType_; }
      set {
        positionType_ = value;
      }
    }

    /// <summary>Field number for the "buy_order_margin" field.</summary>
    public const int BuyOrderMarginFieldNumber = 118;
    private global::DigitexWire.Decimal buyOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal BuyOrderMargin {
      get { return buyOrderMargin_; }
      set {
        buyOrderMargin_ = value;
      }
    }

    /// <summary>Field number for the "sell_order_margin" field.</summary>
    public const int SellOrderMarginFieldNumber = 119;
    private global::DigitexWire.Decimal sellOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal SellOrderMargin {
      get { return sellOrderMargin_; }
      set {
        sellOrderMargin_ = value;
      }
    }

    /// <summary>Field number for the "payout_per_contract" field.</summary>
    public const int PayoutPerContractFieldNumber = 102;
    private global::DigitexWire.Decimal payoutPerContract_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PayoutPerContract {
      get { return payoutPerContract_; }
      set {
        payoutPerContract_ = value;
      }
    }

    /// <summary>Field number for the "payout" field.</summary>
    public const int PayoutFieldNumber = 101;
    private global::DigitexWire.Decimal payout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Payout {
      get { return payout_; }
      set {
        payout_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_price" field.</summary>
    public const int LastTradePriceFieldNumber = 113;
    private global::DigitexWire.Decimal lastTradePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal LastTradePrice {
      get { return lastTradePrice_; }
      set {
        lastTradePrice_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_quantity" field.</summary>
    public const int LastTradeQuantityFieldNumber = 116;
    private global::DigitexWire.Decimal lastTradeQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal LastTradeQuantity {
      get { return lastTradeQuantity_; }
      set {
        lastTradeQuantity_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_timestamp" field.</summary>
    public const int LastTradeTimestampFieldNumber = 296;
    private long lastTradeTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastTradeTimestamp {
      get { return lastTradeTimestamp_; }
      set {
        lastTradeTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "mark_price" field.</summary>
    public const int MarkPriceFieldNumber = 52;
    private global::DigitexWire.Decimal markPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal MarkPrice {
      get { return markPrice_; }
      set {
        markPrice_ = value;
      }
    }

    /// <summary>Field number for the "position_margin_change" field.</summary>
    public const int PositionMarginChangeFieldNumber = 163;
    private global::DigitexWire.Decimal positionMarginChange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionMarginChange {
      get { return positionMarginChange_; }
      set {
        positionMarginChange_ = value;
      }
    }

    /// <summary>Field number for the "buy_order_quantity" field.</summary>
    public const int BuyOrderQuantityFieldNumber = 182;
    private global::DigitexWire.Decimal buyOrderQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal BuyOrderQuantity {
      get { return buyOrderQuantity_; }
      set {
        buyOrderQuantity_ = value;
      }
    }

    /// <summary>Field number for the "sell_order_quantity" field.</summary>
    public const int SellOrderQuantityFieldNumber = 183;
    private global::DigitexWire.Decimal sellOrderQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal SellOrderQuantity {
      get { return sellOrderQuantity_; }
      set {
        sellOrderQuantity_ = value;
      }
    }

    /// <summary>Field number for the "full_position_margin" field.</summary>
    public const int FullPositionMarginFieldNumber = 298;
    private global::DigitexWire.Decimal fullPositionMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FullPositionMargin {
      get { return fullPositionMargin_; }
      set {
        fullPositionMargin_ = value;
      }
    }

    /// <summary>Field number for the "full_buy_order_margin" field.</summary>
    public const int FullBuyOrderMarginFieldNumber = 299;
    private global::DigitexWire.Decimal fullBuyOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FullBuyOrderMargin {
      get { return fullBuyOrderMargin_; }
      set {
        fullBuyOrderMargin_ = value;
      }
    }

    /// <summary>Field number for the "full_sell_order_margin" field.</summary>
    public const int FullSellOrderMarginFieldNumber = 300;
    private global::DigitexWire.Decimal fullSellOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FullSellOrderMargin {
      get { return fullSellOrderMargin_; }
      set {
        fullSellOrderMargin_ = value;
      }
    }

    /// <summary>Field number for the "funding_time" field.</summary>
    public const int FundingTimeFieldNumber = 127;
    private long fundingTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FundingTime {
      get { return fundingTime_; }
      set {
        fundingTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FundingMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FundingMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!trades_.Equals(other.trades_)) return false;
      if (!object.Equals(TraderBalance, other.TraderBalance)) return false;
      if (!object.Equals(OrderMargin, other.OrderMargin)) return false;
      if (!object.Equals(PositionMargin, other.PositionMargin)) return false;
      if (!object.Equals(Upnl, other.Upnl)) return false;
      if (!object.Equals(Pnl, other.Pnl)) return false;
      if (!object.Equals(AccumQuantity, other.AccumQuantity)) return false;
      if (!object.Equals(PositionContracts, other.PositionContracts)) return false;
      if (!object.Equals(PositionVolume, other.PositionVolume)) return false;
      if (!object.Equals(PositionLiquidationVolume, other.PositionLiquidationVolume)) return false;
      if (!object.Equals(PositionBankruptcyVolume, other.PositionBankruptcyVolume)) return false;
      if (PositionType != other.PositionType) return false;
      if (!object.Equals(BuyOrderMargin, other.BuyOrderMargin)) return false;
      if (!object.Equals(SellOrderMargin, other.SellOrderMargin)) return false;
      if (!object.Equals(PayoutPerContract, other.PayoutPerContract)) return false;
      if (!object.Equals(Payout, other.Payout)) return false;
      if (!object.Equals(LastTradePrice, other.LastTradePrice)) return false;
      if (!object.Equals(LastTradeQuantity, other.LastTradeQuantity)) return false;
      if (LastTradeTimestamp != other.LastTradeTimestamp) return false;
      if (!object.Equals(MarkPrice, other.MarkPrice)) return false;
      if (!object.Equals(PositionMarginChange, other.PositionMarginChange)) return false;
      if (!object.Equals(BuyOrderQuantity, other.BuyOrderQuantity)) return false;
      if (!object.Equals(SellOrderQuantity, other.SellOrderQuantity)) return false;
      if (!object.Equals(FullPositionMargin, other.FullPositionMargin)) return false;
      if (!object.Equals(FullBuyOrderMargin, other.FullBuyOrderMargin)) return false;
      if (!object.Equals(FullSellOrderMargin, other.FullSellOrderMargin)) return false;
      if (FundingTime != other.FundingTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= trades_.GetHashCode();
      if (traderBalance_ != null) hash ^= TraderBalance.GetHashCode();
      if (orderMargin_ != null) hash ^= OrderMargin.GetHashCode();
      if (positionMargin_ != null) hash ^= PositionMargin.GetHashCode();
      if (upnl_ != null) hash ^= Upnl.GetHashCode();
      if (pnl_ != null) hash ^= Pnl.GetHashCode();
      if (accumQuantity_ != null) hash ^= AccumQuantity.GetHashCode();
      if (positionContracts_ != null) hash ^= PositionContracts.GetHashCode();
      if (positionVolume_ != null) hash ^= PositionVolume.GetHashCode();
      if (positionLiquidationVolume_ != null) hash ^= PositionLiquidationVolume.GetHashCode();
      if (positionBankruptcyVolume_ != null) hash ^= PositionBankruptcyVolume.GetHashCode();
      if (PositionType != global::DigitexWire.OrderPosition.Undefined) hash ^= PositionType.GetHashCode();
      if (buyOrderMargin_ != null) hash ^= BuyOrderMargin.GetHashCode();
      if (sellOrderMargin_ != null) hash ^= SellOrderMargin.GetHashCode();
      if (payoutPerContract_ != null) hash ^= PayoutPerContract.GetHashCode();
      if (payout_ != null) hash ^= Payout.GetHashCode();
      if (lastTradePrice_ != null) hash ^= LastTradePrice.GetHashCode();
      if (lastTradeQuantity_ != null) hash ^= LastTradeQuantity.GetHashCode();
      if (LastTradeTimestamp != 0L) hash ^= LastTradeTimestamp.GetHashCode();
      if (markPrice_ != null) hash ^= MarkPrice.GetHashCode();
      if (positionMarginChange_ != null) hash ^= PositionMarginChange.GetHashCode();
      if (buyOrderQuantity_ != null) hash ^= BuyOrderQuantity.GetHashCode();
      if (sellOrderQuantity_ != null) hash ^= SellOrderQuantity.GetHashCode();
      if (fullPositionMargin_ != null) hash ^= FullPositionMargin.GetHashCode();
      if (fullBuyOrderMargin_ != null) hash ^= FullBuyOrderMargin.GetHashCode();
      if (fullSellOrderMargin_ != null) hash ^= FullSellOrderMargin.GetHashCode();
      if (FundingTime != 0L) hash ^= FundingTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      trades_.WriteTo(output, _repeated_trades_codec);
      if (traderBalance_ != null) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(TraderBalance);
      }
      if (markPrice_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(MarkPrice);
      }
      if (orderMargin_ != null) {
        output.WriteRawTag(226, 4);
        output.WriteMessage(OrderMargin);
      }
      if (positionMargin_ != null) {
        output.WriteRawTag(242, 4);
        output.WriteMessage(PositionMargin);
      }
      if (upnl_ != null) {
        output.WriteRawTag(250, 4);
        output.WriteMessage(Upnl);
      }
      if (payout_ != null) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(Payout);
      }
      if (payoutPerContract_ != null) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(PayoutPerContract);
      }
      if (positionContracts_ != null) {
        output.WriteRawTag(194, 6);
        output.WriteMessage(PositionContracts);
      }
      if (positionVolume_ != null) {
        output.WriteRawTag(202, 6);
        output.WriteMessage(PositionVolume);
      }
      if (positionLiquidationVolume_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(PositionLiquidationVolume);
      }
      if (PositionType != global::DigitexWire.OrderPosition.Undefined) {
        output.WriteRawTag(216, 6);
        output.WriteEnum((int) PositionType);
      }
      if (lastTradePrice_ != null) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(LastTradePrice);
      }
      if (lastTradeQuantity_ != null) {
        output.WriteRawTag(162, 7);
        output.WriteMessage(LastTradeQuantity);
      }
      if (positionBankruptcyVolume_ != null) {
        output.WriteRawTag(170, 7);
        output.WriteMessage(PositionBankruptcyVolume);
      }
      if (buyOrderMargin_ != null) {
        output.WriteRawTag(178, 7);
        output.WriteMessage(BuyOrderMargin);
      }
      if (sellOrderMargin_ != null) {
        output.WriteRawTag(186, 7);
        output.WriteMessage(SellOrderMargin);
      }
      if (FundingTime != 0L) {
        output.WriteRawTag(248, 7);
        output.WriteInt64(FundingTime);
      }
      if (pnl_ != null) {
        output.WriteRawTag(210, 9);
        output.WriteMessage(Pnl);
      }
      if (positionMarginChange_ != null) {
        output.WriteRawTag(154, 10);
        output.WriteMessage(PositionMarginChange);
      }
      if (accumQuantity_ != null) {
        output.WriteRawTag(170, 11);
        output.WriteMessage(AccumQuantity);
      }
      if (buyOrderQuantity_ != null) {
        output.WriteRawTag(178, 11);
        output.WriteMessage(BuyOrderQuantity);
      }
      if (sellOrderQuantity_ != null) {
        output.WriteRawTag(186, 11);
        output.WriteMessage(SellOrderQuantity);
      }
      if (LastTradeTimestamp != 0L) {
        output.WriteRawTag(192, 18);
        output.WriteInt64(LastTradeTimestamp);
      }
      if (fullPositionMargin_ != null) {
        output.WriteRawTag(210, 18);
        output.WriteMessage(FullPositionMargin);
      }
      if (fullBuyOrderMargin_ != null) {
        output.WriteRawTag(218, 18);
        output.WriteMessage(FullBuyOrderMargin);
      }
      if (fullSellOrderMargin_ != null) {
        output.WriteRawTag(226, 18);
        output.WriteMessage(FullSellOrderMargin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      trades_.WriteTo(ref output, _repeated_trades_codec);
      if (traderBalance_ != null) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(TraderBalance);
      }
      if (markPrice_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(MarkPrice);
      }
      if (orderMargin_ != null) {
        output.WriteRawTag(226, 4);
        output.WriteMessage(OrderMargin);
      }
      if (positionMargin_ != null) {
        output.WriteRawTag(242, 4);
        output.WriteMessage(PositionMargin);
      }
      if (upnl_ != null) {
        output.WriteRawTag(250, 4);
        output.WriteMessage(Upnl);
      }
      if (payout_ != null) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(Payout);
      }
      if (payoutPerContract_ != null) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(PayoutPerContract);
      }
      if (positionContracts_ != null) {
        output.WriteRawTag(194, 6);
        output.WriteMessage(PositionContracts);
      }
      if (positionVolume_ != null) {
        output.WriteRawTag(202, 6);
        output.WriteMessage(PositionVolume);
      }
      if (positionLiquidationVolume_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(PositionLiquidationVolume);
      }
      if (PositionType != global::DigitexWire.OrderPosition.Undefined) {
        output.WriteRawTag(216, 6);
        output.WriteEnum((int) PositionType);
      }
      if (lastTradePrice_ != null) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(LastTradePrice);
      }
      if (lastTradeQuantity_ != null) {
        output.WriteRawTag(162, 7);
        output.WriteMessage(LastTradeQuantity);
      }
      if (positionBankruptcyVolume_ != null) {
        output.WriteRawTag(170, 7);
        output.WriteMessage(PositionBankruptcyVolume);
      }
      if (buyOrderMargin_ != null) {
        output.WriteRawTag(178, 7);
        output.WriteMessage(BuyOrderMargin);
      }
      if (sellOrderMargin_ != null) {
        output.WriteRawTag(186, 7);
        output.WriteMessage(SellOrderMargin);
      }
      if (FundingTime != 0L) {
        output.WriteRawTag(248, 7);
        output.WriteInt64(FundingTime);
      }
      if (pnl_ != null) {
        output.WriteRawTag(210, 9);
        output.WriteMessage(Pnl);
      }
      if (positionMarginChange_ != null) {
        output.WriteRawTag(154, 10);
        output.WriteMessage(PositionMarginChange);
      }
      if (accumQuantity_ != null) {
        output.WriteRawTag(170, 11);
        output.WriteMessage(AccumQuantity);
      }
      if (buyOrderQuantity_ != null) {
        output.WriteRawTag(178, 11);
        output.WriteMessage(BuyOrderQuantity);
      }
      if (sellOrderQuantity_ != null) {
        output.WriteRawTag(186, 11);
        output.WriteMessage(SellOrderQuantity);
      }
      if (LastTradeTimestamp != 0L) {
        output.WriteRawTag(192, 18);
        output.WriteInt64(LastTradeTimestamp);
      }
      if (fullPositionMargin_ != null) {
        output.WriteRawTag(210, 18);
        output.WriteMessage(FullPositionMargin);
      }
      if (fullBuyOrderMargin_ != null) {
        output.WriteRawTag(218, 18);
        output.WriteMessage(FullBuyOrderMargin);
      }
      if (fullSellOrderMargin_ != null) {
        output.WriteRawTag(226, 18);
        output.WriteMessage(FullSellOrderMargin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += trades_.CalculateSize(_repeated_trades_codec);
      if (traderBalance_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TraderBalance);
      }
      if (orderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderMargin);
      }
      if (positionMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionMargin);
      }
      if (upnl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Upnl);
      }
      if (pnl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Pnl);
      }
      if (accumQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AccumQuantity);
      }
      if (positionContracts_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionContracts);
      }
      if (positionVolume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionVolume);
      }
      if (positionLiquidationVolume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionLiquidationVolume);
      }
      if (positionBankruptcyVolume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionBankruptcyVolume);
      }
      if (PositionType != global::DigitexWire.OrderPosition.Undefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PositionType);
      }
      if (buyOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BuyOrderMargin);
      }
      if (sellOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SellOrderMargin);
      }
      if (payoutPerContract_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PayoutPerContract);
      }
      if (payout_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Payout);
      }
      if (lastTradePrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastTradePrice);
      }
      if (lastTradeQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastTradeQuantity);
      }
      if (LastTradeTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastTradeTimestamp);
      }
      if (markPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MarkPrice);
      }
      if (positionMarginChange_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionMarginChange);
      }
      if (buyOrderQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BuyOrderQuantity);
      }
      if (sellOrderQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SellOrderQuantity);
      }
      if (fullPositionMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FullPositionMargin);
      }
      if (fullBuyOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FullBuyOrderMargin);
      }
      if (fullSellOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FullSellOrderMargin);
      }
      if (FundingTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(FundingTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FundingMessage other) {
      if (other == null) {
        return;
      }
      trades_.Add(other.trades_);
      if (other.traderBalance_ != null) {
        if (traderBalance_ == null) {
          TraderBalance = new global::DigitexWire.Decimal();
        }
        TraderBalance.MergeFrom(other.TraderBalance);
      }
      if (other.orderMargin_ != null) {
        if (orderMargin_ == null) {
          OrderMargin = new global::DigitexWire.Decimal();
        }
        OrderMargin.MergeFrom(other.OrderMargin);
      }
      if (other.positionMargin_ != null) {
        if (positionMargin_ == null) {
          PositionMargin = new global::DigitexWire.Decimal();
        }
        PositionMargin.MergeFrom(other.PositionMargin);
      }
      if (other.upnl_ != null) {
        if (upnl_ == null) {
          Upnl = new global::DigitexWire.Decimal();
        }
        Upnl.MergeFrom(other.Upnl);
      }
      if (other.pnl_ != null) {
        if (pnl_ == null) {
          Pnl = new global::DigitexWire.Decimal();
        }
        Pnl.MergeFrom(other.Pnl);
      }
      if (other.accumQuantity_ != null) {
        if (accumQuantity_ == null) {
          AccumQuantity = new global::DigitexWire.Decimal();
        }
        AccumQuantity.MergeFrom(other.AccumQuantity);
      }
      if (other.positionContracts_ != null) {
        if (positionContracts_ == null) {
          PositionContracts = new global::DigitexWire.Decimal();
        }
        PositionContracts.MergeFrom(other.PositionContracts);
      }
      if (other.positionVolume_ != null) {
        if (positionVolume_ == null) {
          PositionVolume = new global::DigitexWire.Decimal();
        }
        PositionVolume.MergeFrom(other.PositionVolume);
      }
      if (other.positionLiquidationVolume_ != null) {
        if (positionLiquidationVolume_ == null) {
          PositionLiquidationVolume = new global::DigitexWire.Decimal();
        }
        PositionLiquidationVolume.MergeFrom(other.PositionLiquidationVolume);
      }
      if (other.positionBankruptcyVolume_ != null) {
        if (positionBankruptcyVolume_ == null) {
          PositionBankruptcyVolume = new global::DigitexWire.Decimal();
        }
        PositionBankruptcyVolume.MergeFrom(other.PositionBankruptcyVolume);
      }
      if (other.PositionType != global::DigitexWire.OrderPosition.Undefined) {
        PositionType = other.PositionType;
      }
      if (other.buyOrderMargin_ != null) {
        if (buyOrderMargin_ == null) {
          BuyOrderMargin = new global::DigitexWire.Decimal();
        }
        BuyOrderMargin.MergeFrom(other.BuyOrderMargin);
      }
      if (other.sellOrderMargin_ != null) {
        if (sellOrderMargin_ == null) {
          SellOrderMargin = new global::DigitexWire.Decimal();
        }
        SellOrderMargin.MergeFrom(other.SellOrderMargin);
      }
      if (other.payoutPerContract_ != null) {
        if (payoutPerContract_ == null) {
          PayoutPerContract = new global::DigitexWire.Decimal();
        }
        PayoutPerContract.MergeFrom(other.PayoutPerContract);
      }
      if (other.payout_ != null) {
        if (payout_ == null) {
          Payout = new global::DigitexWire.Decimal();
        }
        Payout.MergeFrom(other.Payout);
      }
      if (other.lastTradePrice_ != null) {
        if (lastTradePrice_ == null) {
          LastTradePrice = new global::DigitexWire.Decimal();
        }
        LastTradePrice.MergeFrom(other.LastTradePrice);
      }
      if (other.lastTradeQuantity_ != null) {
        if (lastTradeQuantity_ == null) {
          LastTradeQuantity = new global::DigitexWire.Decimal();
        }
        LastTradeQuantity.MergeFrom(other.LastTradeQuantity);
      }
      if (other.LastTradeTimestamp != 0L) {
        LastTradeTimestamp = other.LastTradeTimestamp;
      }
      if (other.markPrice_ != null) {
        if (markPrice_ == null) {
          MarkPrice = new global::DigitexWire.Decimal();
        }
        MarkPrice.MergeFrom(other.MarkPrice);
      }
      if (other.positionMarginChange_ != null) {
        if (positionMarginChange_ == null) {
          PositionMarginChange = new global::DigitexWire.Decimal();
        }
        PositionMarginChange.MergeFrom(other.PositionMarginChange);
      }
      if (other.buyOrderQuantity_ != null) {
        if (buyOrderQuantity_ == null) {
          BuyOrderQuantity = new global::DigitexWire.Decimal();
        }
        BuyOrderQuantity.MergeFrom(other.BuyOrderQuantity);
      }
      if (other.sellOrderQuantity_ != null) {
        if (sellOrderQuantity_ == null) {
          SellOrderQuantity = new global::DigitexWire.Decimal();
        }
        SellOrderQuantity.MergeFrom(other.SellOrderQuantity);
      }
      if (other.fullPositionMargin_ != null) {
        if (fullPositionMargin_ == null) {
          FullPositionMargin = new global::DigitexWire.Decimal();
        }
        FullPositionMargin.MergeFrom(other.FullPositionMargin);
      }
      if (other.fullBuyOrderMargin_ != null) {
        if (fullBuyOrderMargin_ == null) {
          FullBuyOrderMargin = new global::DigitexWire.Decimal();
        }
        FullBuyOrderMargin.MergeFrom(other.FullBuyOrderMargin);
      }
      if (other.fullSellOrderMargin_ != null) {
        if (fullSellOrderMargin_ == null) {
          FullSellOrderMargin = new global::DigitexWire.Decimal();
        }
        FullSellOrderMargin.MergeFrom(other.FullSellOrderMargin);
      }
      if (other.FundingTime != 0L) {
        FundingTime = other.FundingTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 370: {
            trades_.AddEntriesFrom(input, _repeated_trades_codec);
            break;
          }
          case 410: {
            if (traderBalance_ == null) {
              TraderBalance = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TraderBalance);
            break;
          }
          case 418: {
            if (markPrice_ == null) {
              MarkPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(MarkPrice);
            break;
          }
          case 610: {
            if (orderMargin_ == null) {
              OrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OrderMargin);
            break;
          }
          case 626: {
            if (positionMargin_ == null) {
              PositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionMargin);
            break;
          }
          case 634: {
            if (upnl_ == null) {
              Upnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Upnl);
            break;
          }
          case 810: {
            if (payout_ == null) {
              Payout = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Payout);
            break;
          }
          case 818: {
            if (payoutPerContract_ == null) {
              PayoutPerContract = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PayoutPerContract);
            break;
          }
          case 834: {
            if (positionContracts_ == null) {
              PositionContracts = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionContracts);
            break;
          }
          case 842: {
            if (positionVolume_ == null) {
              PositionVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionVolume);
            break;
          }
          case 850: {
            if (positionLiquidationVolume_ == null) {
              PositionLiquidationVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionLiquidationVolume);
            break;
          }
          case 856: {
            PositionType = (global::DigitexWire.OrderPosition) input.ReadEnum();
            break;
          }
          case 906: {
            if (lastTradePrice_ == null) {
              LastTradePrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradePrice);
            break;
          }
          case 930: {
            if (lastTradeQuantity_ == null) {
              LastTradeQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradeQuantity);
            break;
          }
          case 938: {
            if (positionBankruptcyVolume_ == null) {
              PositionBankruptcyVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionBankruptcyVolume);
            break;
          }
          case 946: {
            if (buyOrderMargin_ == null) {
              BuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderMargin);
            break;
          }
          case 954: {
            if (sellOrderMargin_ == null) {
              SellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderMargin);
            break;
          }
          case 1016: {
            FundingTime = input.ReadInt64();
            break;
          }
          case 1234: {
            if (pnl_ == null) {
              Pnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Pnl);
            break;
          }
          case 1306: {
            if (positionMarginChange_ == null) {
              PositionMarginChange = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionMarginChange);
            break;
          }
          case 1450: {
            if (accumQuantity_ == null) {
              AccumQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(AccumQuantity);
            break;
          }
          case 1458: {
            if (buyOrderQuantity_ == null) {
              BuyOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderQuantity);
            break;
          }
          case 1466: {
            if (sellOrderQuantity_ == null) {
              SellOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderQuantity);
            break;
          }
          case 2368: {
            LastTradeTimestamp = input.ReadInt64();
            break;
          }
          case 2386: {
            if (fullPositionMargin_ == null) {
              FullPositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullPositionMargin);
            break;
          }
          case 2394: {
            if (fullBuyOrderMargin_ == null) {
              FullBuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullBuyOrderMargin);
            break;
          }
          case 2402: {
            if (fullSellOrderMargin_ == null) {
              FullSellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullSellOrderMargin);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 370: {
            trades_.AddEntriesFrom(ref input, _repeated_trades_codec);
            break;
          }
          case 410: {
            if (traderBalance_ == null) {
              TraderBalance = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TraderBalance);
            break;
          }
          case 418: {
            if (markPrice_ == null) {
              MarkPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(MarkPrice);
            break;
          }
          case 610: {
            if (orderMargin_ == null) {
              OrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OrderMargin);
            break;
          }
          case 626: {
            if (positionMargin_ == null) {
              PositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionMargin);
            break;
          }
          case 634: {
            if (upnl_ == null) {
              Upnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Upnl);
            break;
          }
          case 810: {
            if (payout_ == null) {
              Payout = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Payout);
            break;
          }
          case 818: {
            if (payoutPerContract_ == null) {
              PayoutPerContract = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PayoutPerContract);
            break;
          }
          case 834: {
            if (positionContracts_ == null) {
              PositionContracts = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionContracts);
            break;
          }
          case 842: {
            if (positionVolume_ == null) {
              PositionVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionVolume);
            break;
          }
          case 850: {
            if (positionLiquidationVolume_ == null) {
              PositionLiquidationVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionLiquidationVolume);
            break;
          }
          case 856: {
            PositionType = (global::DigitexWire.OrderPosition) input.ReadEnum();
            break;
          }
          case 906: {
            if (lastTradePrice_ == null) {
              LastTradePrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradePrice);
            break;
          }
          case 930: {
            if (lastTradeQuantity_ == null) {
              LastTradeQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradeQuantity);
            break;
          }
          case 938: {
            if (positionBankruptcyVolume_ == null) {
              PositionBankruptcyVolume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionBankruptcyVolume);
            break;
          }
          case 946: {
            if (buyOrderMargin_ == null) {
              BuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderMargin);
            break;
          }
          case 954: {
            if (sellOrderMargin_ == null) {
              SellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderMargin);
            break;
          }
          case 1016: {
            FundingTime = input.ReadInt64();
            break;
          }
          case 1234: {
            if (pnl_ == null) {
              Pnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Pnl);
            break;
          }
          case 1306: {
            if (positionMarginChange_ == null) {
              PositionMarginChange = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionMarginChange);
            break;
          }
          case 1450: {
            if (accumQuantity_ == null) {
              AccumQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(AccumQuantity);
            break;
          }
          case 1458: {
            if (buyOrderQuantity_ == null) {
              BuyOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderQuantity);
            break;
          }
          case 1466: {
            if (sellOrderQuantity_ == null) {
              SellOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderQuantity);
            break;
          }
          case 2368: {
            LastTradeTimestamp = input.ReadInt64();
            break;
          }
          case 2386: {
            if (fullPositionMargin_ == null) {
              FullPositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullPositionMargin);
            break;
          }
          case 2394: {
            if (fullBuyOrderMargin_ == null) {
              FullBuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullBuyOrderMargin);
            break;
          }
          case 2402: {
            if (fullSellOrderMargin_ == null) {
              FullSellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullSellOrderMargin);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OHLCVMessage : pb::IMessage<OHLCVMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OHLCVMessage> _parser = new pb::MessageParser<OHLCVMessage>(() => new OHLCVMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OHLCVMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OHLCVMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OHLCVMessage(OHLCVMessage other) : this() {
      openPrice_ = other.openPrice_ != null ? other.openPrice_.Clone() : null;
      highPrice_ = other.highPrice_ != null ? other.highPrice_.Clone() : null;
      lowPrice_ = other.lowPrice_ != null ? other.lowPrice_.Clone() : null;
      closePrice_ = other.closePrice_ != null ? other.closePrice_.Clone() : null;
      volume_ = other.volume_ != null ? other.volume_.Clone() : null;
      averageOraclePrice_ = other.averageOraclePrice_ != null ? other.averageOraclePrice_.Clone() : null;
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OHLCVMessage Clone() {
      return new OHLCVMessage(this);
    }

    /// <summary>Field number for the "open_price" field.</summary>
    public const int OpenPriceFieldNumber = 87;
    private global::DigitexWire.Decimal openPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal OpenPrice {
      get { return openPrice_; }
      set {
        openPrice_ = value;
      }
    }

    /// <summary>Field number for the "high_price" field.</summary>
    public const int HighPriceFieldNumber = 88;
    private global::DigitexWire.Decimal highPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal HighPrice {
      get { return highPrice_; }
      set {
        highPrice_ = value;
      }
    }

    /// <summary>Field number for the "low_price" field.</summary>
    public const int LowPriceFieldNumber = 89;
    private global::DigitexWire.Decimal lowPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal LowPrice {
      get { return lowPrice_; }
      set {
        lowPrice_ = value;
      }
    }

    /// <summary>Field number for the "close_price" field.</summary>
    public const int ClosePriceFieldNumber = 90;
    private global::DigitexWire.Decimal closePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal ClosePrice {
      get { return closePrice_; }
      set {
        closePrice_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 48;
    private global::DigitexWire.Decimal volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "average_oracle_price" field.</summary>
    public const int AverageOraclePriceFieldNumber = 130;
    private global::DigitexWire.Decimal averageOraclePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal AverageOraclePrice {
      get { return averageOraclePrice_; }
      set {
        averageOraclePrice_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OHLCVMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OHLCVMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OpenPrice, other.OpenPrice)) return false;
      if (!object.Equals(HighPrice, other.HighPrice)) return false;
      if (!object.Equals(LowPrice, other.LowPrice)) return false;
      if (!object.Equals(ClosePrice, other.ClosePrice)) return false;
      if (!object.Equals(Volume, other.Volume)) return false;
      if (!object.Equals(AverageOraclePrice, other.AverageOraclePrice)) return false;
      if (Timestamp != other.Timestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (openPrice_ != null) hash ^= OpenPrice.GetHashCode();
      if (highPrice_ != null) hash ^= HighPrice.GetHashCode();
      if (lowPrice_ != null) hash ^= LowPrice.GetHashCode();
      if (closePrice_ != null) hash ^= ClosePrice.GetHashCode();
      if (volume_ != null) hash ^= Volume.GetHashCode();
      if (averageOraclePrice_ != null) hash ^= AverageOraclePrice.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Timestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Timestamp);
      }
      if (volume_ != null) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(Volume);
      }
      if (openPrice_ != null) {
        output.WriteRawTag(186, 5);
        output.WriteMessage(OpenPrice);
      }
      if (highPrice_ != null) {
        output.WriteRawTag(194, 5);
        output.WriteMessage(HighPrice);
      }
      if (lowPrice_ != null) {
        output.WriteRawTag(202, 5);
        output.WriteMessage(LowPrice);
      }
      if (closePrice_ != null) {
        output.WriteRawTag(210, 5);
        output.WriteMessage(ClosePrice);
      }
      if (averageOraclePrice_ != null) {
        output.WriteRawTag(146, 8);
        output.WriteMessage(AverageOraclePrice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Timestamp);
      }
      if (volume_ != null) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(Volume);
      }
      if (openPrice_ != null) {
        output.WriteRawTag(186, 5);
        output.WriteMessage(OpenPrice);
      }
      if (highPrice_ != null) {
        output.WriteRawTag(194, 5);
        output.WriteMessage(HighPrice);
      }
      if (lowPrice_ != null) {
        output.WriteRawTag(202, 5);
        output.WriteMessage(LowPrice);
      }
      if (closePrice_ != null) {
        output.WriteRawTag(210, 5);
        output.WriteMessage(ClosePrice);
      }
      if (averageOraclePrice_ != null) {
        output.WriteRawTag(146, 8);
        output.WriteMessage(AverageOraclePrice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (openPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OpenPrice);
      }
      if (highPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HighPrice);
      }
      if (lowPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LowPrice);
      }
      if (closePrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ClosePrice);
      }
      if (volume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Volume);
      }
      if (averageOraclePrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AverageOraclePrice);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OHLCVMessage other) {
      if (other == null) {
        return;
      }
      if (other.openPrice_ != null) {
        if (openPrice_ == null) {
          OpenPrice = new global::DigitexWire.Decimal();
        }
        OpenPrice.MergeFrom(other.OpenPrice);
      }
      if (other.highPrice_ != null) {
        if (highPrice_ == null) {
          HighPrice = new global::DigitexWire.Decimal();
        }
        HighPrice.MergeFrom(other.HighPrice);
      }
      if (other.lowPrice_ != null) {
        if (lowPrice_ == null) {
          LowPrice = new global::DigitexWire.Decimal();
        }
        LowPrice.MergeFrom(other.LowPrice);
      }
      if (other.closePrice_ != null) {
        if (closePrice_ == null) {
          ClosePrice = new global::DigitexWire.Decimal();
        }
        ClosePrice.MergeFrom(other.ClosePrice);
      }
      if (other.volume_ != null) {
        if (volume_ == null) {
          Volume = new global::DigitexWire.Decimal();
        }
        Volume.MergeFrom(other.Volume);
      }
      if (other.averageOraclePrice_ != null) {
        if (averageOraclePrice_ == null) {
          AverageOraclePrice = new global::DigitexWire.Decimal();
        }
        AverageOraclePrice.MergeFrom(other.AverageOraclePrice);
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 386: {
            if (volume_ == null) {
              Volume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Volume);
            break;
          }
          case 698: {
            if (openPrice_ == null) {
              OpenPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OpenPrice);
            break;
          }
          case 706: {
            if (highPrice_ == null) {
              HighPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(HighPrice);
            break;
          }
          case 714: {
            if (lowPrice_ == null) {
              LowPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LowPrice);
            break;
          }
          case 722: {
            if (closePrice_ == null) {
              ClosePrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(ClosePrice);
            break;
          }
          case 1042: {
            if (averageOraclePrice_ == null) {
              AverageOraclePrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(AverageOraclePrice);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 16: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 386: {
            if (volume_ == null) {
              Volume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Volume);
            break;
          }
          case 698: {
            if (openPrice_ == null) {
              OpenPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OpenPrice);
            break;
          }
          case 706: {
            if (highPrice_ == null) {
              HighPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(HighPrice);
            break;
          }
          case 714: {
            if (lowPrice_ == null) {
              LowPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LowPrice);
            break;
          }
          case 722: {
            if (closePrice_ == null) {
              ClosePrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(ClosePrice);
            break;
          }
          case 1042: {
            if (averageOraclePrice_ == null) {
              AverageOraclePrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(AverageOraclePrice);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SubscribeMessage : pb::IMessage<SubscribeMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SubscribeMessage> _parser = new pb::MessageParser<SubscribeMessage>(() => new SubscribeMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscribeMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeMessage(SubscribeMessage other) : this() {
      subscribeMask_ = other.subscribeMask_;
      unsubscribeMask_ = other.unsubscribeMask_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeMessage Clone() {
      return new SubscribeMessage(this);
    }

    /// <summary>Field number for the "subscribe_mask" field.</summary>
    public const int SubscribeMaskFieldNumber = 94;
    private ulong subscribeMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SubscribeMask {
      get { return subscribeMask_; }
      set {
        subscribeMask_ = value;
      }
    }

    /// <summary>Field number for the "unsubscribe_mask" field.</summary>
    public const int UnsubscribeMaskFieldNumber = 95;
    private ulong unsubscribeMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UnsubscribeMask {
      get { return unsubscribeMask_; }
      set {
        unsubscribeMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscribeMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscribeMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubscribeMask != other.SubscribeMask) return false;
      if (UnsubscribeMask != other.UnsubscribeMask) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubscribeMask != 0UL) hash ^= SubscribeMask.GetHashCode();
      if (UnsubscribeMask != 0UL) hash ^= UnsubscribeMask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SubscribeMask != 0UL) {
        output.WriteRawTag(240, 5);
        output.WriteUInt64(SubscribeMask);
      }
      if (UnsubscribeMask != 0UL) {
        output.WriteRawTag(248, 5);
        output.WriteUInt64(UnsubscribeMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SubscribeMask != 0UL) {
        output.WriteRawTag(240, 5);
        output.WriteUInt64(SubscribeMask);
      }
      if (UnsubscribeMask != 0UL) {
        output.WriteRawTag(248, 5);
        output.WriteUInt64(UnsubscribeMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubscribeMask != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(SubscribeMask);
      }
      if (UnsubscribeMask != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(UnsubscribeMask);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscribeMessage other) {
      if (other == null) {
        return;
      }
      if (other.SubscribeMask != 0UL) {
        SubscribeMask = other.SubscribeMask;
      }
      if (other.UnsubscribeMask != 0UL) {
        UnsubscribeMask = other.UnsubscribeMask;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 752: {
            SubscribeMask = input.ReadUInt64();
            break;
          }
          case 760: {
            UnsubscribeMask = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 752: {
            SubscribeMask = input.ReadUInt64();
            break;
          }
          case 760: {
            UnsubscribeMask = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SubscribeStatusMessage : pb::IMessage<SubscribeStatusMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SubscribeStatusMessage> _parser = new pb::MessageParser<SubscribeStatusMessage>(() => new SubscribeStatusMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscribeStatusMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeStatusMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeStatusMessage(SubscribeStatusMessage other) : this() {
      subscribeMask_ = other.subscribeMask_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeStatusMessage Clone() {
      return new SubscribeStatusMessage(this);
    }

    /// <summary>Field number for the "subscribe_mask" field.</summary>
    public const int SubscribeMaskFieldNumber = 94;
    private ulong subscribeMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SubscribeMask {
      get { return subscribeMask_; }
      set {
        subscribeMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscribeStatusMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscribeStatusMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubscribeMask != other.SubscribeMask) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubscribeMask != 0UL) hash ^= SubscribeMask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SubscribeMask != 0UL) {
        output.WriteRawTag(240, 5);
        output.WriteUInt64(SubscribeMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SubscribeMask != 0UL) {
        output.WriteRawTag(240, 5);
        output.WriteUInt64(SubscribeMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubscribeMask != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(SubscribeMask);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscribeStatusMessage other) {
      if (other == null) {
        return;
      }
      if (other.SubscribeMask != 0UL) {
        SubscribeMask = other.SubscribeMask;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 752: {
            SubscribeMask = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 752: {
            SubscribeMask = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CloseContractMessage : pb::IMessage<CloseContractMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CloseContractMessage> _parser = new pb::MessageParser<CloseContractMessage>(() => new CloseContractMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseContractMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseContractMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseContractMessage(CloseContractMessage other) : this() {
      contractId_ = other.contractId_;
      orderType_ = other.orderType_;
      price_ = other.price_ != null ? other.price_.Clone() : null;
      quantity_ = other.quantity_ != null ? other.quantity_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseContractMessage Clone() {
      return new CloseContractMessage(this);
    }

    /// <summary>Field number for the "contract_id" field.</summary>
    public const int ContractIdFieldNumber = 41;
    private ulong contractId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ContractId {
      get { return contractId_; }
      set {
        contractId_ = value;
      }
    }

    /// <summary>Field number for the "order_type" field.</summary>
    public const int OrderTypeFieldNumber = 32;
    private global::DigitexWire.OrderType orderType_ = global::DigitexWire.OrderType.TypeUndefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderType OrderType {
      get { return orderType_; }
      set {
        orderType_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 38;
    private global::DigitexWire.Decimal price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 39;
    private global::DigitexWire.Decimal quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseContractMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseContractMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContractId != other.ContractId) return false;
      if (OrderType != other.OrderType) return false;
      if (!object.Equals(Price, other.Price)) return false;
      if (!object.Equals(Quantity, other.Quantity)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ContractId != 0UL) hash ^= ContractId.GetHashCode();
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) hash ^= OrderType.GetHashCode();
      if (price_ != null) hash ^= Price.GetHashCode();
      if (quantity_ != null) hash ^= Quantity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) OrderType);
      }
      if (price_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(Price);
      }
      if (quantity_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Quantity);
      }
      if (ContractId != 0UL) {
        output.WriteRawTag(200, 2);
        output.WriteUInt64(ContractId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) OrderType);
      }
      if (price_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(Price);
      }
      if (quantity_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Quantity);
      }
      if (ContractId != 0UL) {
        output.WriteRawTag(200, 2);
        output.WriteUInt64(ContractId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ContractId != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(ContractId);
      }
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OrderType);
      }
      if (price_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Price);
      }
      if (quantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Quantity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseContractMessage other) {
      if (other == null) {
        return;
      }
      if (other.ContractId != 0UL) {
        ContractId = other.ContractId;
      }
      if (other.OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        OrderType = other.OrderType;
      }
      if (other.price_ != null) {
        if (price_ == null) {
          Price = new global::DigitexWire.Decimal();
        }
        Price.MergeFrom(other.Price);
      }
      if (other.quantity_ != null) {
        if (quantity_ == null) {
          Quantity = new global::DigitexWire.Decimal();
        }
        Quantity.MergeFrom(other.Quantity);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 256: {
            OrderType = (global::DigitexWire.OrderType) input.ReadEnum();
            break;
          }
          case 306: {
            if (price_ == null) {
              Price = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Price);
            break;
          }
          case 314: {
            if (quantity_ == null) {
              Quantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Quantity);
            break;
          }
          case 328: {
            ContractId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 256: {
            OrderType = (global::DigitexWire.OrderType) input.ReadEnum();
            break;
          }
          case 306: {
            if (price_ == null) {
              Price = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Price);
            break;
          }
          case 314: {
            if (quantity_ == null) {
              Quantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Quantity);
            break;
          }
          case 328: {
            ContractId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CloseAllContractsMessage : pb::IMessage<CloseAllContractsMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CloseAllContractsMessage> _parser = new pb::MessageParser<CloseAllContractsMessage>(() => new CloseAllContractsMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseAllContractsMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseAllContractsMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseAllContractsMessage(CloseAllContractsMessage other) : this() {
      orderType_ = other.orderType_;
      price_ = other.price_ != null ? other.price_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseAllContractsMessage Clone() {
      return new CloseAllContractsMessage(this);
    }

    /// <summary>Field number for the "order_type" field.</summary>
    public const int OrderTypeFieldNumber = 32;
    private global::DigitexWire.OrderType orderType_ = global::DigitexWire.OrderType.TypeUndefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderType OrderType {
      get { return orderType_; }
      set {
        orderType_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 38;
    private global::DigitexWire.Decimal price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseAllContractsMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseAllContractsMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderType != other.OrderType) return false;
      if (!object.Equals(Price, other.Price)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) hash ^= OrderType.GetHashCode();
      if (price_ != null) hash ^= Price.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) OrderType);
      }
      if (price_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) OrderType);
      }
      if (price_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OrderType);
      }
      if (price_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Price);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseAllContractsMessage other) {
      if (other == null) {
        return;
      }
      if (other.OrderType != global::DigitexWire.OrderType.TypeUndefined) {
        OrderType = other.OrderType;
      }
      if (other.price_ != null) {
        if (price_ == null) {
          Price = new global::DigitexWire.Decimal();
        }
        Price.MergeFrom(other.Price);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 256: {
            OrderType = (global::DigitexWire.OrderType) input.ReadEnum();
            break;
          }
          case 306: {
            if (price_ == null) {
              Price = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Price);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 256: {
            OrderType = (global::DigitexWire.OrderType) input.ReadEnum();
            break;
          }
          case 306: {
            if (price_ == null) {
              Price = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Price);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OrderCanceledMessage : pb::IMessage<OrderCanceledMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderCanceledMessage> _parser = new pb::MessageParser<OrderCanceledMessage>(() => new OrderCanceledMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderCanceledMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderCanceledMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderCanceledMessage(OrderCanceledMessage other) : this() {
      status_ = other.status_;
      prevClientId_ = other.prevClientId_;
      orderIds_ = other.orderIds_.Clone();
      orders_ = other.orders_.Clone();
      traderBalance_ = other.traderBalance_ != null ? other.traderBalance_.Clone() : null;
      orderMargin_ = other.orderMargin_ != null ? other.orderMargin_.Clone() : null;
      positionMargin_ = other.positionMargin_ != null ? other.positionMargin_.Clone() : null;
      upnl_ = other.upnl_ != null ? other.upnl_.Clone() : null;
      pnl_ = other.pnl_ != null ? other.pnl_.Clone() : null;
      accumQuantity_ = other.accumQuantity_ != null ? other.accumQuantity_.Clone() : null;
      buyOrderMargin_ = other.buyOrderMargin_ != null ? other.buyOrderMargin_.Clone() : null;
      sellOrderMargin_ = other.sellOrderMargin_ != null ? other.sellOrderMargin_.Clone() : null;
      buyOrderQuantity_ = other.buyOrderQuantity_ != null ? other.buyOrderQuantity_.Clone() : null;
      sellOrderQuantity_ = other.sellOrderQuantity_ != null ? other.sellOrderQuantity_.Clone() : null;
      traderBalance2_ = other.traderBalance2_ != null ? other.traderBalance2_.Clone() : null;
      fullPositionMargin_ = other.fullPositionMargin_ != null ? other.fullPositionMargin_.Clone() : null;
      fullBuyOrderMargin_ = other.fullBuyOrderMargin_ != null ? other.fullBuyOrderMargin_.Clone() : null;
      fullSellOrderMargin_ = other.fullSellOrderMargin_ != null ? other.fullSellOrderMargin_.Clone() : null;
      markPrice_ = other.markPrice_ != null ? other.markPrice_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderCanceledMessage Clone() {
      return new OrderCanceledMessage(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 42;
    private global::DigitexWire.OrderStatus status_ = global::DigitexWire.OrderStatus.StatusUndefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "prev_client_id" field.</summary>
    public const int PrevClientIdFieldNumber = 40;
    private pb::ByteString prevClientId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PrevClientId {
      get { return prevClientId_; }
      set {
        prevClientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_ids" field.</summary>
    public const int OrderIdsFieldNumber = 103;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_orderIds_codec
        = pb::FieldCodec.ForBytes(826);
    private readonly pbc::RepeatedField<pb::ByteString> orderIds_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// the canceled orders: deprecated!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> OrderIds {
      get { return orderIds_; }
    }

    /// <summary>Field number for the "orders" field.</summary>
    public const int OrdersFieldNumber = 70;
    private static readonly pb::FieldCodec<global::DigitexWire.OrderMessage> _repeated_orders_codec
        = pb::FieldCodec.ForMessage(562, global::DigitexWire.OrderMessage.Parser);
    private readonly pbc::RepeatedField<global::DigitexWire.OrderMessage> orders_ = new pbc::RepeatedField<global::DigitexWire.OrderMessage>();
    /// <summary>
    /// the verbose list of canceled orders
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DigitexWire.OrderMessage> Orders {
      get { return orders_; }
    }

    /// <summary>Field number for the "trader_balance" field.</summary>
    public const int TraderBalanceFieldNumber = 51;
    private global::DigitexWire.Decimal traderBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal TraderBalance {
      get { return traderBalance_; }
      set {
        traderBalance_ = value;
      }
    }

    /// <summary>Field number for the "order_margin" field.</summary>
    public const int OrderMarginFieldNumber = 76;
    private global::DigitexWire.Decimal orderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal OrderMargin {
      get { return orderMargin_; }
      set {
        orderMargin_ = value;
      }
    }

    /// <summary>Field number for the "position_margin" field.</summary>
    public const int PositionMarginFieldNumber = 78;
    private global::DigitexWire.Decimal positionMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PositionMargin {
      get { return positionMargin_; }
      set {
        positionMargin_ = value;
      }
    }

    /// <summary>Field number for the "upnl" field.</summary>
    public const int UpnlFieldNumber = 79;
    private global::DigitexWire.Decimal upnl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Upnl {
      get { return upnl_; }
      set {
        upnl_ = value;
      }
    }

    /// <summary>Field number for the "pnl" field.</summary>
    public const int PnlFieldNumber = 154;
    private global::DigitexWire.Decimal pnl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Pnl {
      get { return pnl_; }
      set {
        pnl_ = value;
      }
    }

    /// <summary>Field number for the "accum_quantity" field.</summary>
    public const int AccumQuantityFieldNumber = 181;
    private global::DigitexWire.Decimal accumQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal AccumQuantity {
      get { return accumQuantity_; }
      set {
        accumQuantity_ = value;
      }
    }

    /// <summary>Field number for the "buy_order_margin" field.</summary>
    public const int BuyOrderMarginFieldNumber = 118;
    private global::DigitexWire.Decimal buyOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal BuyOrderMargin {
      get { return buyOrderMargin_; }
      set {
        buyOrderMargin_ = value;
      }
    }

    /// <summary>Field number for the "sell_order_margin" field.</summary>
    public const int SellOrderMarginFieldNumber = 119;
    private global::DigitexWire.Decimal sellOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal SellOrderMargin {
      get { return sellOrderMargin_; }
      set {
        sellOrderMargin_ = value;
      }
    }

    /// <summary>Field number for the "buy_order_quantity" field.</summary>
    public const int BuyOrderQuantityFieldNumber = 182;
    private global::DigitexWire.Decimal buyOrderQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal BuyOrderQuantity {
      get { return buyOrderQuantity_; }
      set {
        buyOrderQuantity_ = value;
      }
    }

    /// <summary>Field number for the "sell_order_quantity" field.</summary>
    public const int SellOrderQuantityFieldNumber = 183;
    private global::DigitexWire.Decimal sellOrderQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal SellOrderQuantity {
      get { return sellOrderQuantity_; }
      set {
        sellOrderQuantity_ = value;
      }
    }

    /// <summary>Field number for the "trader_balance_2" field.</summary>
    public const int TraderBalance2FieldNumber = 278;
    private global::DigitexWire.Decimal traderBalance2_;
    /// <summary>
    /// for spot market, balance in base currency
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal TraderBalance2 {
      get { return traderBalance2_; }
      set {
        traderBalance2_ = value;
      }
    }

    /// <summary>Field number for the "full_position_margin" field.</summary>
    public const int FullPositionMarginFieldNumber = 298;
    private global::DigitexWire.Decimal fullPositionMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FullPositionMargin {
      get { return fullPositionMargin_; }
      set {
        fullPositionMargin_ = value;
      }
    }

    /// <summary>Field number for the "full_buy_order_margin" field.</summary>
    public const int FullBuyOrderMarginFieldNumber = 299;
    private global::DigitexWire.Decimal fullBuyOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FullBuyOrderMargin {
      get { return fullBuyOrderMargin_; }
      set {
        fullBuyOrderMargin_ = value;
      }
    }

    /// <summary>Field number for the "full_sell_order_margin" field.</summary>
    public const int FullSellOrderMarginFieldNumber = 300;
    private global::DigitexWire.Decimal fullSellOrderMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FullSellOrderMargin {
      get { return fullSellOrderMargin_; }
      set {
        fullSellOrderMargin_ = value;
      }
    }

    /// <summary>Field number for the "mark_price" field.</summary>
    public const int MarkPriceFieldNumber = 52;
    private global::DigitexWire.Decimal markPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal MarkPrice {
      get { return markPrice_; }
      set {
        markPrice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderCanceledMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderCanceledMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (PrevClientId != other.PrevClientId) return false;
      if(!orderIds_.Equals(other.orderIds_)) return false;
      if(!orders_.Equals(other.orders_)) return false;
      if (!object.Equals(TraderBalance, other.TraderBalance)) return false;
      if (!object.Equals(OrderMargin, other.OrderMargin)) return false;
      if (!object.Equals(PositionMargin, other.PositionMargin)) return false;
      if (!object.Equals(Upnl, other.Upnl)) return false;
      if (!object.Equals(Pnl, other.Pnl)) return false;
      if (!object.Equals(AccumQuantity, other.AccumQuantity)) return false;
      if (!object.Equals(BuyOrderMargin, other.BuyOrderMargin)) return false;
      if (!object.Equals(SellOrderMargin, other.SellOrderMargin)) return false;
      if (!object.Equals(BuyOrderQuantity, other.BuyOrderQuantity)) return false;
      if (!object.Equals(SellOrderQuantity, other.SellOrderQuantity)) return false;
      if (!object.Equals(TraderBalance2, other.TraderBalance2)) return false;
      if (!object.Equals(FullPositionMargin, other.FullPositionMargin)) return false;
      if (!object.Equals(FullBuyOrderMargin, other.FullBuyOrderMargin)) return false;
      if (!object.Equals(FullSellOrderMargin, other.FullSellOrderMargin)) return false;
      if (!object.Equals(MarkPrice, other.MarkPrice)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != global::DigitexWire.OrderStatus.StatusUndefined) hash ^= Status.GetHashCode();
      if (PrevClientId.Length != 0) hash ^= PrevClientId.GetHashCode();
      hash ^= orderIds_.GetHashCode();
      hash ^= orders_.GetHashCode();
      if (traderBalance_ != null) hash ^= TraderBalance.GetHashCode();
      if (orderMargin_ != null) hash ^= OrderMargin.GetHashCode();
      if (positionMargin_ != null) hash ^= PositionMargin.GetHashCode();
      if (upnl_ != null) hash ^= Upnl.GetHashCode();
      if (pnl_ != null) hash ^= Pnl.GetHashCode();
      if (accumQuantity_ != null) hash ^= AccumQuantity.GetHashCode();
      if (buyOrderMargin_ != null) hash ^= BuyOrderMargin.GetHashCode();
      if (sellOrderMargin_ != null) hash ^= SellOrderMargin.GetHashCode();
      if (buyOrderQuantity_ != null) hash ^= BuyOrderQuantity.GetHashCode();
      if (sellOrderQuantity_ != null) hash ^= SellOrderQuantity.GetHashCode();
      if (traderBalance2_ != null) hash ^= TraderBalance2.GetHashCode();
      if (fullPositionMargin_ != null) hash ^= FullPositionMargin.GetHashCode();
      if (fullBuyOrderMargin_ != null) hash ^= FullBuyOrderMargin.GetHashCode();
      if (fullSellOrderMargin_ != null) hash ^= FullSellOrderMargin.GetHashCode();
      if (markPrice_ != null) hash ^= MarkPrice.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PrevClientId.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteBytes(PrevClientId);
      }
      if (Status != global::DigitexWire.OrderStatus.StatusUndefined) {
        output.WriteRawTag(208, 2);
        output.WriteEnum((int) Status);
      }
      if (traderBalance_ != null) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(TraderBalance);
      }
      if (markPrice_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(MarkPrice);
      }
      orders_.WriteTo(output, _repeated_orders_codec);
      if (orderMargin_ != null) {
        output.WriteRawTag(226, 4);
        output.WriteMessage(OrderMargin);
      }
      if (positionMargin_ != null) {
        output.WriteRawTag(242, 4);
        output.WriteMessage(PositionMargin);
      }
      if (upnl_ != null) {
        output.WriteRawTag(250, 4);
        output.WriteMessage(Upnl);
      }
      orderIds_.WriteTo(output, _repeated_orderIds_codec);
      if (buyOrderMargin_ != null) {
        output.WriteRawTag(178, 7);
        output.WriteMessage(BuyOrderMargin);
      }
      if (sellOrderMargin_ != null) {
        output.WriteRawTag(186, 7);
        output.WriteMessage(SellOrderMargin);
      }
      if (pnl_ != null) {
        output.WriteRawTag(210, 9);
        output.WriteMessage(Pnl);
      }
      if (accumQuantity_ != null) {
        output.WriteRawTag(170, 11);
        output.WriteMessage(AccumQuantity);
      }
      if (buyOrderQuantity_ != null) {
        output.WriteRawTag(178, 11);
        output.WriteMessage(BuyOrderQuantity);
      }
      if (sellOrderQuantity_ != null) {
        output.WriteRawTag(186, 11);
        output.WriteMessage(SellOrderQuantity);
      }
      if (traderBalance2_ != null) {
        output.WriteRawTag(178, 17);
        output.WriteMessage(TraderBalance2);
      }
      if (fullPositionMargin_ != null) {
        output.WriteRawTag(210, 18);
        output.WriteMessage(FullPositionMargin);
      }
      if (fullBuyOrderMargin_ != null) {
        output.WriteRawTag(218, 18);
        output.WriteMessage(FullBuyOrderMargin);
      }
      if (fullSellOrderMargin_ != null) {
        output.WriteRawTag(226, 18);
        output.WriteMessage(FullSellOrderMargin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PrevClientId.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteBytes(PrevClientId);
      }
      if (Status != global::DigitexWire.OrderStatus.StatusUndefined) {
        output.WriteRawTag(208, 2);
        output.WriteEnum((int) Status);
      }
      if (traderBalance_ != null) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(TraderBalance);
      }
      if (markPrice_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(MarkPrice);
      }
      orders_.WriteTo(ref output, _repeated_orders_codec);
      if (orderMargin_ != null) {
        output.WriteRawTag(226, 4);
        output.WriteMessage(OrderMargin);
      }
      if (positionMargin_ != null) {
        output.WriteRawTag(242, 4);
        output.WriteMessage(PositionMargin);
      }
      if (upnl_ != null) {
        output.WriteRawTag(250, 4);
        output.WriteMessage(Upnl);
      }
      orderIds_.WriteTo(ref output, _repeated_orderIds_codec);
      if (buyOrderMargin_ != null) {
        output.WriteRawTag(178, 7);
        output.WriteMessage(BuyOrderMargin);
      }
      if (sellOrderMargin_ != null) {
        output.WriteRawTag(186, 7);
        output.WriteMessage(SellOrderMargin);
      }
      if (pnl_ != null) {
        output.WriteRawTag(210, 9);
        output.WriteMessage(Pnl);
      }
      if (accumQuantity_ != null) {
        output.WriteRawTag(170, 11);
        output.WriteMessage(AccumQuantity);
      }
      if (buyOrderQuantity_ != null) {
        output.WriteRawTag(178, 11);
        output.WriteMessage(BuyOrderQuantity);
      }
      if (sellOrderQuantity_ != null) {
        output.WriteRawTag(186, 11);
        output.WriteMessage(SellOrderQuantity);
      }
      if (traderBalance2_ != null) {
        output.WriteRawTag(178, 17);
        output.WriteMessage(TraderBalance2);
      }
      if (fullPositionMargin_ != null) {
        output.WriteRawTag(210, 18);
        output.WriteMessage(FullPositionMargin);
      }
      if (fullBuyOrderMargin_ != null) {
        output.WriteRawTag(218, 18);
        output.WriteMessage(FullBuyOrderMargin);
      }
      if (fullSellOrderMargin_ != null) {
        output.WriteRawTag(226, 18);
        output.WriteMessage(FullSellOrderMargin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != global::DigitexWire.OrderStatus.StatusUndefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (PrevClientId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(PrevClientId);
      }
      size += orderIds_.CalculateSize(_repeated_orderIds_codec);
      size += orders_.CalculateSize(_repeated_orders_codec);
      if (traderBalance_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TraderBalance);
      }
      if (orderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderMargin);
      }
      if (positionMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionMargin);
      }
      if (upnl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Upnl);
      }
      if (pnl_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Pnl);
      }
      if (accumQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AccumQuantity);
      }
      if (buyOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BuyOrderMargin);
      }
      if (sellOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SellOrderMargin);
      }
      if (buyOrderQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BuyOrderQuantity);
      }
      if (sellOrderQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SellOrderQuantity);
      }
      if (traderBalance2_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TraderBalance2);
      }
      if (fullPositionMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FullPositionMargin);
      }
      if (fullBuyOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FullBuyOrderMargin);
      }
      if (fullSellOrderMargin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FullSellOrderMargin);
      }
      if (markPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MarkPrice);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderCanceledMessage other) {
      if (other == null) {
        return;
      }
      if (other.Status != global::DigitexWire.OrderStatus.StatusUndefined) {
        Status = other.Status;
      }
      if (other.PrevClientId.Length != 0) {
        PrevClientId = other.PrevClientId;
      }
      orderIds_.Add(other.orderIds_);
      orders_.Add(other.orders_);
      if (other.traderBalance_ != null) {
        if (traderBalance_ == null) {
          TraderBalance = new global::DigitexWire.Decimal();
        }
        TraderBalance.MergeFrom(other.TraderBalance);
      }
      if (other.orderMargin_ != null) {
        if (orderMargin_ == null) {
          OrderMargin = new global::DigitexWire.Decimal();
        }
        OrderMargin.MergeFrom(other.OrderMargin);
      }
      if (other.positionMargin_ != null) {
        if (positionMargin_ == null) {
          PositionMargin = new global::DigitexWire.Decimal();
        }
        PositionMargin.MergeFrom(other.PositionMargin);
      }
      if (other.upnl_ != null) {
        if (upnl_ == null) {
          Upnl = new global::DigitexWire.Decimal();
        }
        Upnl.MergeFrom(other.Upnl);
      }
      if (other.pnl_ != null) {
        if (pnl_ == null) {
          Pnl = new global::DigitexWire.Decimal();
        }
        Pnl.MergeFrom(other.Pnl);
      }
      if (other.accumQuantity_ != null) {
        if (accumQuantity_ == null) {
          AccumQuantity = new global::DigitexWire.Decimal();
        }
        AccumQuantity.MergeFrom(other.AccumQuantity);
      }
      if (other.buyOrderMargin_ != null) {
        if (buyOrderMargin_ == null) {
          BuyOrderMargin = new global::DigitexWire.Decimal();
        }
        BuyOrderMargin.MergeFrom(other.BuyOrderMargin);
      }
      if (other.sellOrderMargin_ != null) {
        if (sellOrderMargin_ == null) {
          SellOrderMargin = new global::DigitexWire.Decimal();
        }
        SellOrderMargin.MergeFrom(other.SellOrderMargin);
      }
      if (other.buyOrderQuantity_ != null) {
        if (buyOrderQuantity_ == null) {
          BuyOrderQuantity = new global::DigitexWire.Decimal();
        }
        BuyOrderQuantity.MergeFrom(other.BuyOrderQuantity);
      }
      if (other.sellOrderQuantity_ != null) {
        if (sellOrderQuantity_ == null) {
          SellOrderQuantity = new global::DigitexWire.Decimal();
        }
        SellOrderQuantity.MergeFrom(other.SellOrderQuantity);
      }
      if (other.traderBalance2_ != null) {
        if (traderBalance2_ == null) {
          TraderBalance2 = new global::DigitexWire.Decimal();
        }
        TraderBalance2.MergeFrom(other.TraderBalance2);
      }
      if (other.fullPositionMargin_ != null) {
        if (fullPositionMargin_ == null) {
          FullPositionMargin = new global::DigitexWire.Decimal();
        }
        FullPositionMargin.MergeFrom(other.FullPositionMargin);
      }
      if (other.fullBuyOrderMargin_ != null) {
        if (fullBuyOrderMargin_ == null) {
          FullBuyOrderMargin = new global::DigitexWire.Decimal();
        }
        FullBuyOrderMargin.MergeFrom(other.FullBuyOrderMargin);
      }
      if (other.fullSellOrderMargin_ != null) {
        if (fullSellOrderMargin_ == null) {
          FullSellOrderMargin = new global::DigitexWire.Decimal();
        }
        FullSellOrderMargin.MergeFrom(other.FullSellOrderMargin);
      }
      if (other.markPrice_ != null) {
        if (markPrice_ == null) {
          MarkPrice = new global::DigitexWire.Decimal();
        }
        MarkPrice.MergeFrom(other.MarkPrice);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 322: {
            PrevClientId = input.ReadBytes();
            break;
          }
          case 336: {
            Status = (global::DigitexWire.OrderStatus) input.ReadEnum();
            break;
          }
          case 410: {
            if (traderBalance_ == null) {
              TraderBalance = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TraderBalance);
            break;
          }
          case 418: {
            if (markPrice_ == null) {
              MarkPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(MarkPrice);
            break;
          }
          case 562: {
            orders_.AddEntriesFrom(input, _repeated_orders_codec);
            break;
          }
          case 610: {
            if (orderMargin_ == null) {
              OrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OrderMargin);
            break;
          }
          case 626: {
            if (positionMargin_ == null) {
              PositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionMargin);
            break;
          }
          case 634: {
            if (upnl_ == null) {
              Upnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Upnl);
            break;
          }
          case 826: {
            orderIds_.AddEntriesFrom(input, _repeated_orderIds_codec);
            break;
          }
          case 946: {
            if (buyOrderMargin_ == null) {
              BuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderMargin);
            break;
          }
          case 954: {
            if (sellOrderMargin_ == null) {
              SellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderMargin);
            break;
          }
          case 1234: {
            if (pnl_ == null) {
              Pnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Pnl);
            break;
          }
          case 1450: {
            if (accumQuantity_ == null) {
              AccumQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(AccumQuantity);
            break;
          }
          case 1458: {
            if (buyOrderQuantity_ == null) {
              BuyOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderQuantity);
            break;
          }
          case 1466: {
            if (sellOrderQuantity_ == null) {
              SellOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderQuantity);
            break;
          }
          case 2226: {
            if (traderBalance2_ == null) {
              TraderBalance2 = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TraderBalance2);
            break;
          }
          case 2386: {
            if (fullPositionMargin_ == null) {
              FullPositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullPositionMargin);
            break;
          }
          case 2394: {
            if (fullBuyOrderMargin_ == null) {
              FullBuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullBuyOrderMargin);
            break;
          }
          case 2402: {
            if (fullSellOrderMargin_ == null) {
              FullSellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullSellOrderMargin);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 322: {
            PrevClientId = input.ReadBytes();
            break;
          }
          case 336: {
            Status = (global::DigitexWire.OrderStatus) input.ReadEnum();
            break;
          }
          case 410: {
            if (traderBalance_ == null) {
              TraderBalance = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TraderBalance);
            break;
          }
          case 418: {
            if (markPrice_ == null) {
              MarkPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(MarkPrice);
            break;
          }
          case 562: {
            orders_.AddEntriesFrom(ref input, _repeated_orders_codec);
            break;
          }
          case 610: {
            if (orderMargin_ == null) {
              OrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OrderMargin);
            break;
          }
          case 626: {
            if (positionMargin_ == null) {
              PositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PositionMargin);
            break;
          }
          case 634: {
            if (upnl_ == null) {
              Upnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Upnl);
            break;
          }
          case 826: {
            orderIds_.AddEntriesFrom(ref input, _repeated_orderIds_codec);
            break;
          }
          case 946: {
            if (buyOrderMargin_ == null) {
              BuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderMargin);
            break;
          }
          case 954: {
            if (sellOrderMargin_ == null) {
              SellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderMargin);
            break;
          }
          case 1234: {
            if (pnl_ == null) {
              Pnl = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Pnl);
            break;
          }
          case 1450: {
            if (accumQuantity_ == null) {
              AccumQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(AccumQuantity);
            break;
          }
          case 1458: {
            if (buyOrderQuantity_ == null) {
              BuyOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(BuyOrderQuantity);
            break;
          }
          case 1466: {
            if (sellOrderQuantity_ == null) {
              SellOrderQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SellOrderQuantity);
            break;
          }
          case 2226: {
            if (traderBalance2_ == null) {
              TraderBalance2 = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TraderBalance2);
            break;
          }
          case 2386: {
            if (fullPositionMargin_ == null) {
              FullPositionMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullPositionMargin);
            break;
          }
          case 2394: {
            if (fullBuyOrderMargin_ == null) {
              FullBuyOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullBuyOrderMargin);
            break;
          }
          case 2402: {
            if (fullSellOrderMargin_ == null) {
              FullSellOrderMargin = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FullSellOrderMargin);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GetMarketStateMessage : pb::IMessage<GetMarketStateMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetMarketStateMessage> _parser = new pb::MessageParser<GetMarketStateMessage>(() => new GetMarketStateMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMarketStateMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMarketStateMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMarketStateMessage(GetMarketStateMessage other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMarketStateMessage Clone() {
      return new GetMarketStateMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMarketStateMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMarketStateMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMarketStateMessage other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class DailyStatisticsMessage : pb::IMessage<DailyStatisticsMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DailyStatisticsMessage> _parser = new pb::MessageParser<DailyStatisticsMessage>(() => new DailyStatisticsMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DailyStatisticsMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyStatisticsMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyStatisticsMessage(DailyStatisticsMessage other) : this() {
      startTimestamp_ = other.startTimestamp_;
      volume_ = other.volume_ != null ? other.volume_.Clone() : null;
      gross_ = other.gross_ != null ? other.gross_.Clone() : null;
      highPrice_ = other.highPrice_ != null ? other.highPrice_.Clone() : null;
      lowPrice_ = other.lowPrice_ != null ? other.lowPrice_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyStatisticsMessage Clone() {
      return new DailyStatisticsMessage(this);
    }

    /// <summary>Field number for the "start_timestamp" field.</summary>
    public const int StartTimestampFieldNumber = 124;
    private long startTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTimestamp {
      get { return startTimestamp_; }
      set {
        startTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 125;
    private global::DigitexWire.Decimal volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "gross" field.</summary>
    public const int GrossFieldNumber = 126;
    private global::DigitexWire.Decimal gross_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Gross {
      get { return gross_; }
      set {
        gross_ = value;
      }
    }

    /// <summary>Field number for the "high_price" field.</summary>
    public const int HighPriceFieldNumber = 156;
    private global::DigitexWire.Decimal highPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal HighPrice {
      get { return highPrice_; }
      set {
        highPrice_ = value;
      }
    }

    /// <summary>Field number for the "low_price" field.</summary>
    public const int LowPriceFieldNumber = 157;
    private global::DigitexWire.Decimal lowPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal LowPrice {
      get { return lowPrice_; }
      set {
        lowPrice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DailyStatisticsMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DailyStatisticsMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartTimestamp != other.StartTimestamp) return false;
      if (!object.Equals(Volume, other.Volume)) return false;
      if (!object.Equals(Gross, other.Gross)) return false;
      if (!object.Equals(HighPrice, other.HighPrice)) return false;
      if (!object.Equals(LowPrice, other.LowPrice)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartTimestamp != 0L) hash ^= StartTimestamp.GetHashCode();
      if (volume_ != null) hash ^= Volume.GetHashCode();
      if (gross_ != null) hash ^= Gross.GetHashCode();
      if (highPrice_ != null) hash ^= HighPrice.GetHashCode();
      if (lowPrice_ != null) hash ^= LowPrice.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StartTimestamp != 0L) {
        output.WriteRawTag(224, 7);
        output.WriteInt64(StartTimestamp);
      }
      if (volume_ != null) {
        output.WriteRawTag(234, 7);
        output.WriteMessage(Volume);
      }
      if (gross_ != null) {
        output.WriteRawTag(242, 7);
        output.WriteMessage(Gross);
      }
      if (highPrice_ != null) {
        output.WriteRawTag(226, 9);
        output.WriteMessage(HighPrice);
      }
      if (lowPrice_ != null) {
        output.WriteRawTag(234, 9);
        output.WriteMessage(LowPrice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StartTimestamp != 0L) {
        output.WriteRawTag(224, 7);
        output.WriteInt64(StartTimestamp);
      }
      if (volume_ != null) {
        output.WriteRawTag(234, 7);
        output.WriteMessage(Volume);
      }
      if (gross_ != null) {
        output.WriteRawTag(242, 7);
        output.WriteMessage(Gross);
      }
      if (highPrice_ != null) {
        output.WriteRawTag(226, 9);
        output.WriteMessage(HighPrice);
      }
      if (lowPrice_ != null) {
        output.WriteRawTag(234, 9);
        output.WriteMessage(LowPrice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(StartTimestamp);
      }
      if (volume_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Volume);
      }
      if (gross_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Gross);
      }
      if (highPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HighPrice);
      }
      if (lowPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LowPrice);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DailyStatisticsMessage other) {
      if (other == null) {
        return;
      }
      if (other.StartTimestamp != 0L) {
        StartTimestamp = other.StartTimestamp;
      }
      if (other.volume_ != null) {
        if (volume_ == null) {
          Volume = new global::DigitexWire.Decimal();
        }
        Volume.MergeFrom(other.Volume);
      }
      if (other.gross_ != null) {
        if (gross_ == null) {
          Gross = new global::DigitexWire.Decimal();
        }
        Gross.MergeFrom(other.Gross);
      }
      if (other.highPrice_ != null) {
        if (highPrice_ == null) {
          HighPrice = new global::DigitexWire.Decimal();
        }
        HighPrice.MergeFrom(other.HighPrice);
      }
      if (other.lowPrice_ != null) {
        if (lowPrice_ == null) {
          LowPrice = new global::DigitexWire.Decimal();
        }
        LowPrice.MergeFrom(other.LowPrice);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 992: {
            StartTimestamp = input.ReadInt64();
            break;
          }
          case 1002: {
            if (volume_ == null) {
              Volume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Volume);
            break;
          }
          case 1010: {
            if (gross_ == null) {
              Gross = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Gross);
            break;
          }
          case 1250: {
            if (highPrice_ == null) {
              HighPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(HighPrice);
            break;
          }
          case 1258: {
            if (lowPrice_ == null) {
              LowPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LowPrice);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 992: {
            StartTimestamp = input.ReadInt64();
            break;
          }
          case 1002: {
            if (volume_ == null) {
              Volume = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Volume);
            break;
          }
          case 1010: {
            if (gross_ == null) {
              Gross = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Gross);
            break;
          }
          case 1250: {
            if (highPrice_ == null) {
              HighPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(HighPrice);
            break;
          }
          case 1258: {
            if (lowPrice_ == null) {
              LowPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LowPrice);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MarketStateMessage : pb::IMessage<MarketStateMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MarketStateMessage> _parser = new pb::MessageParser<MarketStateMessage>(() => new MarketStateMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketStateMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketStateMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketStateMessage(MarketStateMessage other) : this() {
      trades_ = other.trades_.Clone();
      ohlcvs_ = other.ohlcvs_.Clone();
      lastTradePrice_ = other.lastTradePrice_ != null ? other.lastTradePrice_.Clone() : null;
      lastTradeQuantity_ = other.lastTradeQuantity_ != null ? other.lastTradeQuantity_.Clone() : null;
      lastTradeTimestamp_ = other.lastTradeTimestamp_;
      eventTimestamp_ = other.eventTimestamp_;
      dailyStats_ = other.dailyStats_.Clone();
      fundingTime_ = other.fundingTime_;
      fundingRate_ = other.fundingRate_ != null ? other.fundingRate_.Clone() : null;
      nextFundingRate_ = other.nextFundingRate_ != null ? other.nextFundingRate_.Clone() : null;
      tickValue_ = other.tickValue_ != null ? other.tickValue_.Clone() : null;
      tickPrice_ = other.tickPrice_ != null ? other.tickPrice_.Clone() : null;
      contractValue_ = other.contractValue_ != null ? other.contractValue_.Clone() : null;
      fundingInterval_ = other.fundingInterval_;
      payoutPerContract_ = other.payoutPerContract_ != null ? other.payoutPerContract_.Clone() : null;
      alertTimestamp_ = other.alertTimestamp_;
      alertText_ = other.alertText_;
      openInterest_ = other.openInterest_ != null ? other.openInterest_.Clone() : null;
      insuranceFund_ = other.insuranceFund_ != null ? other.insuranceFund_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketStateMessage Clone() {
      return new MarketStateMessage(this);
    }

    /// <summary>Field number for the "trades" field.</summary>
    public const int TradesFieldNumber = 46;
    private static readonly pb::FieldCodec<global::DigitexWire.TradeMessage> _repeated_trades_codec
        = pb::FieldCodec.ForMessage(370, global::DigitexWire.TradeMessage.Parser);
    private readonly pbc::RepeatedField<global::DigitexWire.TradeMessage> trades_ = new pbc::RepeatedField<global::DigitexWire.TradeMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DigitexWire.TradeMessage> Trades {
      get { return trades_; }
    }

    /// <summary>Field number for the "ohlcvs" field.</summary>
    public const int OhlcvsFieldNumber = 91;
    private static readonly pb::FieldCodec<global::DigitexWire.OHLCVMessage> _repeated_ohlcvs_codec
        = pb::FieldCodec.ForMessage(730, global::DigitexWire.OHLCVMessage.Parser);
    private readonly pbc::RepeatedField<global::DigitexWire.OHLCVMessage> ohlcvs_ = new pbc::RepeatedField<global::DigitexWire.OHLCVMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DigitexWire.OHLCVMessage> Ohlcvs {
      get { return ohlcvs_; }
    }

    /// <summary>Field number for the "last_trade_price" field.</summary>
    public const int LastTradePriceFieldNumber = 113;
    private global::DigitexWire.Decimal lastTradePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal LastTradePrice {
      get { return lastTradePrice_; }
      set {
        lastTradePrice_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_quantity" field.</summary>
    public const int LastTradeQuantityFieldNumber = 116;
    private global::DigitexWire.Decimal lastTradeQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal LastTradeQuantity {
      get { return lastTradeQuantity_; }
      set {
        lastTradeQuantity_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_timestamp" field.</summary>
    public const int LastTradeTimestampFieldNumber = 296;
    private long lastTradeTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastTradeTimestamp {
      get { return lastTradeTimestamp_; }
      set {
        lastTradeTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "event_timestamp" field.</summary>
    public const int EventTimestampFieldNumber = 122;
    private long eventTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EventTimestamp {
      get { return eventTimestamp_; }
      set {
        eventTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "daily_stats" field.</summary>
    public const int DailyStatsFieldNumber = 123;
    private static readonly pb::FieldCodec<global::DigitexWire.DailyStatisticsMessage> _repeated_dailyStats_codec
        = pb::FieldCodec.ForMessage(986, global::DigitexWire.DailyStatisticsMessage.Parser);
    private readonly pbc::RepeatedField<global::DigitexWire.DailyStatisticsMessage> dailyStats_ = new pbc::RepeatedField<global::DigitexWire.DailyStatisticsMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DigitexWire.DailyStatisticsMessage> DailyStats {
      get { return dailyStats_; }
    }

    /// <summary>Field number for the "funding_time" field.</summary>
    public const int FundingTimeFieldNumber = 127;
    private long fundingTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FundingTime {
      get { return fundingTime_; }
      set {
        fundingTime_ = value;
      }
    }

    /// <summary>Field number for the "funding_rate" field.</summary>
    public const int FundingRateFieldNumber = 128;
    private global::DigitexWire.Decimal fundingRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FundingRate {
      get { return fundingRate_; }
      set {
        fundingRate_ = value;
      }
    }

    /// <summary>Field number for the "next_funding_rate" field.</summary>
    public const int NextFundingRateFieldNumber = 129;
    private global::DigitexWire.Decimal nextFundingRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal NextFundingRate {
      get { return nextFundingRate_; }
      set {
        nextFundingRate_ = value;
      }
    }

    /// <summary>Field number for the "tick_value" field.</summary>
    public const int TickValueFieldNumber = 131;
    private global::DigitexWire.Decimal tickValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal TickValue {
      get { return tickValue_; }
      set {
        tickValue_ = value;
      }
    }

    /// <summary>Field number for the "tick_price" field.</summary>
    public const int TickPriceFieldNumber = 132;
    private global::DigitexWire.Decimal tickPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal TickPrice {
      get { return tickPrice_; }
      set {
        tickPrice_ = value;
      }
    }

    /// <summary>Field number for the "contract_value" field.</summary>
    public const int ContractValueFieldNumber = 133;
    private global::DigitexWire.Decimal contractValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal ContractValue {
      get { return contractValue_; }
      set {
        contractValue_ = value;
      }
    }

    /// <summary>Field number for the "funding_interval" field.</summary>
    public const int FundingIntervalFieldNumber = 162;
    private long fundingInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FundingInterval {
      get { return fundingInterval_; }
      set {
        fundingInterval_ = value;
      }
    }

    /// <summary>Field number for the "payout_per_contract" field.</summary>
    public const int PayoutPerContractFieldNumber = 102;
    private global::DigitexWire.Decimal payoutPerContract_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PayoutPerContract {
      get { return payoutPerContract_; }
      set {
        payoutPerContract_ = value;
      }
    }

    /// <summary>Field number for the "alert_timestamp" field.</summary>
    public const int AlertTimestampFieldNumber = 210;
    private long alertTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AlertTimestamp {
      get { return alertTimestamp_; }
      set {
        alertTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "alert_text" field.</summary>
    public const int AlertTextFieldNumber = 211;
    private string alertText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlertText {
      get { return alertText_; }
      set {
        alertText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "open_interest" field.</summary>
    public const int OpenInterestFieldNumber = 295;
    private global::DigitexWire.Decimal openInterest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal OpenInterest {
      get { return openInterest_; }
      set {
        openInterest_ = value;
      }
    }

    /// <summary>Field number for the "insurance_fund" field.</summary>
    public const int InsuranceFundFieldNumber = 297;
    private global::DigitexWire.Decimal insuranceFund_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal InsuranceFund {
      get { return insuranceFund_; }
      set {
        insuranceFund_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketStateMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketStateMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!trades_.Equals(other.trades_)) return false;
      if(!ohlcvs_.Equals(other.ohlcvs_)) return false;
      if (!object.Equals(LastTradePrice, other.LastTradePrice)) return false;
      if (!object.Equals(LastTradeQuantity, other.LastTradeQuantity)) return false;
      if (LastTradeTimestamp != other.LastTradeTimestamp) return false;
      if (EventTimestamp != other.EventTimestamp) return false;
      if(!dailyStats_.Equals(other.dailyStats_)) return false;
      if (FundingTime != other.FundingTime) return false;
      if (!object.Equals(FundingRate, other.FundingRate)) return false;
      if (!object.Equals(NextFundingRate, other.NextFundingRate)) return false;
      if (!object.Equals(TickValue, other.TickValue)) return false;
      if (!object.Equals(TickPrice, other.TickPrice)) return false;
      if (!object.Equals(ContractValue, other.ContractValue)) return false;
      if (FundingInterval != other.FundingInterval) return false;
      if (!object.Equals(PayoutPerContract, other.PayoutPerContract)) return false;
      if (AlertTimestamp != other.AlertTimestamp) return false;
      if (AlertText != other.AlertText) return false;
      if (!object.Equals(OpenInterest, other.OpenInterest)) return false;
      if (!object.Equals(InsuranceFund, other.InsuranceFund)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= trades_.GetHashCode();
      hash ^= ohlcvs_.GetHashCode();
      if (lastTradePrice_ != null) hash ^= LastTradePrice.GetHashCode();
      if (lastTradeQuantity_ != null) hash ^= LastTradeQuantity.GetHashCode();
      if (LastTradeTimestamp != 0L) hash ^= LastTradeTimestamp.GetHashCode();
      if (EventTimestamp != 0L) hash ^= EventTimestamp.GetHashCode();
      hash ^= dailyStats_.GetHashCode();
      if (FundingTime != 0L) hash ^= FundingTime.GetHashCode();
      if (fundingRate_ != null) hash ^= FundingRate.GetHashCode();
      if (nextFundingRate_ != null) hash ^= NextFundingRate.GetHashCode();
      if (tickValue_ != null) hash ^= TickValue.GetHashCode();
      if (tickPrice_ != null) hash ^= TickPrice.GetHashCode();
      if (contractValue_ != null) hash ^= ContractValue.GetHashCode();
      if (FundingInterval != 0L) hash ^= FundingInterval.GetHashCode();
      if (payoutPerContract_ != null) hash ^= PayoutPerContract.GetHashCode();
      if (AlertTimestamp != 0L) hash ^= AlertTimestamp.GetHashCode();
      if (AlertText.Length != 0) hash ^= AlertText.GetHashCode();
      if (openInterest_ != null) hash ^= OpenInterest.GetHashCode();
      if (insuranceFund_ != null) hash ^= InsuranceFund.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      trades_.WriteTo(output, _repeated_trades_codec);
      ohlcvs_.WriteTo(output, _repeated_ohlcvs_codec);
      if (payoutPerContract_ != null) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(PayoutPerContract);
      }
      if (lastTradePrice_ != null) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(LastTradePrice);
      }
      if (lastTradeQuantity_ != null) {
        output.WriteRawTag(162, 7);
        output.WriteMessage(LastTradeQuantity);
      }
      if (EventTimestamp != 0L) {
        output.WriteRawTag(208, 7);
        output.WriteInt64(EventTimestamp);
      }
      dailyStats_.WriteTo(output, _repeated_dailyStats_codec);
      if (FundingTime != 0L) {
        output.WriteRawTag(248, 7);
        output.WriteInt64(FundingTime);
      }
      if (fundingRate_ != null) {
        output.WriteRawTag(130, 8);
        output.WriteMessage(FundingRate);
      }
      if (nextFundingRate_ != null) {
        output.WriteRawTag(138, 8);
        output.WriteMessage(NextFundingRate);
      }
      if (tickValue_ != null) {
        output.WriteRawTag(154, 8);
        output.WriteMessage(TickValue);
      }
      if (tickPrice_ != null) {
        output.WriteRawTag(162, 8);
        output.WriteMessage(TickPrice);
      }
      if (contractValue_ != null) {
        output.WriteRawTag(170, 8);
        output.WriteMessage(ContractValue);
      }
      if (FundingInterval != 0L) {
        output.WriteRawTag(144, 10);
        output.WriteInt64(FundingInterval);
      }
      if (AlertTimestamp != 0L) {
        output.WriteRawTag(144, 13);
        output.WriteInt64(AlertTimestamp);
      }
      if (AlertText.Length != 0) {
        output.WriteRawTag(154, 13);
        output.WriteString(AlertText);
      }
      if (openInterest_ != null) {
        output.WriteRawTag(186, 18);
        output.WriteMessage(OpenInterest);
      }
      if (LastTradeTimestamp != 0L) {
        output.WriteRawTag(192, 18);
        output.WriteInt64(LastTradeTimestamp);
      }
      if (insuranceFund_ != null) {
        output.WriteRawTag(202, 18);
        output.WriteMessage(InsuranceFund);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      trades_.WriteTo(ref output, _repeated_trades_codec);
      ohlcvs_.WriteTo(ref output, _repeated_ohlcvs_codec);
      if (payoutPerContract_ != null) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(PayoutPerContract);
      }
      if (lastTradePrice_ != null) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(LastTradePrice);
      }
      if (lastTradeQuantity_ != null) {
        output.WriteRawTag(162, 7);
        output.WriteMessage(LastTradeQuantity);
      }
      if (EventTimestamp != 0L) {
        output.WriteRawTag(208, 7);
        output.WriteInt64(EventTimestamp);
      }
      dailyStats_.WriteTo(ref output, _repeated_dailyStats_codec);
      if (FundingTime != 0L) {
        output.WriteRawTag(248, 7);
        output.WriteInt64(FundingTime);
      }
      if (fundingRate_ != null) {
        output.WriteRawTag(130, 8);
        output.WriteMessage(FundingRate);
      }
      if (nextFundingRate_ != null) {
        output.WriteRawTag(138, 8);
        output.WriteMessage(NextFundingRate);
      }
      if (tickValue_ != null) {
        output.WriteRawTag(154, 8);
        output.WriteMessage(TickValue);
      }
      if (tickPrice_ != null) {
        output.WriteRawTag(162, 8);
        output.WriteMessage(TickPrice);
      }
      if (contractValue_ != null) {
        output.WriteRawTag(170, 8);
        output.WriteMessage(ContractValue);
      }
      if (FundingInterval != 0L) {
        output.WriteRawTag(144, 10);
        output.WriteInt64(FundingInterval);
      }
      if (AlertTimestamp != 0L) {
        output.WriteRawTag(144, 13);
        output.WriteInt64(AlertTimestamp);
      }
      if (AlertText.Length != 0) {
        output.WriteRawTag(154, 13);
        output.WriteString(AlertText);
      }
      if (openInterest_ != null) {
        output.WriteRawTag(186, 18);
        output.WriteMessage(OpenInterest);
      }
      if (LastTradeTimestamp != 0L) {
        output.WriteRawTag(192, 18);
        output.WriteInt64(LastTradeTimestamp);
      }
      if (insuranceFund_ != null) {
        output.WriteRawTag(202, 18);
        output.WriteMessage(InsuranceFund);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += trades_.CalculateSize(_repeated_trades_codec);
      size += ohlcvs_.CalculateSize(_repeated_ohlcvs_codec);
      if (lastTradePrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastTradePrice);
      }
      if (lastTradeQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastTradeQuantity);
      }
      if (LastTradeTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastTradeTimestamp);
      }
      if (EventTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(EventTimestamp);
      }
      size += dailyStats_.CalculateSize(_repeated_dailyStats_codec);
      if (FundingTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(FundingTime);
      }
      if (fundingRate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FundingRate);
      }
      if (nextFundingRate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NextFundingRate);
      }
      if (tickValue_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TickValue);
      }
      if (tickPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TickPrice);
      }
      if (contractValue_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ContractValue);
      }
      if (FundingInterval != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(FundingInterval);
      }
      if (payoutPerContract_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PayoutPerContract);
      }
      if (AlertTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AlertTimestamp);
      }
      if (AlertText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AlertText);
      }
      if (openInterest_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OpenInterest);
      }
      if (insuranceFund_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InsuranceFund);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketStateMessage other) {
      if (other == null) {
        return;
      }
      trades_.Add(other.trades_);
      ohlcvs_.Add(other.ohlcvs_);
      if (other.lastTradePrice_ != null) {
        if (lastTradePrice_ == null) {
          LastTradePrice = new global::DigitexWire.Decimal();
        }
        LastTradePrice.MergeFrom(other.LastTradePrice);
      }
      if (other.lastTradeQuantity_ != null) {
        if (lastTradeQuantity_ == null) {
          LastTradeQuantity = new global::DigitexWire.Decimal();
        }
        LastTradeQuantity.MergeFrom(other.LastTradeQuantity);
      }
      if (other.LastTradeTimestamp != 0L) {
        LastTradeTimestamp = other.LastTradeTimestamp;
      }
      if (other.EventTimestamp != 0L) {
        EventTimestamp = other.EventTimestamp;
      }
      dailyStats_.Add(other.dailyStats_);
      if (other.FundingTime != 0L) {
        FundingTime = other.FundingTime;
      }
      if (other.fundingRate_ != null) {
        if (fundingRate_ == null) {
          FundingRate = new global::DigitexWire.Decimal();
        }
        FundingRate.MergeFrom(other.FundingRate);
      }
      if (other.nextFundingRate_ != null) {
        if (nextFundingRate_ == null) {
          NextFundingRate = new global::DigitexWire.Decimal();
        }
        NextFundingRate.MergeFrom(other.NextFundingRate);
      }
      if (other.tickValue_ != null) {
        if (tickValue_ == null) {
          TickValue = new global::DigitexWire.Decimal();
        }
        TickValue.MergeFrom(other.TickValue);
      }
      if (other.tickPrice_ != null) {
        if (tickPrice_ == null) {
          TickPrice = new global::DigitexWire.Decimal();
        }
        TickPrice.MergeFrom(other.TickPrice);
      }
      if (other.contractValue_ != null) {
        if (contractValue_ == null) {
          ContractValue = new global::DigitexWire.Decimal();
        }
        ContractValue.MergeFrom(other.ContractValue);
      }
      if (other.FundingInterval != 0L) {
        FundingInterval = other.FundingInterval;
      }
      if (other.payoutPerContract_ != null) {
        if (payoutPerContract_ == null) {
          PayoutPerContract = new global::DigitexWire.Decimal();
        }
        PayoutPerContract.MergeFrom(other.PayoutPerContract);
      }
      if (other.AlertTimestamp != 0L) {
        AlertTimestamp = other.AlertTimestamp;
      }
      if (other.AlertText.Length != 0) {
        AlertText = other.AlertText;
      }
      if (other.openInterest_ != null) {
        if (openInterest_ == null) {
          OpenInterest = new global::DigitexWire.Decimal();
        }
        OpenInterest.MergeFrom(other.OpenInterest);
      }
      if (other.insuranceFund_ != null) {
        if (insuranceFund_ == null) {
          InsuranceFund = new global::DigitexWire.Decimal();
        }
        InsuranceFund.MergeFrom(other.InsuranceFund);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 370: {
            trades_.AddEntriesFrom(input, _repeated_trades_codec);
            break;
          }
          case 730: {
            ohlcvs_.AddEntriesFrom(input, _repeated_ohlcvs_codec);
            break;
          }
          case 818: {
            if (payoutPerContract_ == null) {
              PayoutPerContract = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PayoutPerContract);
            break;
          }
          case 906: {
            if (lastTradePrice_ == null) {
              LastTradePrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradePrice);
            break;
          }
          case 930: {
            if (lastTradeQuantity_ == null) {
              LastTradeQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradeQuantity);
            break;
          }
          case 976: {
            EventTimestamp = input.ReadInt64();
            break;
          }
          case 986: {
            dailyStats_.AddEntriesFrom(input, _repeated_dailyStats_codec);
            break;
          }
          case 1016: {
            FundingTime = input.ReadInt64();
            break;
          }
          case 1026: {
            if (fundingRate_ == null) {
              FundingRate = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FundingRate);
            break;
          }
          case 1034: {
            if (nextFundingRate_ == null) {
              NextFundingRate = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(NextFundingRate);
            break;
          }
          case 1050: {
            if (tickValue_ == null) {
              TickValue = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TickValue);
            break;
          }
          case 1058: {
            if (tickPrice_ == null) {
              TickPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TickPrice);
            break;
          }
          case 1066: {
            if (contractValue_ == null) {
              ContractValue = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(ContractValue);
            break;
          }
          case 1296: {
            FundingInterval = input.ReadInt64();
            break;
          }
          case 1680: {
            AlertTimestamp = input.ReadInt64();
            break;
          }
          case 1690: {
            AlertText = input.ReadString();
            break;
          }
          case 2362: {
            if (openInterest_ == null) {
              OpenInterest = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OpenInterest);
            break;
          }
          case 2368: {
            LastTradeTimestamp = input.ReadInt64();
            break;
          }
          case 2378: {
            if (insuranceFund_ == null) {
              InsuranceFund = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(InsuranceFund);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 370: {
            trades_.AddEntriesFrom(ref input, _repeated_trades_codec);
            break;
          }
          case 730: {
            ohlcvs_.AddEntriesFrom(ref input, _repeated_ohlcvs_codec);
            break;
          }
          case 818: {
            if (payoutPerContract_ == null) {
              PayoutPerContract = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PayoutPerContract);
            break;
          }
          case 906: {
            if (lastTradePrice_ == null) {
              LastTradePrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradePrice);
            break;
          }
          case 930: {
            if (lastTradeQuantity_ == null) {
              LastTradeQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradeQuantity);
            break;
          }
          case 976: {
            EventTimestamp = input.ReadInt64();
            break;
          }
          case 986: {
            dailyStats_.AddEntriesFrom(ref input, _repeated_dailyStats_codec);
            break;
          }
          case 1016: {
            FundingTime = input.ReadInt64();
            break;
          }
          case 1026: {
            if (fundingRate_ == null) {
              FundingRate = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FundingRate);
            break;
          }
          case 1034: {
            if (nextFundingRate_ == null) {
              NextFundingRate = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(NextFundingRate);
            break;
          }
          case 1050: {
            if (tickValue_ == null) {
              TickValue = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TickValue);
            break;
          }
          case 1058: {
            if (tickPrice_ == null) {
              TickPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TickPrice);
            break;
          }
          case 1066: {
            if (contractValue_ == null) {
              ContractValue = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(ContractValue);
            break;
          }
          case 1296: {
            FundingInterval = input.ReadInt64();
            break;
          }
          case 1680: {
            AlertTimestamp = input.ReadInt64();
            break;
          }
          case 1690: {
            AlertText = input.ReadString();
            break;
          }
          case 2362: {
            if (openInterest_ == null) {
              OpenInterest = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OpenInterest);
            break;
          }
          case 2368: {
            LastTradeTimestamp = input.ReadInt64();
            break;
          }
          case 2378: {
            if (insuranceFund_ == null) {
              InsuranceFund = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(InsuranceFund);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MarketStateUpdateMessage : pb::IMessage<MarketStateUpdateMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MarketStateUpdateMessage> _parser = new pb::MessageParser<MarketStateUpdateMessage>(() => new MarketStateUpdateMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketStateUpdateMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketStateUpdateMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketStateUpdateMessage(MarketStateUpdateMessage other) : this() {
      trades_ = other.trades_.Clone();
      ohlcvs_ = other.ohlcvs_.Clone();
      lastTradePrice_ = other.lastTradePrice_ != null ? other.lastTradePrice_.Clone() : null;
      lastTradeQuantity_ = other.lastTradeQuantity_ != null ? other.lastTradeQuantity_.Clone() : null;
      lastTradeTimestamp_ = other.lastTradeTimestamp_;
      eventTimestamp_ = other.eventTimestamp_;
      dailyStats_ = other.dailyStats_.Clone();
      fundingTime_ = other.fundingTime_;
      fundingRate_ = other.fundingRate_ != null ? other.fundingRate_.Clone() : null;
      fundingInterval_ = other.fundingInterval_;
      impactBaseQuantity_ = other.impactBaseQuantity_ != null ? other.impactBaseQuantity_.Clone() : null;
      dgtxToBasePrice_ = other.dgtxToBasePrice_ != null ? other.dgtxToBasePrice_.Clone() : null;
      impactValue_ = other.impactValue_ != null ? other.impactValue_.Clone() : null;
      impactQuantity_ = other.impactQuantity_ != null ? other.impactQuantity_.Clone() : null;
      impactBidValue_ = other.impactBidValue_ != null ? other.impactBidValue_.Clone() : null;
      impactBidCount_ = other.impactBidCount_ != null ? other.impactBidCount_.Clone() : null;
      impactAskValue_ = other.impactAskValue_ != null ? other.impactAskValue_.Clone() : null;
      impactAskCount_ = other.impactAskCount_ != null ? other.impactAskCount_.Clone() : null;
      futureValue_ = other.futureValue_ != null ? other.futureValue_.Clone() : null;
      futureCount_ = other.futureCount_ != null ? other.futureCount_.Clone() : null;
      spotPrice_ = other.spotPrice_ != null ? other.spotPrice_.Clone() : null;
      payoutPerContract_ = other.payoutPerContract_ != null ? other.payoutPerContract_.Clone() : null;
      alertTimestamp_ = other.alertTimestamp_;
      alertText_ = other.alertText_;
      openInterest_ = other.openInterest_ != null ? other.openInterest_.Clone() : null;
      insuranceFund_ = other.insuranceFund_ != null ? other.insuranceFund_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketStateUpdateMessage Clone() {
      return new MarketStateUpdateMessage(this);
    }

    /// <summary>Field number for the "trades" field.</summary>
    public const int TradesFieldNumber = 46;
    private static readonly pb::FieldCodec<global::DigitexWire.TradeMessage> _repeated_trades_codec
        = pb::FieldCodec.ForMessage(370, global::DigitexWire.TradeMessage.Parser);
    private readonly pbc::RepeatedField<global::DigitexWire.TradeMessage> trades_ = new pbc::RepeatedField<global::DigitexWire.TradeMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DigitexWire.TradeMessage> Trades {
      get { return trades_; }
    }

    /// <summary>Field number for the "ohlcvs" field.</summary>
    public const int OhlcvsFieldNumber = 91;
    private static readonly pb::FieldCodec<global::DigitexWire.OHLCVMessage> _repeated_ohlcvs_codec
        = pb::FieldCodec.ForMessage(730, global::DigitexWire.OHLCVMessage.Parser);
    private readonly pbc::RepeatedField<global::DigitexWire.OHLCVMessage> ohlcvs_ = new pbc::RepeatedField<global::DigitexWire.OHLCVMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DigitexWire.OHLCVMessage> Ohlcvs {
      get { return ohlcvs_; }
    }

    /// <summary>Field number for the "last_trade_price" field.</summary>
    public const int LastTradePriceFieldNumber = 113;
    private global::DigitexWire.Decimal lastTradePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal LastTradePrice {
      get { return lastTradePrice_; }
      set {
        lastTradePrice_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_quantity" field.</summary>
    public const int LastTradeQuantityFieldNumber = 116;
    private global::DigitexWire.Decimal lastTradeQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal LastTradeQuantity {
      get { return lastTradeQuantity_; }
      set {
        lastTradeQuantity_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_timestamp" field.</summary>
    public const int LastTradeTimestampFieldNumber = 296;
    private long lastTradeTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastTradeTimestamp {
      get { return lastTradeTimestamp_; }
      set {
        lastTradeTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "event_timestamp" field.</summary>
    public const int EventTimestampFieldNumber = 122;
    private long eventTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EventTimestamp {
      get { return eventTimestamp_; }
      set {
        eventTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "daily_stats" field.</summary>
    public const int DailyStatsFieldNumber = 123;
    private static readonly pb::FieldCodec<global::DigitexWire.DailyStatisticsMessage> _repeated_dailyStats_codec
        = pb::FieldCodec.ForMessage(986, global::DigitexWire.DailyStatisticsMessage.Parser);
    private readonly pbc::RepeatedField<global::DigitexWire.DailyStatisticsMessage> dailyStats_ = new pbc::RepeatedField<global::DigitexWire.DailyStatisticsMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DigitexWire.DailyStatisticsMessage> DailyStats {
      get { return dailyStats_; }
    }

    /// <summary>Field number for the "funding_time" field.</summary>
    public const int FundingTimeFieldNumber = 127;
    private long fundingTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FundingTime {
      get { return fundingTime_; }
      set {
        fundingTime_ = value;
      }
    }

    /// <summary>Field number for the "funding_rate" field.</summary>
    public const int FundingRateFieldNumber = 128;
    private global::DigitexWire.Decimal fundingRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FundingRate {
      get { return fundingRate_; }
      set {
        fundingRate_ = value;
      }
    }

    /// <summary>Field number for the "funding_interval" field.</summary>
    public const int FundingIntervalFieldNumber = 162;
    private long fundingInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FundingInterval {
      get { return fundingInterval_; }
      set {
        fundingInterval_ = value;
      }
    }

    /// <summary>Field number for the "impact_base_quantity" field.</summary>
    public const int ImpactBaseQuantityFieldNumber = 137;
    private global::DigitexWire.Decimal impactBaseQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal ImpactBaseQuantity {
      get { return impactBaseQuantity_; }
      set {
        impactBaseQuantity_ = value;
      }
    }

    /// <summary>Field number for the "dgtx_to_base_price" field.</summary>
    public const int DgtxToBasePriceFieldNumber = 138;
    private global::DigitexWire.Decimal dgtxToBasePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal DgtxToBasePrice {
      get { return dgtxToBasePrice_; }
      set {
        dgtxToBasePrice_ = value;
      }
    }

    /// <summary>Field number for the "impact_value" field.</summary>
    public const int ImpactValueFieldNumber = 158;
    private global::DigitexWire.Decimal impactValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal ImpactValue {
      get { return impactValue_; }
      set {
        impactValue_ = value;
      }
    }

    /// <summary>Field number for the "impact_quantity" field.</summary>
    public const int ImpactQuantityFieldNumber = 140;
    private global::DigitexWire.Decimal impactQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal ImpactQuantity {
      get { return impactQuantity_; }
      set {
        impactQuantity_ = value;
      }
    }

    /// <summary>Field number for the "impact_bid_value" field.</summary>
    public const int ImpactBidValueFieldNumber = 141;
    private global::DigitexWire.Decimal impactBidValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal ImpactBidValue {
      get { return impactBidValue_; }
      set {
        impactBidValue_ = value;
      }
    }

    /// <summary>Field number for the "impact_bid_count" field.</summary>
    public const int ImpactBidCountFieldNumber = 159;
    private global::DigitexWire.Decimal impactBidCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal ImpactBidCount {
      get { return impactBidCount_; }
      set {
        impactBidCount_ = value;
      }
    }

    /// <summary>Field number for the "impact_ask_value" field.</summary>
    public const int ImpactAskValueFieldNumber = 142;
    private global::DigitexWire.Decimal impactAskValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal ImpactAskValue {
      get { return impactAskValue_; }
      set {
        impactAskValue_ = value;
      }
    }

    /// <summary>Field number for the "impact_ask_count" field.</summary>
    public const int ImpactAskCountFieldNumber = 160;
    private global::DigitexWire.Decimal impactAskCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal ImpactAskCount {
      get { return impactAskCount_; }
      set {
        impactAskCount_ = value;
      }
    }

    /// <summary>Field number for the "future_value" field.</summary>
    public const int FutureValueFieldNumber = 143;
    private global::DigitexWire.Decimal futureValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FutureValue {
      get { return futureValue_; }
      set {
        futureValue_ = value;
      }
    }

    /// <summary>Field number for the "future_count" field.</summary>
    public const int FutureCountFieldNumber = 161;
    private global::DigitexWire.Decimal futureCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FutureCount {
      get { return futureCount_; }
      set {
        futureCount_ = value;
      }
    }

    /// <summary>Field number for the "spot_price" field.</summary>
    public const int SpotPriceFieldNumber = 139;
    private global::DigitexWire.Decimal spotPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal SpotPrice {
      get { return spotPrice_; }
      set {
        spotPrice_ = value;
      }
    }

    /// <summary>Field number for the "payout_per_contract" field.</summary>
    public const int PayoutPerContractFieldNumber = 102;
    private global::DigitexWire.Decimal payoutPerContract_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PayoutPerContract {
      get { return payoutPerContract_; }
      set {
        payoutPerContract_ = value;
      }
    }

    /// <summary>Field number for the "alert_timestamp" field.</summary>
    public const int AlertTimestampFieldNumber = 210;
    private long alertTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AlertTimestamp {
      get { return alertTimestamp_; }
      set {
        alertTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "alert_text" field.</summary>
    public const int AlertTextFieldNumber = 211;
    private string alertText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlertText {
      get { return alertText_; }
      set {
        alertText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "open_interest" field.</summary>
    public const int OpenInterestFieldNumber = 295;
    private global::DigitexWire.Decimal openInterest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal OpenInterest {
      get { return openInterest_; }
      set {
        openInterest_ = value;
      }
    }

    /// <summary>Field number for the "insurance_fund" field.</summary>
    public const int InsuranceFundFieldNumber = 297;
    private global::DigitexWire.Decimal insuranceFund_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal InsuranceFund {
      get { return insuranceFund_; }
      set {
        insuranceFund_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketStateUpdateMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketStateUpdateMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!trades_.Equals(other.trades_)) return false;
      if(!ohlcvs_.Equals(other.ohlcvs_)) return false;
      if (!object.Equals(LastTradePrice, other.LastTradePrice)) return false;
      if (!object.Equals(LastTradeQuantity, other.LastTradeQuantity)) return false;
      if (LastTradeTimestamp != other.LastTradeTimestamp) return false;
      if (EventTimestamp != other.EventTimestamp) return false;
      if(!dailyStats_.Equals(other.dailyStats_)) return false;
      if (FundingTime != other.FundingTime) return false;
      if (!object.Equals(FundingRate, other.FundingRate)) return false;
      if (FundingInterval != other.FundingInterval) return false;
      if (!object.Equals(ImpactBaseQuantity, other.ImpactBaseQuantity)) return false;
      if (!object.Equals(DgtxToBasePrice, other.DgtxToBasePrice)) return false;
      if (!object.Equals(ImpactValue, other.ImpactValue)) return false;
      if (!object.Equals(ImpactQuantity, other.ImpactQuantity)) return false;
      if (!object.Equals(ImpactBidValue, other.ImpactBidValue)) return false;
      if (!object.Equals(ImpactBidCount, other.ImpactBidCount)) return false;
      if (!object.Equals(ImpactAskValue, other.ImpactAskValue)) return false;
      if (!object.Equals(ImpactAskCount, other.ImpactAskCount)) return false;
      if (!object.Equals(FutureValue, other.FutureValue)) return false;
      if (!object.Equals(FutureCount, other.FutureCount)) return false;
      if (!object.Equals(SpotPrice, other.SpotPrice)) return false;
      if (!object.Equals(PayoutPerContract, other.PayoutPerContract)) return false;
      if (AlertTimestamp != other.AlertTimestamp) return false;
      if (AlertText != other.AlertText) return false;
      if (!object.Equals(OpenInterest, other.OpenInterest)) return false;
      if (!object.Equals(InsuranceFund, other.InsuranceFund)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= trades_.GetHashCode();
      hash ^= ohlcvs_.GetHashCode();
      if (lastTradePrice_ != null) hash ^= LastTradePrice.GetHashCode();
      if (lastTradeQuantity_ != null) hash ^= LastTradeQuantity.GetHashCode();
      if (LastTradeTimestamp != 0L) hash ^= LastTradeTimestamp.GetHashCode();
      if (EventTimestamp != 0L) hash ^= EventTimestamp.GetHashCode();
      hash ^= dailyStats_.GetHashCode();
      if (FundingTime != 0L) hash ^= FundingTime.GetHashCode();
      if (fundingRate_ != null) hash ^= FundingRate.GetHashCode();
      if (FundingInterval != 0L) hash ^= FundingInterval.GetHashCode();
      if (impactBaseQuantity_ != null) hash ^= ImpactBaseQuantity.GetHashCode();
      if (dgtxToBasePrice_ != null) hash ^= DgtxToBasePrice.GetHashCode();
      if (impactValue_ != null) hash ^= ImpactValue.GetHashCode();
      if (impactQuantity_ != null) hash ^= ImpactQuantity.GetHashCode();
      if (impactBidValue_ != null) hash ^= ImpactBidValue.GetHashCode();
      if (impactBidCount_ != null) hash ^= ImpactBidCount.GetHashCode();
      if (impactAskValue_ != null) hash ^= ImpactAskValue.GetHashCode();
      if (impactAskCount_ != null) hash ^= ImpactAskCount.GetHashCode();
      if (futureValue_ != null) hash ^= FutureValue.GetHashCode();
      if (futureCount_ != null) hash ^= FutureCount.GetHashCode();
      if (spotPrice_ != null) hash ^= SpotPrice.GetHashCode();
      if (payoutPerContract_ != null) hash ^= PayoutPerContract.GetHashCode();
      if (AlertTimestamp != 0L) hash ^= AlertTimestamp.GetHashCode();
      if (AlertText.Length != 0) hash ^= AlertText.GetHashCode();
      if (openInterest_ != null) hash ^= OpenInterest.GetHashCode();
      if (insuranceFund_ != null) hash ^= InsuranceFund.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      trades_.WriteTo(output, _repeated_trades_codec);
      ohlcvs_.WriteTo(output, _repeated_ohlcvs_codec);
      if (payoutPerContract_ != null) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(PayoutPerContract);
      }
      if (lastTradePrice_ != null) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(LastTradePrice);
      }
      if (lastTradeQuantity_ != null) {
        output.WriteRawTag(162, 7);
        output.WriteMessage(LastTradeQuantity);
      }
      if (EventTimestamp != 0L) {
        output.WriteRawTag(208, 7);
        output.WriteInt64(EventTimestamp);
      }
      dailyStats_.WriteTo(output, _repeated_dailyStats_codec);
      if (FundingTime != 0L) {
        output.WriteRawTag(248, 7);
        output.WriteInt64(FundingTime);
      }
      if (fundingRate_ != null) {
        output.WriteRawTag(130, 8);
        output.WriteMessage(FundingRate);
      }
      if (impactBaseQuantity_ != null) {
        output.WriteRawTag(202, 8);
        output.WriteMessage(ImpactBaseQuantity);
      }
      if (dgtxToBasePrice_ != null) {
        output.WriteRawTag(210, 8);
        output.WriteMessage(DgtxToBasePrice);
      }
      if (spotPrice_ != null) {
        output.WriteRawTag(218, 8);
        output.WriteMessage(SpotPrice);
      }
      if (impactQuantity_ != null) {
        output.WriteRawTag(226, 8);
        output.WriteMessage(ImpactQuantity);
      }
      if (impactBidValue_ != null) {
        output.WriteRawTag(234, 8);
        output.WriteMessage(ImpactBidValue);
      }
      if (impactAskValue_ != null) {
        output.WriteRawTag(242, 8);
        output.WriteMessage(ImpactAskValue);
      }
      if (futureValue_ != null) {
        output.WriteRawTag(250, 8);
        output.WriteMessage(FutureValue);
      }
      if (impactValue_ != null) {
        output.WriteRawTag(242, 9);
        output.WriteMessage(ImpactValue);
      }
      if (impactBidCount_ != null) {
        output.WriteRawTag(250, 9);
        output.WriteMessage(ImpactBidCount);
      }
      if (impactAskCount_ != null) {
        output.WriteRawTag(130, 10);
        output.WriteMessage(ImpactAskCount);
      }
      if (futureCount_ != null) {
        output.WriteRawTag(138, 10);
        output.WriteMessage(FutureCount);
      }
      if (FundingInterval != 0L) {
        output.WriteRawTag(144, 10);
        output.WriteInt64(FundingInterval);
      }
      if (AlertTimestamp != 0L) {
        output.WriteRawTag(144, 13);
        output.WriteInt64(AlertTimestamp);
      }
      if (AlertText.Length != 0) {
        output.WriteRawTag(154, 13);
        output.WriteString(AlertText);
      }
      if (openInterest_ != null) {
        output.WriteRawTag(186, 18);
        output.WriteMessage(OpenInterest);
      }
      if (LastTradeTimestamp != 0L) {
        output.WriteRawTag(192, 18);
        output.WriteInt64(LastTradeTimestamp);
      }
      if (insuranceFund_ != null) {
        output.WriteRawTag(202, 18);
        output.WriteMessage(InsuranceFund);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      trades_.WriteTo(ref output, _repeated_trades_codec);
      ohlcvs_.WriteTo(ref output, _repeated_ohlcvs_codec);
      if (payoutPerContract_ != null) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(PayoutPerContract);
      }
      if (lastTradePrice_ != null) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(LastTradePrice);
      }
      if (lastTradeQuantity_ != null) {
        output.WriteRawTag(162, 7);
        output.WriteMessage(LastTradeQuantity);
      }
      if (EventTimestamp != 0L) {
        output.WriteRawTag(208, 7);
        output.WriteInt64(EventTimestamp);
      }
      dailyStats_.WriteTo(ref output, _repeated_dailyStats_codec);
      if (FundingTime != 0L) {
        output.WriteRawTag(248, 7);
        output.WriteInt64(FundingTime);
      }
      if (fundingRate_ != null) {
        output.WriteRawTag(130, 8);
        output.WriteMessage(FundingRate);
      }
      if (impactBaseQuantity_ != null) {
        output.WriteRawTag(202, 8);
        output.WriteMessage(ImpactBaseQuantity);
      }
      if (dgtxToBasePrice_ != null) {
        output.WriteRawTag(210, 8);
        output.WriteMessage(DgtxToBasePrice);
      }
      if (spotPrice_ != null) {
        output.WriteRawTag(218, 8);
        output.WriteMessage(SpotPrice);
      }
      if (impactQuantity_ != null) {
        output.WriteRawTag(226, 8);
        output.WriteMessage(ImpactQuantity);
      }
      if (impactBidValue_ != null) {
        output.WriteRawTag(234, 8);
        output.WriteMessage(ImpactBidValue);
      }
      if (impactAskValue_ != null) {
        output.WriteRawTag(242, 8);
        output.WriteMessage(ImpactAskValue);
      }
      if (futureValue_ != null) {
        output.WriteRawTag(250, 8);
        output.WriteMessage(FutureValue);
      }
      if (impactValue_ != null) {
        output.WriteRawTag(242, 9);
        output.WriteMessage(ImpactValue);
      }
      if (impactBidCount_ != null) {
        output.WriteRawTag(250, 9);
        output.WriteMessage(ImpactBidCount);
      }
      if (impactAskCount_ != null) {
        output.WriteRawTag(130, 10);
        output.WriteMessage(ImpactAskCount);
      }
      if (futureCount_ != null) {
        output.WriteRawTag(138, 10);
        output.WriteMessage(FutureCount);
      }
      if (FundingInterval != 0L) {
        output.WriteRawTag(144, 10);
        output.WriteInt64(FundingInterval);
      }
      if (AlertTimestamp != 0L) {
        output.WriteRawTag(144, 13);
        output.WriteInt64(AlertTimestamp);
      }
      if (AlertText.Length != 0) {
        output.WriteRawTag(154, 13);
        output.WriteString(AlertText);
      }
      if (openInterest_ != null) {
        output.WriteRawTag(186, 18);
        output.WriteMessage(OpenInterest);
      }
      if (LastTradeTimestamp != 0L) {
        output.WriteRawTag(192, 18);
        output.WriteInt64(LastTradeTimestamp);
      }
      if (insuranceFund_ != null) {
        output.WriteRawTag(202, 18);
        output.WriteMessage(InsuranceFund);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += trades_.CalculateSize(_repeated_trades_codec);
      size += ohlcvs_.CalculateSize(_repeated_ohlcvs_codec);
      if (lastTradePrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastTradePrice);
      }
      if (lastTradeQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastTradeQuantity);
      }
      if (LastTradeTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastTradeTimestamp);
      }
      if (EventTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(EventTimestamp);
      }
      size += dailyStats_.CalculateSize(_repeated_dailyStats_codec);
      if (FundingTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(FundingTime);
      }
      if (fundingRate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FundingRate);
      }
      if (FundingInterval != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(FundingInterval);
      }
      if (impactBaseQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ImpactBaseQuantity);
      }
      if (dgtxToBasePrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DgtxToBasePrice);
      }
      if (impactValue_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ImpactValue);
      }
      if (impactQuantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ImpactQuantity);
      }
      if (impactBidValue_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ImpactBidValue);
      }
      if (impactBidCount_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ImpactBidCount);
      }
      if (impactAskValue_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ImpactAskValue);
      }
      if (impactAskCount_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ImpactAskCount);
      }
      if (futureValue_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FutureValue);
      }
      if (futureCount_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FutureCount);
      }
      if (spotPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SpotPrice);
      }
      if (payoutPerContract_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PayoutPerContract);
      }
      if (AlertTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AlertTimestamp);
      }
      if (AlertText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AlertText);
      }
      if (openInterest_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OpenInterest);
      }
      if (insuranceFund_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InsuranceFund);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketStateUpdateMessage other) {
      if (other == null) {
        return;
      }
      trades_.Add(other.trades_);
      ohlcvs_.Add(other.ohlcvs_);
      if (other.lastTradePrice_ != null) {
        if (lastTradePrice_ == null) {
          LastTradePrice = new global::DigitexWire.Decimal();
        }
        LastTradePrice.MergeFrom(other.LastTradePrice);
      }
      if (other.lastTradeQuantity_ != null) {
        if (lastTradeQuantity_ == null) {
          LastTradeQuantity = new global::DigitexWire.Decimal();
        }
        LastTradeQuantity.MergeFrom(other.LastTradeQuantity);
      }
      if (other.LastTradeTimestamp != 0L) {
        LastTradeTimestamp = other.LastTradeTimestamp;
      }
      if (other.EventTimestamp != 0L) {
        EventTimestamp = other.EventTimestamp;
      }
      dailyStats_.Add(other.dailyStats_);
      if (other.FundingTime != 0L) {
        FundingTime = other.FundingTime;
      }
      if (other.fundingRate_ != null) {
        if (fundingRate_ == null) {
          FundingRate = new global::DigitexWire.Decimal();
        }
        FundingRate.MergeFrom(other.FundingRate);
      }
      if (other.FundingInterval != 0L) {
        FundingInterval = other.FundingInterval;
      }
      if (other.impactBaseQuantity_ != null) {
        if (impactBaseQuantity_ == null) {
          ImpactBaseQuantity = new global::DigitexWire.Decimal();
        }
        ImpactBaseQuantity.MergeFrom(other.ImpactBaseQuantity);
      }
      if (other.dgtxToBasePrice_ != null) {
        if (dgtxToBasePrice_ == null) {
          DgtxToBasePrice = new global::DigitexWire.Decimal();
        }
        DgtxToBasePrice.MergeFrom(other.DgtxToBasePrice);
      }
      if (other.impactValue_ != null) {
        if (impactValue_ == null) {
          ImpactValue = new global::DigitexWire.Decimal();
        }
        ImpactValue.MergeFrom(other.ImpactValue);
      }
      if (other.impactQuantity_ != null) {
        if (impactQuantity_ == null) {
          ImpactQuantity = new global::DigitexWire.Decimal();
        }
        ImpactQuantity.MergeFrom(other.ImpactQuantity);
      }
      if (other.impactBidValue_ != null) {
        if (impactBidValue_ == null) {
          ImpactBidValue = new global::DigitexWire.Decimal();
        }
        ImpactBidValue.MergeFrom(other.ImpactBidValue);
      }
      if (other.impactBidCount_ != null) {
        if (impactBidCount_ == null) {
          ImpactBidCount = new global::DigitexWire.Decimal();
        }
        ImpactBidCount.MergeFrom(other.ImpactBidCount);
      }
      if (other.impactAskValue_ != null) {
        if (impactAskValue_ == null) {
          ImpactAskValue = new global::DigitexWire.Decimal();
        }
        ImpactAskValue.MergeFrom(other.ImpactAskValue);
      }
      if (other.impactAskCount_ != null) {
        if (impactAskCount_ == null) {
          ImpactAskCount = new global::DigitexWire.Decimal();
        }
        ImpactAskCount.MergeFrom(other.ImpactAskCount);
      }
      if (other.futureValue_ != null) {
        if (futureValue_ == null) {
          FutureValue = new global::DigitexWire.Decimal();
        }
        FutureValue.MergeFrom(other.FutureValue);
      }
      if (other.futureCount_ != null) {
        if (futureCount_ == null) {
          FutureCount = new global::DigitexWire.Decimal();
        }
        FutureCount.MergeFrom(other.FutureCount);
      }
      if (other.spotPrice_ != null) {
        if (spotPrice_ == null) {
          SpotPrice = new global::DigitexWire.Decimal();
        }
        SpotPrice.MergeFrom(other.SpotPrice);
      }
      if (other.payoutPerContract_ != null) {
        if (payoutPerContract_ == null) {
          PayoutPerContract = new global::DigitexWire.Decimal();
        }
        PayoutPerContract.MergeFrom(other.PayoutPerContract);
      }
      if (other.AlertTimestamp != 0L) {
        AlertTimestamp = other.AlertTimestamp;
      }
      if (other.AlertText.Length != 0) {
        AlertText = other.AlertText;
      }
      if (other.openInterest_ != null) {
        if (openInterest_ == null) {
          OpenInterest = new global::DigitexWire.Decimal();
        }
        OpenInterest.MergeFrom(other.OpenInterest);
      }
      if (other.insuranceFund_ != null) {
        if (insuranceFund_ == null) {
          InsuranceFund = new global::DigitexWire.Decimal();
        }
        InsuranceFund.MergeFrom(other.InsuranceFund);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 370: {
            trades_.AddEntriesFrom(input, _repeated_trades_codec);
            break;
          }
          case 730: {
            ohlcvs_.AddEntriesFrom(input, _repeated_ohlcvs_codec);
            break;
          }
          case 818: {
            if (payoutPerContract_ == null) {
              PayoutPerContract = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PayoutPerContract);
            break;
          }
          case 906: {
            if (lastTradePrice_ == null) {
              LastTradePrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradePrice);
            break;
          }
          case 930: {
            if (lastTradeQuantity_ == null) {
              LastTradeQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradeQuantity);
            break;
          }
          case 976: {
            EventTimestamp = input.ReadInt64();
            break;
          }
          case 986: {
            dailyStats_.AddEntriesFrom(input, _repeated_dailyStats_codec);
            break;
          }
          case 1016: {
            FundingTime = input.ReadInt64();
            break;
          }
          case 1026: {
            if (fundingRate_ == null) {
              FundingRate = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FundingRate);
            break;
          }
          case 1098: {
            if (impactBaseQuantity_ == null) {
              ImpactBaseQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(ImpactBaseQuantity);
            break;
          }
          case 1106: {
            if (dgtxToBasePrice_ == null) {
              DgtxToBasePrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(DgtxToBasePrice);
            break;
          }
          case 1114: {
            if (spotPrice_ == null) {
              SpotPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SpotPrice);
            break;
          }
          case 1122: {
            if (impactQuantity_ == null) {
              ImpactQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(ImpactQuantity);
            break;
          }
          case 1130: {
            if (impactBidValue_ == null) {
              ImpactBidValue = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(ImpactBidValue);
            break;
          }
          case 1138: {
            if (impactAskValue_ == null) {
              ImpactAskValue = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(ImpactAskValue);
            break;
          }
          case 1146: {
            if (futureValue_ == null) {
              FutureValue = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FutureValue);
            break;
          }
          case 1266: {
            if (impactValue_ == null) {
              ImpactValue = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(ImpactValue);
            break;
          }
          case 1274: {
            if (impactBidCount_ == null) {
              ImpactBidCount = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(ImpactBidCount);
            break;
          }
          case 1282: {
            if (impactAskCount_ == null) {
              ImpactAskCount = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(ImpactAskCount);
            break;
          }
          case 1290: {
            if (futureCount_ == null) {
              FutureCount = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FutureCount);
            break;
          }
          case 1296: {
            FundingInterval = input.ReadInt64();
            break;
          }
          case 1680: {
            AlertTimestamp = input.ReadInt64();
            break;
          }
          case 1690: {
            AlertText = input.ReadString();
            break;
          }
          case 2362: {
            if (openInterest_ == null) {
              OpenInterest = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OpenInterest);
            break;
          }
          case 2368: {
            LastTradeTimestamp = input.ReadInt64();
            break;
          }
          case 2378: {
            if (insuranceFund_ == null) {
              InsuranceFund = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(InsuranceFund);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 370: {
            trades_.AddEntriesFrom(ref input, _repeated_trades_codec);
            break;
          }
          case 730: {
            ohlcvs_.AddEntriesFrom(ref input, _repeated_ohlcvs_codec);
            break;
          }
          case 818: {
            if (payoutPerContract_ == null) {
              PayoutPerContract = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PayoutPerContract);
            break;
          }
          case 906: {
            if (lastTradePrice_ == null) {
              LastTradePrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradePrice);
            break;
          }
          case 930: {
            if (lastTradeQuantity_ == null) {
              LastTradeQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LastTradeQuantity);
            break;
          }
          case 976: {
            EventTimestamp = input.ReadInt64();
            break;
          }
          case 986: {
            dailyStats_.AddEntriesFrom(ref input, _repeated_dailyStats_codec);
            break;
          }
          case 1016: {
            FundingTime = input.ReadInt64();
            break;
          }
          case 1026: {
            if (fundingRate_ == null) {
              FundingRate = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FundingRate);
            break;
          }
          case 1098: {
            if (impactBaseQuantity_ == null) {
              ImpactBaseQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(ImpactBaseQuantity);
            break;
          }
          case 1106: {
            if (dgtxToBasePrice_ == null) {
              DgtxToBasePrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(DgtxToBasePrice);
            break;
          }
          case 1114: {
            if (spotPrice_ == null) {
              SpotPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(SpotPrice);
            break;
          }
          case 1122: {
            if (impactQuantity_ == null) {
              ImpactQuantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(ImpactQuantity);
            break;
          }
          case 1130: {
            if (impactBidValue_ == null) {
              ImpactBidValue = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(ImpactBidValue);
            break;
          }
          case 1138: {
            if (impactAskValue_ == null) {
              ImpactAskValue = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(ImpactAskValue);
            break;
          }
          case 1146: {
            if (futureValue_ == null) {
              FutureValue = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FutureValue);
            break;
          }
          case 1266: {
            if (impactValue_ == null) {
              ImpactValue = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(ImpactValue);
            break;
          }
          case 1274: {
            if (impactBidCount_ == null) {
              ImpactBidCount = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(ImpactBidCount);
            break;
          }
          case 1282: {
            if (impactAskCount_ == null) {
              ImpactAskCount = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(ImpactAskCount);
            break;
          }
          case 1290: {
            if (futureCount_ == null) {
              FutureCount = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FutureCount);
            break;
          }
          case 1296: {
            FundingInterval = input.ReadInt64();
            break;
          }
          case 1680: {
            AlertTimestamp = input.ReadInt64();
            break;
          }
          case 1690: {
            AlertText = input.ReadString();
            break;
          }
          case 2362: {
            if (openInterest_ == null) {
              OpenInterest = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OpenInterest);
            break;
          }
          case 2368: {
            LastTradeTimestamp = input.ReadInt64();
            break;
          }
          case 2378: {
            if (insuranceFund_ == null) {
              InsuranceFund = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(InsuranceFund);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GetExchangeRatesMessage : pb::IMessage<GetExchangeRatesMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetExchangeRatesMessage> _parser = new pb::MessageParser<GetExchangeRatesMessage>(() => new GetExchangeRatesMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetExchangeRatesMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExchangeRatesMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExchangeRatesMessage(GetExchangeRatesMessage other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExchangeRatesMessage Clone() {
      return new GetExchangeRatesMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetExchangeRatesMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetExchangeRatesMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetExchangeRatesMessage other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ExchangeRateItemMessage : pb::IMessage<ExchangeRateItemMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExchangeRateItemMessage> _parser = new pb::MessageParser<ExchangeRateItemMessage>(() => new ExchangeRateItemMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExchangeRateItemMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeRateItemMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeRateItemMessage(ExchangeRateItemMessage other) : this() {
      currencyPairId_ = other.currencyPairId_;
      markPrice_ = other.markPrice_ != null ? other.markPrice_.Clone() : null;
      lastUpdateTime_ = other.lastUpdateTime_;
      unreliable_ = other.unreliable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeRateItemMessage Clone() {
      return new ExchangeRateItemMessage(this);
    }

    /// <summary>Field number for the "currency_pair_id" field.</summary>
    public const int CurrencyPairIdFieldNumber = 47;
    private uint currencyPairId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrencyPairId {
      get { return currencyPairId_; }
      set {
        currencyPairId_ = value;
      }
    }

    /// <summary>Field number for the "mark_price" field.</summary>
    public const int MarkPriceFieldNumber = 52;
    private global::DigitexWire.Decimal markPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal MarkPrice {
      get { return markPrice_; }
      set {
        markPrice_ = value;
      }
    }

    /// <summary>Field number for the "last_update_time" field.</summary>
    public const int LastUpdateTimeFieldNumber = 121;
    private long lastUpdateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastUpdateTime {
      get { return lastUpdateTime_; }
      set {
        lastUpdateTime_ = value;
      }
    }

    /// <summary>Field number for the "unreliable" field.</summary>
    public const int UnreliableFieldNumber = 209;
    private int unreliable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Unreliable {
      get { return unreliable_; }
      set {
        unreliable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExchangeRateItemMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExchangeRateItemMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrencyPairId != other.CurrencyPairId) return false;
      if (!object.Equals(MarkPrice, other.MarkPrice)) return false;
      if (LastUpdateTime != other.LastUpdateTime) return false;
      if (Unreliable != other.Unreliable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrencyPairId != 0) hash ^= CurrencyPairId.GetHashCode();
      if (markPrice_ != null) hash ^= MarkPrice.GetHashCode();
      if (LastUpdateTime != 0L) hash ^= LastUpdateTime.GetHashCode();
      if (Unreliable != 0) hash ^= Unreliable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CurrencyPairId != 0) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(CurrencyPairId);
      }
      if (markPrice_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(MarkPrice);
      }
      if (LastUpdateTime != 0L) {
        output.WriteRawTag(200, 7);
        output.WriteInt64(LastUpdateTime);
      }
      if (Unreliable != 0) {
        output.WriteRawTag(136, 13);
        output.WriteInt32(Unreliable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CurrencyPairId != 0) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(CurrencyPairId);
      }
      if (markPrice_ != null) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(MarkPrice);
      }
      if (LastUpdateTime != 0L) {
        output.WriteRawTag(200, 7);
        output.WriteInt64(LastUpdateTime);
      }
      if (Unreliable != 0) {
        output.WriteRawTag(136, 13);
        output.WriteInt32(Unreliable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrencyPairId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CurrencyPairId);
      }
      if (markPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MarkPrice);
      }
      if (LastUpdateTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastUpdateTime);
      }
      if (Unreliable != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Unreliable);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExchangeRateItemMessage other) {
      if (other == null) {
        return;
      }
      if (other.CurrencyPairId != 0) {
        CurrencyPairId = other.CurrencyPairId;
      }
      if (other.markPrice_ != null) {
        if (markPrice_ == null) {
          MarkPrice = new global::DigitexWire.Decimal();
        }
        MarkPrice.MergeFrom(other.MarkPrice);
      }
      if (other.LastUpdateTime != 0L) {
        LastUpdateTime = other.LastUpdateTime;
      }
      if (other.Unreliable != 0) {
        Unreliable = other.Unreliable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 376: {
            CurrencyPairId = input.ReadUInt32();
            break;
          }
          case 418: {
            if (markPrice_ == null) {
              MarkPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(MarkPrice);
            break;
          }
          case 968: {
            LastUpdateTime = input.ReadInt64();
            break;
          }
          case 1672: {
            Unreliable = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 376: {
            CurrencyPairId = input.ReadUInt32();
            break;
          }
          case 418: {
            if (markPrice_ == null) {
              MarkPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(MarkPrice);
            break;
          }
          case 968: {
            LastUpdateTime = input.ReadInt64();
            break;
          }
          case 1672: {
            Unreliable = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ExchangeRatesMessage : pb::IMessage<ExchangeRatesMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExchangeRatesMessage> _parser = new pb::MessageParser<ExchangeRatesMessage>(() => new ExchangeRatesMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExchangeRatesMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeRatesMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeRatesMessage(ExchangeRatesMessage other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeRatesMessage Clone() {
      return new ExchangeRatesMessage(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 120;
    private static readonly pb::FieldCodec<global::DigitexWire.ExchangeRateItemMessage> _repeated_items_codec
        = pb::FieldCodec.ForMessage(962, global::DigitexWire.ExchangeRateItemMessage.Parser);
    private readonly pbc::RepeatedField<global::DigitexWire.ExchangeRateItemMessage> items_ = new pbc::RepeatedField<global::DigitexWire.ExchangeRateItemMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DigitexWire.ExchangeRateItemMessage> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExchangeRatesMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExchangeRatesMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      items_.WriteTo(ref output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExchangeRatesMessage other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 962: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 962: {
            items_.AddEntriesFrom(ref input, _repeated_items_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ContractClosedMessage : pb::IMessage<ContractClosedMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ContractClosedMessage> _parser = new pb::MessageParser<ContractClosedMessage>(() => new ContractClosedMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContractClosedMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContractClosedMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContractClosedMessage(ContractClosedMessage other) : this() {
      orderIds_ = other.orderIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContractClosedMessage Clone() {
      return new ContractClosedMessage(this);
    }

    /// <summary>Field number for the "order_ids" field.</summary>
    public const int OrderIdsFieldNumber = 103;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_orderIds_codec
        = pb::FieldCodec.ForBytes(826);
    private readonly pbc::RepeatedField<pb::ByteString> orderIds_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> OrderIds {
      get { return orderIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContractClosedMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContractClosedMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!orderIds_.Equals(other.orderIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= orderIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      orderIds_.WriteTo(output, _repeated_orderIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      orderIds_.WriteTo(ref output, _repeated_orderIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += orderIds_.CalculateSize(_repeated_orderIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContractClosedMessage other) {
      if (other == null) {
        return;
      }
      orderIds_.Add(other.orderIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 826: {
            orderIds_.AddEntriesFrom(input, _repeated_orderIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 826: {
            orderIds_.AddEntriesFrom(ref input, _repeated_orderIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GetTraderBalanceMessage : pb::IMessage<GetTraderBalanceMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetTraderBalanceMessage> _parser = new pb::MessageParser<GetTraderBalanceMessage>(() => new GetTraderBalanceMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTraderBalanceMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTraderBalanceMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTraderBalanceMessage(GetTraderBalanceMessage other) : this() {
      currencyId_ = other.currencyId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTraderBalanceMessage Clone() {
      return new GetTraderBalanceMessage(this);
    }

    /// <summary>Field number for the "currency_id" field.</summary>
    public const int CurrencyIdFieldNumber = 49;
    private uint currencyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrencyId {
      get { return currencyId_; }
      set {
        currencyId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTraderBalanceMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTraderBalanceMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrencyId != other.CurrencyId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrencyId != 0) hash ^= CurrencyId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CurrencyId != 0) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(CurrencyId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CurrencyId != 0) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(CurrencyId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrencyId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CurrencyId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTraderBalanceMessage other) {
      if (other == null) {
        return;
      }
      if (other.CurrencyId != 0) {
        CurrencyId = other.CurrencyId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 392: {
            CurrencyId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 392: {
            CurrencyId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DelayedActionMessage : pb::IMessage<DelayedActionMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DelayedActionMessage> _parser = new pb::MessageParser<DelayedActionMessage>(() => new DelayedActionMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DelayedActionMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelayedActionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelayedActionMessage(DelayedActionMessage other) : this() {
      delayedActionTimestamp_ = other.delayedActionTimestamp_;
      delayedActionClientId_ = other.delayedActionClientId_;
      oldDelayedActionClientId_ = other.oldDelayedActionClientId_;
      actionType_ = other.actionType_;
      triggerVariable_ = other.triggerVariable_;
      triggerCondition_ = other.triggerCondition_;
      triggerValue_ = other.triggerValue_ != null ? other.triggerValue_.Clone() : null;
      order_ = other.order_ != null ? other.order_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelayedActionMessage Clone() {
      return new DelayedActionMessage(this);
    }

    /// <summary>Field number for the "delayed_action_timestamp" field.</summary>
    public const int DelayedActionTimestampFieldNumber = 291;
    private long delayedActionTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DelayedActionTimestamp {
      get { return delayedActionTimestamp_; }
      set {
        delayedActionTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "delayed_action_client_id" field.</summary>
    public const int DelayedActionClientIdFieldNumber = 289;
    private pb::ByteString delayedActionClientId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DelayedActionClientId {
      get { return delayedActionClientId_; }
      set {
        delayedActionClientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "old_delayed_action_client_id" field.</summary>
    public const int OldDelayedActionClientIdFieldNumber = 290;
    private pb::ByteString oldDelayedActionClientId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OldDelayedActionClientId {
      get { return oldDelayedActionClientId_; }
      set {
        oldDelayedActionClientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "action_type" field.</summary>
    public const int ActionTypeFieldNumber = 281;
    private global::DigitexWire.DelayedActionType actionType_ = global::DigitexWire.DelayedActionType.DaUndefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.DelayedActionType ActionType {
      get { return actionType_; }
      set {
        actionType_ = value;
      }
    }

    /// <summary>Field number for the "trigger_variable" field.</summary>
    public const int TriggerVariableFieldNumber = 282;
    private global::DigitexWire.DelayedTriggerVariable triggerVariable_ = global::DigitexWire.DelayedTriggerVariable.DtvUndefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.DelayedTriggerVariable TriggerVariable {
      get { return triggerVariable_; }
      set {
        triggerVariable_ = value;
      }
    }

    /// <summary>Field number for the "trigger_condition" field.</summary>
    public const int TriggerConditionFieldNumber = 283;
    private global::DigitexWire.DelayedTriggerCondition triggerCondition_ = global::DigitexWire.DelayedTriggerCondition.DtcUndefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.DelayedTriggerCondition TriggerCondition {
      get { return triggerCondition_; }
      set {
        triggerCondition_ = value;
      }
    }

    /// <summary>Field number for the "trigger_value" field.</summary>
    public const int TriggerValueFieldNumber = 284;
    private global::DigitexWire.Decimal triggerValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal TriggerValue {
      get { return triggerValue_; }
      set {
        triggerValue_ = value;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 287;
    private global::DigitexWire.OrderMessage order_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderMessage Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DelayedActionMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DelayedActionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DelayedActionTimestamp != other.DelayedActionTimestamp) return false;
      if (DelayedActionClientId != other.DelayedActionClientId) return false;
      if (OldDelayedActionClientId != other.OldDelayedActionClientId) return false;
      if (ActionType != other.ActionType) return false;
      if (TriggerVariable != other.TriggerVariable) return false;
      if (TriggerCondition != other.TriggerCondition) return false;
      if (!object.Equals(TriggerValue, other.TriggerValue)) return false;
      if (!object.Equals(Order, other.Order)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DelayedActionTimestamp != 0L) hash ^= DelayedActionTimestamp.GetHashCode();
      if (DelayedActionClientId.Length != 0) hash ^= DelayedActionClientId.GetHashCode();
      if (OldDelayedActionClientId.Length != 0) hash ^= OldDelayedActionClientId.GetHashCode();
      if (ActionType != global::DigitexWire.DelayedActionType.DaUndefined) hash ^= ActionType.GetHashCode();
      if (TriggerVariable != global::DigitexWire.DelayedTriggerVariable.DtvUndefined) hash ^= TriggerVariable.GetHashCode();
      if (TriggerCondition != global::DigitexWire.DelayedTriggerCondition.DtcUndefined) hash ^= TriggerCondition.GetHashCode();
      if (triggerValue_ != null) hash ^= TriggerValue.GetHashCode();
      if (order_ != null) hash ^= Order.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ActionType != global::DigitexWire.DelayedActionType.DaUndefined) {
        output.WriteRawTag(200, 17);
        output.WriteEnum((int) ActionType);
      }
      if (TriggerVariable != global::DigitexWire.DelayedTriggerVariable.DtvUndefined) {
        output.WriteRawTag(208, 17);
        output.WriteEnum((int) TriggerVariable);
      }
      if (TriggerCondition != global::DigitexWire.DelayedTriggerCondition.DtcUndefined) {
        output.WriteRawTag(216, 17);
        output.WriteEnum((int) TriggerCondition);
      }
      if (triggerValue_ != null) {
        output.WriteRawTag(226, 17);
        output.WriteMessage(TriggerValue);
      }
      if (order_ != null) {
        output.WriteRawTag(250, 17);
        output.WriteMessage(Order);
      }
      if (DelayedActionClientId.Length != 0) {
        output.WriteRawTag(138, 18);
        output.WriteBytes(DelayedActionClientId);
      }
      if (OldDelayedActionClientId.Length != 0) {
        output.WriteRawTag(146, 18);
        output.WriteBytes(OldDelayedActionClientId);
      }
      if (DelayedActionTimestamp != 0L) {
        output.WriteRawTag(152, 18);
        output.WriteInt64(DelayedActionTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ActionType != global::DigitexWire.DelayedActionType.DaUndefined) {
        output.WriteRawTag(200, 17);
        output.WriteEnum((int) ActionType);
      }
      if (TriggerVariable != global::DigitexWire.DelayedTriggerVariable.DtvUndefined) {
        output.WriteRawTag(208, 17);
        output.WriteEnum((int) TriggerVariable);
      }
      if (TriggerCondition != global::DigitexWire.DelayedTriggerCondition.DtcUndefined) {
        output.WriteRawTag(216, 17);
        output.WriteEnum((int) TriggerCondition);
      }
      if (triggerValue_ != null) {
        output.WriteRawTag(226, 17);
        output.WriteMessage(TriggerValue);
      }
      if (order_ != null) {
        output.WriteRawTag(250, 17);
        output.WriteMessage(Order);
      }
      if (DelayedActionClientId.Length != 0) {
        output.WriteRawTag(138, 18);
        output.WriteBytes(DelayedActionClientId);
      }
      if (OldDelayedActionClientId.Length != 0) {
        output.WriteRawTag(146, 18);
        output.WriteBytes(OldDelayedActionClientId);
      }
      if (DelayedActionTimestamp != 0L) {
        output.WriteRawTag(152, 18);
        output.WriteInt64(DelayedActionTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DelayedActionTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(DelayedActionTimestamp);
      }
      if (DelayedActionClientId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(DelayedActionClientId);
      }
      if (OldDelayedActionClientId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(OldDelayedActionClientId);
      }
      if (ActionType != global::DigitexWire.DelayedActionType.DaUndefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ActionType);
      }
      if (TriggerVariable != global::DigitexWire.DelayedTriggerVariable.DtvUndefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TriggerVariable);
      }
      if (TriggerCondition != global::DigitexWire.DelayedTriggerCondition.DtcUndefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TriggerCondition);
      }
      if (triggerValue_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TriggerValue);
      }
      if (order_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Order);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DelayedActionMessage other) {
      if (other == null) {
        return;
      }
      if (other.DelayedActionTimestamp != 0L) {
        DelayedActionTimestamp = other.DelayedActionTimestamp;
      }
      if (other.DelayedActionClientId.Length != 0) {
        DelayedActionClientId = other.DelayedActionClientId;
      }
      if (other.OldDelayedActionClientId.Length != 0) {
        OldDelayedActionClientId = other.OldDelayedActionClientId;
      }
      if (other.ActionType != global::DigitexWire.DelayedActionType.DaUndefined) {
        ActionType = other.ActionType;
      }
      if (other.TriggerVariable != global::DigitexWire.DelayedTriggerVariable.DtvUndefined) {
        TriggerVariable = other.TriggerVariable;
      }
      if (other.TriggerCondition != global::DigitexWire.DelayedTriggerCondition.DtcUndefined) {
        TriggerCondition = other.TriggerCondition;
      }
      if (other.triggerValue_ != null) {
        if (triggerValue_ == null) {
          TriggerValue = new global::DigitexWire.Decimal();
        }
        TriggerValue.MergeFrom(other.TriggerValue);
      }
      if (other.order_ != null) {
        if (order_ == null) {
          Order = new global::DigitexWire.OrderMessage();
        }
        Order.MergeFrom(other.Order);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 2248: {
            ActionType = (global::DigitexWire.DelayedActionType) input.ReadEnum();
            break;
          }
          case 2256: {
            TriggerVariable = (global::DigitexWire.DelayedTriggerVariable) input.ReadEnum();
            break;
          }
          case 2264: {
            TriggerCondition = (global::DigitexWire.DelayedTriggerCondition) input.ReadEnum();
            break;
          }
          case 2274: {
            if (triggerValue_ == null) {
              TriggerValue = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TriggerValue);
            break;
          }
          case 2298: {
            if (order_ == null) {
              Order = new global::DigitexWire.OrderMessage();
            }
            input.ReadMessage(Order);
            break;
          }
          case 2314: {
            DelayedActionClientId = input.ReadBytes();
            break;
          }
          case 2322: {
            OldDelayedActionClientId = input.ReadBytes();
            break;
          }
          case 2328: {
            DelayedActionTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 2248: {
            ActionType = (global::DigitexWire.DelayedActionType) input.ReadEnum();
            break;
          }
          case 2256: {
            TriggerVariable = (global::DigitexWire.DelayedTriggerVariable) input.ReadEnum();
            break;
          }
          case 2264: {
            TriggerCondition = (global::DigitexWire.DelayedTriggerCondition) input.ReadEnum();
            break;
          }
          case 2274: {
            if (triggerValue_ == null) {
              TriggerValue = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(TriggerValue);
            break;
          }
          case 2298: {
            if (order_ == null) {
              Order = new global::DigitexWire.OrderMessage();
            }
            input.ReadMessage(Order);
            break;
          }
          case 2314: {
            DelayedActionClientId = input.ReadBytes();
            break;
          }
          case 2322: {
            OldDelayedActionClientId = input.ReadBytes();
            break;
          }
          case 2328: {
            DelayedActionTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlaceDelayedActionMessage : pb::IMessage<PlaceDelayedActionMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlaceDelayedActionMessage> _parser = new pb::MessageParser<PlaceDelayedActionMessage>(() => new PlaceDelayedActionMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlaceDelayedActionMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceDelayedActionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceDelayedActionMessage(PlaceDelayedActionMessage other) : this() {
      delayedAction_ = other.delayedAction_ != null ? other.delayedAction_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceDelayedActionMessage Clone() {
      return new PlaceDelayedActionMessage(this);
    }

    /// <summary>Field number for the "delayed_action" field.</summary>
    public const int DelayedActionFieldNumber = 285;
    private global::DigitexWire.DelayedActionMessage delayedAction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.DelayedActionMessage DelayedAction {
      get { return delayedAction_; }
      set {
        delayedAction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlaceDelayedActionMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlaceDelayedActionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DelayedAction, other.DelayedAction)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (delayedAction_ != null) hash ^= DelayedAction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (delayedAction_ != null) {
        output.WriteRawTag(234, 17);
        output.WriteMessage(DelayedAction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (delayedAction_ != null) {
        output.WriteRawTag(234, 17);
        output.WriteMessage(DelayedAction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (delayedAction_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DelayedAction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlaceDelayedActionMessage other) {
      if (other == null) {
        return;
      }
      if (other.delayedAction_ != null) {
        if (delayedAction_ == null) {
          DelayedAction = new global::DigitexWire.DelayedActionMessage();
        }
        DelayedAction.MergeFrom(other.DelayedAction);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 2282: {
            if (delayedAction_ == null) {
              DelayedAction = new global::DigitexWire.DelayedActionMessage();
            }
            input.ReadMessage(DelayedAction);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 2282: {
            if (delayedAction_ == null) {
              DelayedAction = new global::DigitexWire.DelayedActionMessage();
            }
            input.ReadMessage(DelayedAction);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UpdateDelayedActionMessage : pb::IMessage<UpdateDelayedActionMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpdateDelayedActionMessage> _parser = new pb::MessageParser<UpdateDelayedActionMessage>(() => new UpdateDelayedActionMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateDelayedActionMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDelayedActionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDelayedActionMessage(UpdateDelayedActionMessage other) : this() {
      prevClientId_ = other.prevClientId_;
      delayedAction_ = other.delayedAction_ != null ? other.delayedAction_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDelayedActionMessage Clone() {
      return new UpdateDelayedActionMessage(this);
    }

    /// <summary>Field number for the "prev_client_id" field.</summary>
    public const int PrevClientIdFieldNumber = 40;
    private pb::ByteString prevClientId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PrevClientId {
      get { return prevClientId_; }
      set {
        prevClientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "delayed_action" field.</summary>
    public const int DelayedActionFieldNumber = 285;
    private global::DigitexWire.DelayedActionMessage delayedAction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.DelayedActionMessage DelayedAction {
      get { return delayedAction_; }
      set {
        delayedAction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateDelayedActionMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateDelayedActionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PrevClientId != other.PrevClientId) return false;
      if (!object.Equals(DelayedAction, other.DelayedAction)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PrevClientId.Length != 0) hash ^= PrevClientId.GetHashCode();
      if (delayedAction_ != null) hash ^= DelayedAction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PrevClientId.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteBytes(PrevClientId);
      }
      if (delayedAction_ != null) {
        output.WriteRawTag(234, 17);
        output.WriteMessage(DelayedAction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PrevClientId.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteBytes(PrevClientId);
      }
      if (delayedAction_ != null) {
        output.WriteRawTag(234, 17);
        output.WriteMessage(DelayedAction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PrevClientId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(PrevClientId);
      }
      if (delayedAction_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DelayedAction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateDelayedActionMessage other) {
      if (other == null) {
        return;
      }
      if (other.PrevClientId.Length != 0) {
        PrevClientId = other.PrevClientId;
      }
      if (other.delayedAction_ != null) {
        if (delayedAction_ == null) {
          DelayedAction = new global::DigitexWire.DelayedActionMessage();
        }
        DelayedAction.MergeFrom(other.DelayedAction);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 322: {
            PrevClientId = input.ReadBytes();
            break;
          }
          case 2282: {
            if (delayedAction_ == null) {
              DelayedAction = new global::DigitexWire.DelayedActionMessage();
            }
            input.ReadMessage(DelayedAction);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 322: {
            PrevClientId = input.ReadBytes();
            break;
          }
          case 2282: {
            if (delayedAction_ == null) {
              DelayedAction = new global::DigitexWire.DelayedActionMessage();
            }
            input.ReadMessage(DelayedAction);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CancelDelayedActionMessage : pb::IMessage<CancelDelayedActionMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CancelDelayedActionMessage> _parser = new pb::MessageParser<CancelDelayedActionMessage>(() => new CancelDelayedActionMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelDelayedActionMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelDelayedActionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelDelayedActionMessage(CancelDelayedActionMessage other) : this() {
      prevClientId_ = other.prevClientId_;
      allForTrader_ = other.allForTrader_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelDelayedActionMessage Clone() {
      return new CancelDelayedActionMessage(this);
    }

    /// <summary>Field number for the "prev_client_id" field.</summary>
    public const int PrevClientIdFieldNumber = 40;
    private pb::ByteString prevClientId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PrevClientId {
      get { return prevClientId_; }
      set {
        prevClientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "all_for_trader" field.</summary>
    public const int AllForTraderFieldNumber = 286;
    private int allForTrader_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AllForTrader {
      get { return allForTrader_; }
      set {
        allForTrader_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelDelayedActionMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelDelayedActionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PrevClientId != other.PrevClientId) return false;
      if (AllForTrader != other.AllForTrader) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PrevClientId.Length != 0) hash ^= PrevClientId.GetHashCode();
      if (AllForTrader != 0) hash ^= AllForTrader.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PrevClientId.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteBytes(PrevClientId);
      }
      if (AllForTrader != 0) {
        output.WriteRawTag(240, 17);
        output.WriteInt32(AllForTrader);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PrevClientId.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteBytes(PrevClientId);
      }
      if (AllForTrader != 0) {
        output.WriteRawTag(240, 17);
        output.WriteInt32(AllForTrader);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PrevClientId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(PrevClientId);
      }
      if (AllForTrader != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AllForTrader);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelDelayedActionMessage other) {
      if (other == null) {
        return;
      }
      if (other.PrevClientId.Length != 0) {
        PrevClientId = other.PrevClientId;
      }
      if (other.AllForTrader != 0) {
        AllForTrader = other.AllForTrader;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 322: {
            PrevClientId = input.ReadBytes();
            break;
          }
          case 2288: {
            AllForTrader = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 322: {
            PrevClientId = input.ReadBytes();
            break;
          }
          case 2288: {
            AllForTrader = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DelayedActionStatusMessage : pb::IMessage<DelayedActionStatusMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DelayedActionStatusMessage> _parser = new pb::MessageParser<DelayedActionStatusMessage>(() => new DelayedActionStatusMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DelayedActionStatusMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelayedActionStatusMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelayedActionStatusMessage(DelayedActionStatusMessage other) : this() {
      status_ = other.status_;
      delayedActions_ = other.delayedActions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelayedActionStatusMessage Clone() {
      return new DelayedActionStatusMessage(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 42;
    private global::DigitexWire.OrderStatus status_ = global::DigitexWire.OrderStatus.StatusUndefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "delayed_actions" field.</summary>
    public const int DelayedActionsFieldNumber = 288;
    private static readonly pb::FieldCodec<global::DigitexWire.DelayedActionMessage> _repeated_delayedActions_codec
        = pb::FieldCodec.ForMessage(2306, global::DigitexWire.DelayedActionMessage.Parser);
    private readonly pbc::RepeatedField<global::DigitexWire.DelayedActionMessage> delayedActions_ = new pbc::RepeatedField<global::DigitexWire.DelayedActionMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DigitexWire.DelayedActionMessage> DelayedActions {
      get { return delayedActions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DelayedActionStatusMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DelayedActionStatusMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!delayedActions_.Equals(other.delayedActions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != global::DigitexWire.OrderStatus.StatusUndefined) hash ^= Status.GetHashCode();
      hash ^= delayedActions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Status != global::DigitexWire.OrderStatus.StatusUndefined) {
        output.WriteRawTag(208, 2);
        output.WriteEnum((int) Status);
      }
      delayedActions_.WriteTo(output, _repeated_delayedActions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Status != global::DigitexWire.OrderStatus.StatusUndefined) {
        output.WriteRawTag(208, 2);
        output.WriteEnum((int) Status);
      }
      delayedActions_.WriteTo(ref output, _repeated_delayedActions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != global::DigitexWire.OrderStatus.StatusUndefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += delayedActions_.CalculateSize(_repeated_delayedActions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DelayedActionStatusMessage other) {
      if (other == null) {
        return;
      }
      if (other.Status != global::DigitexWire.OrderStatus.StatusUndefined) {
        Status = other.Status;
      }
      delayedActions_.Add(other.delayedActions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 336: {
            Status = (global::DigitexWire.OrderStatus) input.ReadEnum();
            break;
          }
          case 2306: {
            delayedActions_.AddEntriesFrom(input, _repeated_delayedActions_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 336: {
            Status = (global::DigitexWire.OrderStatus) input.ReadEnum();
            break;
          }
          case 2306: {
            delayedActions_.AddEntriesFrom(ref input, _repeated_delayedActions_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LiquidationEntryMessage : pb::IMessage<LiquidationEntryMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LiquidationEntryMessage> _parser = new pb::MessageParser<LiquidationEntryMessage>(() => new LiquidationEntryMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LiquidationEntryMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidationEntryMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidationEntryMessage(LiquidationEntryMessage other) : this() {
      liquidationPrice_ = other.liquidationPrice_ != null ? other.liquidationPrice_.Clone() : null;
      quantity_ = other.quantity_ != null ? other.quantity_.Clone() : null;
      entryTimestamp_ = other.entryTimestamp_;
      position_ = other.position_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidationEntryMessage Clone() {
      return new LiquidationEntryMessage(this);
    }

    /// <summary>Field number for the "liquidation_price" field.</summary>
    public const int LiquidationPriceFieldNumber = 67;
    private global::DigitexWire.Decimal liquidationPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal LiquidationPrice {
      get { return liquidationPrice_; }
      set {
        liquidationPrice_ = value;
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 39;
    private global::DigitexWire.Decimal quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "entry_timestamp" field.</summary>
    public const int EntryTimestampFieldNumber = 155;
    private long entryTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EntryTimestamp {
      get { return entryTimestamp_; }
      set {
        entryTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 45;
    private global::DigitexWire.OrderPosition position_ = global::DigitexWire.OrderPosition.Undefined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderPosition Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LiquidationEntryMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LiquidationEntryMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LiquidationPrice, other.LiquidationPrice)) return false;
      if (!object.Equals(Quantity, other.Quantity)) return false;
      if (EntryTimestamp != other.EntryTimestamp) return false;
      if (Position != other.Position) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (liquidationPrice_ != null) hash ^= LiquidationPrice.GetHashCode();
      if (quantity_ != null) hash ^= Quantity.GetHashCode();
      if (EntryTimestamp != 0L) hash ^= EntryTimestamp.GetHashCode();
      if (Position != global::DigitexWire.OrderPosition.Undefined) hash ^= Position.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (quantity_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Quantity);
      }
      if (Position != global::DigitexWire.OrderPosition.Undefined) {
        output.WriteRawTag(232, 2);
        output.WriteEnum((int) Position);
      }
      if (liquidationPrice_ != null) {
        output.WriteRawTag(154, 4);
        output.WriteMessage(LiquidationPrice);
      }
      if (EntryTimestamp != 0L) {
        output.WriteRawTag(216, 9);
        output.WriteInt64(EntryTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (quantity_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(Quantity);
      }
      if (Position != global::DigitexWire.OrderPosition.Undefined) {
        output.WriteRawTag(232, 2);
        output.WriteEnum((int) Position);
      }
      if (liquidationPrice_ != null) {
        output.WriteRawTag(154, 4);
        output.WriteMessage(LiquidationPrice);
      }
      if (EntryTimestamp != 0L) {
        output.WriteRawTag(216, 9);
        output.WriteInt64(EntryTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (liquidationPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LiquidationPrice);
      }
      if (quantity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Quantity);
      }
      if (EntryTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(EntryTimestamp);
      }
      if (Position != global::DigitexWire.OrderPosition.Undefined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Position);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LiquidationEntryMessage other) {
      if (other == null) {
        return;
      }
      if (other.liquidationPrice_ != null) {
        if (liquidationPrice_ == null) {
          LiquidationPrice = new global::DigitexWire.Decimal();
        }
        LiquidationPrice.MergeFrom(other.LiquidationPrice);
      }
      if (other.quantity_ != null) {
        if (quantity_ == null) {
          Quantity = new global::DigitexWire.Decimal();
        }
        Quantity.MergeFrom(other.Quantity);
      }
      if (other.EntryTimestamp != 0L) {
        EntryTimestamp = other.EntryTimestamp;
      }
      if (other.Position != global::DigitexWire.OrderPosition.Undefined) {
        Position = other.Position;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 314: {
            if (quantity_ == null) {
              Quantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Quantity);
            break;
          }
          case 360: {
            Position = (global::DigitexWire.OrderPosition) input.ReadEnum();
            break;
          }
          case 538: {
            if (liquidationPrice_ == null) {
              LiquidationPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LiquidationPrice);
            break;
          }
          case 1240: {
            EntryTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 314: {
            if (quantity_ == null) {
              Quantity = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(Quantity);
            break;
          }
          case 360: {
            Position = (global::DigitexWire.OrderPosition) input.ReadEnum();
            break;
          }
          case 538: {
            if (liquidationPrice_ == null) {
              LiquidationPrice = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(LiquidationPrice);
            break;
          }
          case 1240: {
            EntryTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LiquidationsMessage : pb::IMessage<LiquidationsMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LiquidationsMessage> _parser = new pb::MessageParser<LiquidationsMessage>(() => new LiquidationsMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LiquidationsMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidationsMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidationsMessage(LiquidationsMessage other) : this() {
      liquidationEntries_ = other.liquidationEntries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidationsMessage Clone() {
      return new LiquidationsMessage(this);
    }

    /// <summary>Field number for the "liquidation_entries" field.</summary>
    public const int LiquidationEntriesFieldNumber = 294;
    private static readonly pb::FieldCodec<global::DigitexWire.LiquidationEntryMessage> _repeated_liquidationEntries_codec
        = pb::FieldCodec.ForMessage(2354, global::DigitexWire.LiquidationEntryMessage.Parser);
    private readonly pbc::RepeatedField<global::DigitexWire.LiquidationEntryMessage> liquidationEntries_ = new pbc::RepeatedField<global::DigitexWire.LiquidationEntryMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DigitexWire.LiquidationEntryMessage> LiquidationEntries {
      get { return liquidationEntries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LiquidationsMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LiquidationsMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!liquidationEntries_.Equals(other.liquidationEntries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= liquidationEntries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      liquidationEntries_.WriteTo(output, _repeated_liquidationEntries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      liquidationEntries_.WriteTo(ref output, _repeated_liquidationEntries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += liquidationEntries_.CalculateSize(_repeated_liquidationEntries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LiquidationsMessage other) {
      if (other == null) {
        return;
      }
      liquidationEntries_.Add(other.liquidationEntries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 2354: {
            liquidationEntries_.AddEntriesFrom(input, _repeated_liquidationEntries_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 2354: {
            liquidationEntries_.AddEntriesFrom(ref input, _repeated_liquidationEntries_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FundingInfoMessage : pb::IMessage<FundingInfoMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FundingInfoMessage> _parser = new pb::MessageParser<FundingInfoMessage>(() => new FundingInfoMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FundingInfoMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingInfoMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingInfoMessage(FundingInfoMessage other) : this() {
      fundingTime_ = other.fundingTime_;
      fundingRate_ = other.fundingRate_ != null ? other.fundingRate_.Clone() : null;
      payoutPerContract_ = other.payoutPerContract_ != null ? other.payoutPerContract_.Clone() : null;
      openInterest_ = other.openInterest_ != null ? other.openInterest_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingInfoMessage Clone() {
      return new FundingInfoMessage(this);
    }

    /// <summary>Field number for the "funding_time" field.</summary>
    public const int FundingTimeFieldNumber = 127;
    private long fundingTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FundingTime {
      get { return fundingTime_; }
      set {
        fundingTime_ = value;
      }
    }

    /// <summary>Field number for the "funding_rate" field.</summary>
    public const int FundingRateFieldNumber = 128;
    private global::DigitexWire.Decimal fundingRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal FundingRate {
      get { return fundingRate_; }
      set {
        fundingRate_ = value;
      }
    }

    /// <summary>Field number for the "payout_per_contract" field.</summary>
    public const int PayoutPerContractFieldNumber = 102;
    private global::DigitexWire.Decimal payoutPerContract_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal PayoutPerContract {
      get { return payoutPerContract_; }
      set {
        payoutPerContract_ = value;
      }
    }

    /// <summary>Field number for the "open_interest" field.</summary>
    public const int OpenInterestFieldNumber = 295;
    private global::DigitexWire.Decimal openInterest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.Decimal OpenInterest {
      get { return openInterest_; }
      set {
        openInterest_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FundingInfoMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FundingInfoMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FundingTime != other.FundingTime) return false;
      if (!object.Equals(FundingRate, other.FundingRate)) return false;
      if (!object.Equals(PayoutPerContract, other.PayoutPerContract)) return false;
      if (!object.Equals(OpenInterest, other.OpenInterest)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FundingTime != 0L) hash ^= FundingTime.GetHashCode();
      if (fundingRate_ != null) hash ^= FundingRate.GetHashCode();
      if (payoutPerContract_ != null) hash ^= PayoutPerContract.GetHashCode();
      if (openInterest_ != null) hash ^= OpenInterest.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (payoutPerContract_ != null) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(PayoutPerContract);
      }
      if (FundingTime != 0L) {
        output.WriteRawTag(248, 7);
        output.WriteInt64(FundingTime);
      }
      if (fundingRate_ != null) {
        output.WriteRawTag(130, 8);
        output.WriteMessage(FundingRate);
      }
      if (openInterest_ != null) {
        output.WriteRawTag(186, 18);
        output.WriteMessage(OpenInterest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (payoutPerContract_ != null) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(PayoutPerContract);
      }
      if (FundingTime != 0L) {
        output.WriteRawTag(248, 7);
        output.WriteInt64(FundingTime);
      }
      if (fundingRate_ != null) {
        output.WriteRawTag(130, 8);
        output.WriteMessage(FundingRate);
      }
      if (openInterest_ != null) {
        output.WriteRawTag(186, 18);
        output.WriteMessage(OpenInterest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FundingTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(FundingTime);
      }
      if (fundingRate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FundingRate);
      }
      if (payoutPerContract_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PayoutPerContract);
      }
      if (openInterest_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OpenInterest);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FundingInfoMessage other) {
      if (other == null) {
        return;
      }
      if (other.FundingTime != 0L) {
        FundingTime = other.FundingTime;
      }
      if (other.fundingRate_ != null) {
        if (fundingRate_ == null) {
          FundingRate = new global::DigitexWire.Decimal();
        }
        FundingRate.MergeFrom(other.FundingRate);
      }
      if (other.payoutPerContract_ != null) {
        if (payoutPerContract_ == null) {
          PayoutPerContract = new global::DigitexWire.Decimal();
        }
        PayoutPerContract.MergeFrom(other.PayoutPerContract);
      }
      if (other.openInterest_ != null) {
        if (openInterest_ == null) {
          OpenInterest = new global::DigitexWire.Decimal();
        }
        OpenInterest.MergeFrom(other.OpenInterest);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 818: {
            if (payoutPerContract_ == null) {
              PayoutPerContract = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PayoutPerContract);
            break;
          }
          case 1016: {
            FundingTime = input.ReadInt64();
            break;
          }
          case 1026: {
            if (fundingRate_ == null) {
              FundingRate = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FundingRate);
            break;
          }
          case 2362: {
            if (openInterest_ == null) {
              OpenInterest = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OpenInterest);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 818: {
            if (payoutPerContract_ == null) {
              PayoutPerContract = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(PayoutPerContract);
            break;
          }
          case 1016: {
            FundingTime = input.ReadInt64();
            break;
          }
          case 1026: {
            if (fundingRate_ == null) {
              FundingRate = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(FundingRate);
            break;
          }
          case 2362: {
            if (openInterest_ == null) {
              OpenInterest = new global::DigitexWire.Decimal();
            }
            input.ReadMessage(OpenInterest);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// minimal message to return the error code
  /// </summary>
  public sealed partial class ErrorMessage : pb::IMessage<ErrorMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ErrorMessage> _parser = new pb::MessageParser<ErrorMessage>(() => new ErrorMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ErrorMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorMessage(ErrorMessage other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorMessage Clone() {
      return new ErrorMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ErrorMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ErrorMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ErrorMessage other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class Message : pb::IMessage<Message>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DigitexWire.MessagesPublicReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      timestamp_ = other.timestamp_;
      serial_ = other.serial_;
      marketId_ = other.marketId_;
      traderId_ = other.traderId_;
      clientId_ = other.clientId_;
      errorCode_ = other.errorCode_;
      sessionId_ = other.sessionId_;
      auth_ = other.auth_;
      switch (other.KontentCase) {
        case KontentOneofCase.PlaceOrderMsg:
          PlaceOrderMsg = other.PlaceOrderMsg.Clone();
          break;
        case KontentOneofCase.CancelOrderMsg:
          CancelOrderMsg = other.CancelOrderMsg.Clone();
          break;
        case KontentOneofCase.CancelAllOrdersMsg:
          CancelAllOrdersMsg = other.CancelAllOrdersMsg.Clone();
          break;
        case KontentOneofCase.OrderStatusMsg:
          OrderStatusMsg = other.OrderStatusMsg.Clone();
          break;
        case KontentOneofCase.OrderFilledMsg:
          OrderFilledMsg = other.OrderFilledMsg.Clone();
          break;
        case KontentOneofCase.ChangeLeverageAllMsg:
          ChangeLeverageAllMsg = other.ChangeLeverageAllMsg.Clone();
          break;
        case KontentOneofCase.TraderBalanceMsg:
          TraderBalanceMsg = other.TraderBalanceMsg.Clone();
          break;
        case KontentOneofCase.PositionEventMsg:
          PositionEventMsg = other.PositionEventMsg.Clone();
          break;
        case KontentOneofCase.LeverageMsg:
          LeverageMsg = other.LeverageMsg.Clone();
          break;
        case KontentOneofCase.ExchangeRateMsg:
          ExchangeRateMsg = other.ExchangeRateMsg.Clone();
          break;
        case KontentOneofCase.OrderBookRequestMsg:
          OrderBookRequestMsg = other.OrderBookRequestMsg.Clone();
          break;
        case KontentOneofCase.OrderBookMsg:
          OrderBookMsg = other.OrderBookMsg.Clone();
          break;
        case KontentOneofCase.OrderBookUpdatedMsg:
          OrderBookUpdatedMsg = other.OrderBookUpdatedMsg.Clone();
          break;
        case KontentOneofCase.PingMsg:
          PingMsg = other.PingMsg.Clone();
          break;
        case KontentOneofCase.PongMsg:
          PongMsg = other.PongMsg.Clone();
          break;
        case KontentOneofCase.UpdateOrderMsg:
          UpdateOrderMsg = other.UpdateOrderMsg.Clone();
          break;
        case KontentOneofCase.GetTraderStatusMsg:
          GetTraderStatusMsg = other.GetTraderStatusMsg.Clone();
          break;
        case KontentOneofCase.TraderStatusMsg:
          TraderStatusMsg = other.TraderStatusMsg.Clone();
          break;
        case KontentOneofCase.FundingMsg:
          FundingMsg = other.FundingMsg.Clone();
          break;
        case KontentOneofCase.SubscribeMsg:
          SubscribeMsg = other.SubscribeMsg.Clone();
          break;
        case KontentOneofCase.SubscribeStatusMsg:
          SubscribeStatusMsg = other.SubscribeStatusMsg.Clone();
          break;
        case KontentOneofCase.CloseContractMsg:
          CloseContractMsg = other.CloseContractMsg.Clone();
          break;
        case KontentOneofCase.CloseAllContractsMsg:
          CloseAllContractsMsg = other.CloseAllContractsMsg.Clone();
          break;
        case KontentOneofCase.OrderCanceledMsg:
          OrderCanceledMsg = other.OrderCanceledMsg.Clone();
          break;
        case KontentOneofCase.GetMarketStateMsg:
          GetMarketStateMsg = other.GetMarketStateMsg.Clone();
          break;
        case KontentOneofCase.MarketStateMsg:
          MarketStateMsg = other.MarketStateMsg.Clone();
          break;
        case KontentOneofCase.GetExchangeRatesMsg:
          GetExchangeRatesMsg = other.GetExchangeRatesMsg.Clone();
          break;
        case KontentOneofCase.ExchangeRatesMsg:
          ExchangeRatesMsg = other.ExchangeRatesMsg.Clone();
          break;
        case KontentOneofCase.MarketStateUpdateMsg:
          MarketStateUpdateMsg = other.MarketStateUpdateMsg.Clone();
          break;
        case KontentOneofCase.ContractClosedMsg:
          ContractClosedMsg = other.ContractClosedMsg.Clone();
          break;
        case KontentOneofCase.GetTraderBalanceMsg:
          GetTraderBalanceMsg = other.GetTraderBalanceMsg.Clone();
          break;
        case KontentOneofCase.PlaceDelayedActionMsg:
          PlaceDelayedActionMsg = other.PlaceDelayedActionMsg.Clone();
          break;
        case KontentOneofCase.UpdateDelayedActionMsg:
          UpdateDelayedActionMsg = other.UpdateDelayedActionMsg.Clone();
          break;
        case KontentOneofCase.CancelDelayedActionMsg:
          CancelDelayedActionMsg = other.CancelDelayedActionMsg.Clone();
          break;
        case KontentOneofCase.DelayedActionStatusMsg:
          DelayedActionStatusMsg = other.DelayedActionStatusMsg.Clone();
          break;
        case KontentOneofCase.LiquidationsMsg:
          LiquidationsMsg = other.LiquidationsMsg.Clone();
          break;
        case KontentOneofCase.FundingInfoMsg:
          FundingInfoMsg = other.FundingInfoMsg.Clone();
          break;
        case KontentOneofCase.ErrorMsg:
          ErrorMsg = other.ErrorMsg.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "serial" field.</summary>
    public const int SerialFieldNumber = 4;
    private ulong serial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Serial {
      get { return serial_; }
      set {
        serial_ = value;
      }
    }

    /// <summary>Field number for the "market_id" field.</summary>
    public const int MarketIdFieldNumber = 5;
    private uint marketId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MarketId {
      get { return marketId_; }
      set {
        marketId_ = value;
      }
    }

    /// <summary>Field number for the "trader_id" field.</summary>
    public const int TraderIdFieldNumber = 6;
    private uint traderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TraderId {
      get { return traderId_; }
      set {
        traderId_ = value;
      }
    }

    /// <summary>Field number for the "client_id" field.</summary>
    public const int ClientIdFieldNumber = 7;
    private pb::ByteString clientId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClientId {
      get { return clientId_; }
      set {
        clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error_code" field.</summary>
    public const int ErrorCodeFieldNumber = 43;
    private uint errorCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 8;
    private long sessionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = value;
      }
    }

    /// <summary>Field number for the "auth" field.</summary>
    public const int AuthFieldNumber = 9;
    private pb::ByteString auth_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Auth {
      get { return auth_; }
      set {
        auth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "place_order_msg" field.</summary>
    public const int PlaceOrderMsgFieldNumber = 513;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.PlaceOrderMessage PlaceOrderMsg {
      get { return kontentCase_ == KontentOneofCase.PlaceOrderMsg ? (global::DigitexWire.PlaceOrderMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.PlaceOrderMsg;
      }
    }

    /// <summary>Field number for the "cancel_order_msg" field.</summary>
    public const int CancelOrderMsgFieldNumber = 514;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.CancelOrderMessage CancelOrderMsg {
      get { return kontentCase_ == KontentOneofCase.CancelOrderMsg ? (global::DigitexWire.CancelOrderMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.CancelOrderMsg;
      }
    }

    /// <summary>Field number for the "cancel_all_orders_msg" field.</summary>
    public const int CancelAllOrdersMsgFieldNumber = 515;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.CancelAllOrdersMessage CancelAllOrdersMsg {
      get { return kontentCase_ == KontentOneofCase.CancelAllOrdersMsg ? (global::DigitexWire.CancelAllOrdersMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.CancelAllOrdersMsg;
      }
    }

    /// <summary>Field number for the "order_status_msg" field.</summary>
    public const int OrderStatusMsgFieldNumber = 517;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderStatusMessage OrderStatusMsg {
      get { return kontentCase_ == KontentOneofCase.OrderStatusMsg ? (global::DigitexWire.OrderStatusMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.OrderStatusMsg;
      }
    }

    /// <summary>Field number for the "order_filled_msg" field.</summary>
    public const int OrderFilledMsgFieldNumber = 518;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderFilledMessage OrderFilledMsg {
      get { return kontentCase_ == KontentOneofCase.OrderFilledMsg ? (global::DigitexWire.OrderFilledMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.OrderFilledMsg;
      }
    }

    /// <summary>Field number for the "change_leverage_all_msg" field.</summary>
    public const int ChangeLeverageAllMsgFieldNumber = 519;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.ChangeLeverageAllMessage ChangeLeverageAllMsg {
      get { return kontentCase_ == KontentOneofCase.ChangeLeverageAllMsg ? (global::DigitexWire.ChangeLeverageAllMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.ChangeLeverageAllMsg;
      }
    }

    /// <summary>Field number for the "trader_balance_msg" field.</summary>
    public const int TraderBalanceMsgFieldNumber = 522;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.TraderBalanceMessage TraderBalanceMsg {
      get { return kontentCase_ == KontentOneofCase.TraderBalanceMsg ? (global::DigitexWire.TraderBalanceMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.TraderBalanceMsg;
      }
    }

    /// <summary>Field number for the "position_event_msg" field.</summary>
    public const int PositionEventMsgFieldNumber = 523;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.PositionEventMessage PositionEventMsg {
      get { return kontentCase_ == KontentOneofCase.PositionEventMsg ? (global::DigitexWire.PositionEventMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.PositionEventMsg;
      }
    }

    /// <summary>Field number for the "leverage_msg" field.</summary>
    public const int LeverageMsgFieldNumber = 524;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.LeverageMessage LeverageMsg {
      get { return kontentCase_ == KontentOneofCase.LeverageMsg ? (global::DigitexWire.LeverageMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.LeverageMsg;
      }
    }

    /// <summary>Field number for the "exchange_rate_msg" field.</summary>
    public const int ExchangeRateMsgFieldNumber = 525;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.ExchangeRateMessage ExchangeRateMsg {
      get { return kontentCase_ == KontentOneofCase.ExchangeRateMsg ? (global::DigitexWire.ExchangeRateMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.ExchangeRateMsg;
      }
    }

    /// <summary>Field number for the "order_book_request_msg" field.</summary>
    public const int OrderBookRequestMsgFieldNumber = 526;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderBookRequestMessage OrderBookRequestMsg {
      get { return kontentCase_ == KontentOneofCase.OrderBookRequestMsg ? (global::DigitexWire.OrderBookRequestMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.OrderBookRequestMsg;
      }
    }

    /// <summary>Field number for the "order_book_msg" field.</summary>
    public const int OrderBookMsgFieldNumber = 527;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderBookMessage OrderBookMsg {
      get { return kontentCase_ == KontentOneofCase.OrderBookMsg ? (global::DigitexWire.OrderBookMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.OrderBookMsg;
      }
    }

    /// <summary>Field number for the "order_book_updated_msg" field.</summary>
    public const int OrderBookUpdatedMsgFieldNumber = 528;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderBookUpdatedMessage OrderBookUpdatedMsg {
      get { return kontentCase_ == KontentOneofCase.OrderBookUpdatedMsg ? (global::DigitexWire.OrderBookUpdatedMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.OrderBookUpdatedMsg;
      }
    }

    /// <summary>Field number for the "ping_msg" field.</summary>
    public const int PingMsgFieldNumber = 529;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.PingMessage PingMsg {
      get { return kontentCase_ == KontentOneofCase.PingMsg ? (global::DigitexWire.PingMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.PingMsg;
      }
    }

    /// <summary>Field number for the "pong_msg" field.</summary>
    public const int PongMsgFieldNumber = 530;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.PongMessage PongMsg {
      get { return kontentCase_ == KontentOneofCase.PongMsg ? (global::DigitexWire.PongMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.PongMsg;
      }
    }

    /// <summary>Field number for the "update_order_msg" field.</summary>
    public const int UpdateOrderMsgFieldNumber = 531;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.UpdateOrderMessage UpdateOrderMsg {
      get { return kontentCase_ == KontentOneofCase.UpdateOrderMsg ? (global::DigitexWire.UpdateOrderMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.UpdateOrderMsg;
      }
    }

    /// <summary>Field number for the "get_trader_status_msg" field.</summary>
    public const int GetTraderStatusMsgFieldNumber = 532;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.GetTraderStatusMessage GetTraderStatusMsg {
      get { return kontentCase_ == KontentOneofCase.GetTraderStatusMsg ? (global::DigitexWire.GetTraderStatusMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.GetTraderStatusMsg;
      }
    }

    /// <summary>Field number for the "trader_status_msg" field.</summary>
    public const int TraderStatusMsgFieldNumber = 533;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.TraderStatusMessage TraderStatusMsg {
      get { return kontentCase_ == KontentOneofCase.TraderStatusMsg ? (global::DigitexWire.TraderStatusMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.TraderStatusMsg;
      }
    }

    /// <summary>Field number for the "funding_msg" field.</summary>
    public const int FundingMsgFieldNumber = 535;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.FundingMessage FundingMsg {
      get { return kontentCase_ == KontentOneofCase.FundingMsg ? (global::DigitexWire.FundingMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.FundingMsg;
      }
    }

    /// <summary>Field number for the "subscribe_msg" field.</summary>
    public const int SubscribeMsgFieldNumber = 538;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.SubscribeMessage SubscribeMsg {
      get { return kontentCase_ == KontentOneofCase.SubscribeMsg ? (global::DigitexWire.SubscribeMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.SubscribeMsg;
      }
    }

    /// <summary>Field number for the "subscribe_status_msg" field.</summary>
    public const int SubscribeStatusMsgFieldNumber = 539;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.SubscribeStatusMessage SubscribeStatusMsg {
      get { return kontentCase_ == KontentOneofCase.SubscribeStatusMsg ? (global::DigitexWire.SubscribeStatusMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.SubscribeStatusMsg;
      }
    }

    /// <summary>Field number for the "close_contract_msg" field.</summary>
    public const int CloseContractMsgFieldNumber = 542;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.CloseContractMessage CloseContractMsg {
      get { return kontentCase_ == KontentOneofCase.CloseContractMsg ? (global::DigitexWire.CloseContractMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.CloseContractMsg;
      }
    }

    /// <summary>Field number for the "close_all_contracts_msg" field.</summary>
    public const int CloseAllContractsMsgFieldNumber = 543;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.CloseAllContractsMessage CloseAllContractsMsg {
      get { return kontentCase_ == KontentOneofCase.CloseAllContractsMsg ? (global::DigitexWire.CloseAllContractsMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.CloseAllContractsMsg;
      }
    }

    /// <summary>Field number for the "order_canceled_msg" field.</summary>
    public const int OrderCanceledMsgFieldNumber = 546;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.OrderCanceledMessage OrderCanceledMsg {
      get { return kontentCase_ == KontentOneofCase.OrderCanceledMsg ? (global::DigitexWire.OrderCanceledMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.OrderCanceledMsg;
      }
    }

    /// <summary>Field number for the "get_market_state_msg" field.</summary>
    public const int GetMarketStateMsgFieldNumber = 548;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.GetMarketStateMessage GetMarketStateMsg {
      get { return kontentCase_ == KontentOneofCase.GetMarketStateMsg ? (global::DigitexWire.GetMarketStateMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.GetMarketStateMsg;
      }
    }

    /// <summary>Field number for the "market_state_msg" field.</summary>
    public const int MarketStateMsgFieldNumber = 549;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.MarketStateMessage MarketStateMsg {
      get { return kontentCase_ == KontentOneofCase.MarketStateMsg ? (global::DigitexWire.MarketStateMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.MarketStateMsg;
      }
    }

    /// <summary>Field number for the "get_exchange_rates_msg" field.</summary>
    public const int GetExchangeRatesMsgFieldNumber = 550;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.GetExchangeRatesMessage GetExchangeRatesMsg {
      get { return kontentCase_ == KontentOneofCase.GetExchangeRatesMsg ? (global::DigitexWire.GetExchangeRatesMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.GetExchangeRatesMsg;
      }
    }

    /// <summary>Field number for the "exchange_rates_msg" field.</summary>
    public const int ExchangeRatesMsgFieldNumber = 551;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.ExchangeRatesMessage ExchangeRatesMsg {
      get { return kontentCase_ == KontentOneofCase.ExchangeRatesMsg ? (global::DigitexWire.ExchangeRatesMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.ExchangeRatesMsg;
      }
    }

    /// <summary>Field number for the "market_state_update_msg" field.</summary>
    public const int MarketStateUpdateMsgFieldNumber = 552;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.MarketStateUpdateMessage MarketStateUpdateMsg {
      get { return kontentCase_ == KontentOneofCase.MarketStateUpdateMsg ? (global::DigitexWire.MarketStateUpdateMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.MarketStateUpdateMsg;
      }
    }

    /// <summary>Field number for the "contract_closed_msg" field.</summary>
    public const int ContractClosedMsgFieldNumber = 553;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.ContractClosedMessage ContractClosedMsg {
      get { return kontentCase_ == KontentOneofCase.ContractClosedMsg ? (global::DigitexWire.ContractClosedMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.ContractClosedMsg;
      }
    }

    /// <summary>Field number for the "get_trader_balance_msg" field.</summary>
    public const int GetTraderBalanceMsgFieldNumber = 562;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.GetTraderBalanceMessage GetTraderBalanceMsg {
      get { return kontentCase_ == KontentOneofCase.GetTraderBalanceMsg ? (global::DigitexWire.GetTraderBalanceMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.GetTraderBalanceMsg;
      }
    }

    /// <summary>Field number for the "place_delayed_action_msg" field.</summary>
    public const int PlaceDelayedActionMsgFieldNumber = 566;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.PlaceDelayedActionMessage PlaceDelayedActionMsg {
      get { return kontentCase_ == KontentOneofCase.PlaceDelayedActionMsg ? (global::DigitexWire.PlaceDelayedActionMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.PlaceDelayedActionMsg;
      }
    }

    /// <summary>Field number for the "update_delayed_action_msg" field.</summary>
    public const int UpdateDelayedActionMsgFieldNumber = 567;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.UpdateDelayedActionMessage UpdateDelayedActionMsg {
      get { return kontentCase_ == KontentOneofCase.UpdateDelayedActionMsg ? (global::DigitexWire.UpdateDelayedActionMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.UpdateDelayedActionMsg;
      }
    }

    /// <summary>Field number for the "cancel_delayed_action_msg" field.</summary>
    public const int CancelDelayedActionMsgFieldNumber = 568;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.CancelDelayedActionMessage CancelDelayedActionMsg {
      get { return kontentCase_ == KontentOneofCase.CancelDelayedActionMsg ? (global::DigitexWire.CancelDelayedActionMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.CancelDelayedActionMsg;
      }
    }

    /// <summary>Field number for the "delayed_action_status_msg" field.</summary>
    public const int DelayedActionStatusMsgFieldNumber = 569;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.DelayedActionStatusMessage DelayedActionStatusMsg {
      get { return kontentCase_ == KontentOneofCase.DelayedActionStatusMsg ? (global::DigitexWire.DelayedActionStatusMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.DelayedActionStatusMsg;
      }
    }

    /// <summary>Field number for the "liquidations_msg" field.</summary>
    public const int LiquidationsMsgFieldNumber = 570;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.LiquidationsMessage LiquidationsMsg {
      get { return kontentCase_ == KontentOneofCase.LiquidationsMsg ? (global::DigitexWire.LiquidationsMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.LiquidationsMsg;
      }
    }

    /// <summary>Field number for the "funding_info_msg" field.</summary>
    public const int FundingInfoMsgFieldNumber = 571;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.FundingInfoMessage FundingInfoMsg {
      get { return kontentCase_ == KontentOneofCase.FundingInfoMsg ? (global::DigitexWire.FundingInfoMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.FundingInfoMsg;
      }
    }

    /// <summary>Field number for the "error_msg" field.</summary>
    public const int ErrorMsgFieldNumber = 572;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DigitexWire.ErrorMessage ErrorMsg {
      get { return kontentCase_ == KontentOneofCase.ErrorMsg ? (global::DigitexWire.ErrorMessage) kontent_ : null; }
      set {
        kontent_ = value;
        kontentCase_ = value == null ? KontentOneofCase.None : KontentOneofCase.ErrorMsg;
      }
    }

    private object kontent_;
    /// <summary>Enum of possible cases for the "kontent" oneof.</summary>
    public enum KontentOneofCase {
      None = 0,
      PlaceOrderMsg = 513,
      CancelOrderMsg = 514,
      CancelAllOrdersMsg = 515,
      OrderStatusMsg = 517,
      OrderFilledMsg = 518,
      ChangeLeverageAllMsg = 519,
      TraderBalanceMsg = 522,
      PositionEventMsg = 523,
      LeverageMsg = 524,
      ExchangeRateMsg = 525,
      OrderBookRequestMsg = 526,
      OrderBookMsg = 527,
      OrderBookUpdatedMsg = 528,
      PingMsg = 529,
      PongMsg = 530,
      UpdateOrderMsg = 531,
      GetTraderStatusMsg = 532,
      TraderStatusMsg = 533,
      FundingMsg = 535,
      SubscribeMsg = 538,
      SubscribeStatusMsg = 539,
      CloseContractMsg = 542,
      CloseAllContractsMsg = 543,
      OrderCanceledMsg = 546,
      GetMarketStateMsg = 548,
      MarketStateMsg = 549,
      GetExchangeRatesMsg = 550,
      ExchangeRatesMsg = 551,
      MarketStateUpdateMsg = 552,
      ContractClosedMsg = 553,
      GetTraderBalanceMsg = 562,
      PlaceDelayedActionMsg = 566,
      UpdateDelayedActionMsg = 567,
      CancelDelayedActionMsg = 568,
      DelayedActionStatusMsg = 569,
      LiquidationsMsg = 570,
      FundingInfoMsg = 571,
      ErrorMsg = 572,
    }
    private KontentOneofCase kontentCase_ = KontentOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KontentOneofCase KontentCase {
      get { return kontentCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKontent() {
      kontentCase_ = KontentOneofCase.None;
      kontent_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (Serial != other.Serial) return false;
      if (MarketId != other.MarketId) return false;
      if (TraderId != other.TraderId) return false;
      if (ClientId != other.ClientId) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (SessionId != other.SessionId) return false;
      if (Auth != other.Auth) return false;
      if (!object.Equals(PlaceOrderMsg, other.PlaceOrderMsg)) return false;
      if (!object.Equals(CancelOrderMsg, other.CancelOrderMsg)) return false;
      if (!object.Equals(CancelAllOrdersMsg, other.CancelAllOrdersMsg)) return false;
      if (!object.Equals(OrderStatusMsg, other.OrderStatusMsg)) return false;
      if (!object.Equals(OrderFilledMsg, other.OrderFilledMsg)) return false;
      if (!object.Equals(ChangeLeverageAllMsg, other.ChangeLeverageAllMsg)) return false;
      if (!object.Equals(TraderBalanceMsg, other.TraderBalanceMsg)) return false;
      if (!object.Equals(PositionEventMsg, other.PositionEventMsg)) return false;
      if (!object.Equals(LeverageMsg, other.LeverageMsg)) return false;
      if (!object.Equals(ExchangeRateMsg, other.ExchangeRateMsg)) return false;
      if (!object.Equals(OrderBookRequestMsg, other.OrderBookRequestMsg)) return false;
      if (!object.Equals(OrderBookMsg, other.OrderBookMsg)) return false;
      if (!object.Equals(OrderBookUpdatedMsg, other.OrderBookUpdatedMsg)) return false;
      if (!object.Equals(PingMsg, other.PingMsg)) return false;
      if (!object.Equals(PongMsg, other.PongMsg)) return false;
      if (!object.Equals(UpdateOrderMsg, other.UpdateOrderMsg)) return false;
      if (!object.Equals(GetTraderStatusMsg, other.GetTraderStatusMsg)) return false;
      if (!object.Equals(TraderStatusMsg, other.TraderStatusMsg)) return false;
      if (!object.Equals(FundingMsg, other.FundingMsg)) return false;
      if (!object.Equals(SubscribeMsg, other.SubscribeMsg)) return false;
      if (!object.Equals(SubscribeStatusMsg, other.SubscribeStatusMsg)) return false;
      if (!object.Equals(CloseContractMsg, other.CloseContractMsg)) return false;
      if (!object.Equals(CloseAllContractsMsg, other.CloseAllContractsMsg)) return false;
      if (!object.Equals(OrderCanceledMsg, other.OrderCanceledMsg)) return false;
      if (!object.Equals(GetMarketStateMsg, other.GetMarketStateMsg)) return false;
      if (!object.Equals(MarketStateMsg, other.MarketStateMsg)) return false;
      if (!object.Equals(GetExchangeRatesMsg, other.GetExchangeRatesMsg)) return false;
      if (!object.Equals(ExchangeRatesMsg, other.ExchangeRatesMsg)) return false;
      if (!object.Equals(MarketStateUpdateMsg, other.MarketStateUpdateMsg)) return false;
      if (!object.Equals(ContractClosedMsg, other.ContractClosedMsg)) return false;
      if (!object.Equals(GetTraderBalanceMsg, other.GetTraderBalanceMsg)) return false;
      if (!object.Equals(PlaceDelayedActionMsg, other.PlaceDelayedActionMsg)) return false;
      if (!object.Equals(UpdateDelayedActionMsg, other.UpdateDelayedActionMsg)) return false;
      if (!object.Equals(CancelDelayedActionMsg, other.CancelDelayedActionMsg)) return false;
      if (!object.Equals(DelayedActionStatusMsg, other.DelayedActionStatusMsg)) return false;
      if (!object.Equals(LiquidationsMsg, other.LiquidationsMsg)) return false;
      if (!object.Equals(FundingInfoMsg, other.FundingInfoMsg)) return false;
      if (!object.Equals(ErrorMsg, other.ErrorMsg)) return false;
      if (KontentCase != other.KontentCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Serial != 0UL) hash ^= Serial.GetHashCode();
      if (MarketId != 0) hash ^= MarketId.GetHashCode();
      if (TraderId != 0) hash ^= TraderId.GetHashCode();
      if (ClientId.Length != 0) hash ^= ClientId.GetHashCode();
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (SessionId != 0L) hash ^= SessionId.GetHashCode();
      if (Auth.Length != 0) hash ^= Auth.GetHashCode();
      if (kontentCase_ == KontentOneofCase.PlaceOrderMsg) hash ^= PlaceOrderMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.CancelOrderMsg) hash ^= CancelOrderMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.CancelAllOrdersMsg) hash ^= CancelAllOrdersMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.OrderStatusMsg) hash ^= OrderStatusMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.OrderFilledMsg) hash ^= OrderFilledMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.ChangeLeverageAllMsg) hash ^= ChangeLeverageAllMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.TraderBalanceMsg) hash ^= TraderBalanceMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.PositionEventMsg) hash ^= PositionEventMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.LeverageMsg) hash ^= LeverageMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.ExchangeRateMsg) hash ^= ExchangeRateMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.OrderBookRequestMsg) hash ^= OrderBookRequestMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.OrderBookMsg) hash ^= OrderBookMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.OrderBookUpdatedMsg) hash ^= OrderBookUpdatedMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.PingMsg) hash ^= PingMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.PongMsg) hash ^= PongMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.UpdateOrderMsg) hash ^= UpdateOrderMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.GetTraderStatusMsg) hash ^= GetTraderStatusMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.TraderStatusMsg) hash ^= TraderStatusMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.FundingMsg) hash ^= FundingMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.SubscribeMsg) hash ^= SubscribeMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.SubscribeStatusMsg) hash ^= SubscribeStatusMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.CloseContractMsg) hash ^= CloseContractMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.CloseAllContractsMsg) hash ^= CloseAllContractsMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.OrderCanceledMsg) hash ^= OrderCanceledMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.GetMarketStateMsg) hash ^= GetMarketStateMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.MarketStateMsg) hash ^= MarketStateMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.GetExchangeRatesMsg) hash ^= GetExchangeRatesMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.ExchangeRatesMsg) hash ^= ExchangeRatesMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.MarketStateUpdateMsg) hash ^= MarketStateUpdateMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.ContractClosedMsg) hash ^= ContractClosedMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.GetTraderBalanceMsg) hash ^= GetTraderBalanceMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.PlaceDelayedActionMsg) hash ^= PlaceDelayedActionMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.UpdateDelayedActionMsg) hash ^= UpdateDelayedActionMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.CancelDelayedActionMsg) hash ^= CancelDelayedActionMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.DelayedActionStatusMsg) hash ^= DelayedActionStatusMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.LiquidationsMsg) hash ^= LiquidationsMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.FundingInfoMsg) hash ^= FundingInfoMsg.GetHashCode();
      if (kontentCase_ == KontentOneofCase.ErrorMsg) hash ^= ErrorMsg.GetHashCode();
      hash ^= (int) kontentCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Timestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Timestamp);
      }
      if (Serial != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Serial);
      }
      if (MarketId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MarketId);
      }
      if (TraderId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TraderId);
      }
      if (ClientId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(ClientId);
      }
      if (SessionId != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(SessionId);
      }
      if (Auth.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(Auth);
      }
      if (ErrorCode != 0) {
        output.WriteRawTag(216, 2);
        output.WriteUInt32(ErrorCode);
      }
      if (kontentCase_ == KontentOneofCase.PlaceOrderMsg) {
        output.WriteRawTag(138, 32);
        output.WriteMessage(PlaceOrderMsg);
      }
      if (kontentCase_ == KontentOneofCase.CancelOrderMsg) {
        output.WriteRawTag(146, 32);
        output.WriteMessage(CancelOrderMsg);
      }
      if (kontentCase_ == KontentOneofCase.CancelAllOrdersMsg) {
        output.WriteRawTag(154, 32);
        output.WriteMessage(CancelAllOrdersMsg);
      }
      if (kontentCase_ == KontentOneofCase.OrderStatusMsg) {
        output.WriteRawTag(170, 32);
        output.WriteMessage(OrderStatusMsg);
      }
      if (kontentCase_ == KontentOneofCase.OrderFilledMsg) {
        output.WriteRawTag(178, 32);
        output.WriteMessage(OrderFilledMsg);
      }
      if (kontentCase_ == KontentOneofCase.ChangeLeverageAllMsg) {
        output.WriteRawTag(186, 32);
        output.WriteMessage(ChangeLeverageAllMsg);
      }
      if (kontentCase_ == KontentOneofCase.TraderBalanceMsg) {
        output.WriteRawTag(210, 32);
        output.WriteMessage(TraderBalanceMsg);
      }
      if (kontentCase_ == KontentOneofCase.PositionEventMsg) {
        output.WriteRawTag(218, 32);
        output.WriteMessage(PositionEventMsg);
      }
      if (kontentCase_ == KontentOneofCase.LeverageMsg) {
        output.WriteRawTag(226, 32);
        output.WriteMessage(LeverageMsg);
      }
      if (kontentCase_ == KontentOneofCase.ExchangeRateMsg) {
        output.WriteRawTag(234, 32);
        output.WriteMessage(ExchangeRateMsg);
      }
      if (kontentCase_ == KontentOneofCase.OrderBookRequestMsg) {
        output.WriteRawTag(242, 32);
        output.WriteMessage(OrderBookRequestMsg);
      }
      if (kontentCase_ == KontentOneofCase.OrderBookMsg) {
        output.WriteRawTag(250, 32);
        output.WriteMessage(OrderBookMsg);
      }
      if (kontentCase_ == KontentOneofCase.OrderBookUpdatedMsg) {
        output.WriteRawTag(130, 33);
        output.WriteMessage(OrderBookUpdatedMsg);
      }
      if (kontentCase_ == KontentOneofCase.PingMsg) {
        output.WriteRawTag(138, 33);
        output.WriteMessage(PingMsg);
      }
      if (kontentCase_ == KontentOneofCase.PongMsg) {
        output.WriteRawTag(146, 33);
        output.WriteMessage(PongMsg);
      }
      if (kontentCase_ == KontentOneofCase.UpdateOrderMsg) {
        output.WriteRawTag(154, 33);
        output.WriteMessage(UpdateOrderMsg);
      }
      if (kontentCase_ == KontentOneofCase.GetTraderStatusMsg) {
        output.WriteRawTag(162, 33);
        output.WriteMessage(GetTraderStatusMsg);
      }
      if (kontentCase_ == KontentOneofCase.TraderStatusMsg) {
        output.WriteRawTag(170, 33);
        output.WriteMessage(TraderStatusMsg);
      }
      if (kontentCase_ == KontentOneofCase.FundingMsg) {
        output.WriteRawTag(186, 33);
        output.WriteMessage(FundingMsg);
      }
      if (kontentCase_ == KontentOneofCase.SubscribeMsg) {
        output.WriteRawTag(210, 33);
        output.WriteMessage(SubscribeMsg);
      }
      if (kontentCase_ == KontentOneofCase.SubscribeStatusMsg) {
        output.WriteRawTag(218, 33);
        output.WriteMessage(SubscribeStatusMsg);
      }
      if (kontentCase_ == KontentOneofCase.CloseContractMsg) {
        output.WriteRawTag(242, 33);
        output.WriteMessage(CloseContractMsg);
      }
      if (kontentCase_ == KontentOneofCase.CloseAllContractsMsg) {
        output.WriteRawTag(250, 33);
        output.WriteMessage(CloseAllContractsMsg);
      }
      if (kontentCase_ == KontentOneofCase.OrderCanceledMsg) {
        output.WriteRawTag(146, 34);
        output.WriteMessage(OrderCanceledMsg);
      }
      if (kontentCase_ == KontentOneofCase.GetMarketStateMsg) {
        output.WriteRawTag(162, 34);
        output.WriteMessage(GetMarketStateMsg);
      }
      if (kontentCase_ == KontentOneofCase.MarketStateMsg) {
        output.WriteRawTag(170, 34);
        output.WriteMessage(MarketStateMsg);
      }
      if (kontentCase_ == KontentOneofCase.GetExchangeRatesMsg) {
        output.WriteRawTag(178, 34);
        output.WriteMessage(GetExchangeRatesMsg);
      }
      if (kontentCase_ == KontentOneofCase.ExchangeRatesMsg) {
        output.WriteRawTag(186, 34);
        output.WriteMessage(ExchangeRatesMsg);
      }
      if (kontentCase_ == KontentOneofCase.MarketStateUpdateMsg) {
        output.WriteRawTag(194, 34);
        output.WriteMessage(MarketStateUpdateMsg);
      }
      if (kontentCase_ == KontentOneofCase.ContractClosedMsg) {
        output.WriteRawTag(202, 34);
        output.WriteMessage(ContractClosedMsg);
      }
      if (kontentCase_ == KontentOneofCase.GetTraderBalanceMsg) {
        output.WriteRawTag(146, 35);
        output.WriteMessage(GetTraderBalanceMsg);
      }
      if (kontentCase_ == KontentOneofCase.PlaceDelayedActionMsg) {
        output.WriteRawTag(178, 35);
        output.WriteMessage(PlaceDelayedActionMsg);
      }
      if (kontentCase_ == KontentOneofCase.UpdateDelayedActionMsg) {
        output.WriteRawTag(186, 35);
        output.WriteMessage(UpdateDelayedActionMsg);
      }
      if (kontentCase_ == KontentOneofCase.CancelDelayedActionMsg) {
        output.WriteRawTag(194, 35);
        output.WriteMessage(CancelDelayedActionMsg);
      }
      if (kontentCase_ == KontentOneofCase.DelayedActionStatusMsg) {
        output.WriteRawTag(202, 35);
        output.WriteMessage(DelayedActionStatusMsg);
      }
      if (kontentCase_ == KontentOneofCase.LiquidationsMsg) {
        output.WriteRawTag(210, 35);
        output.WriteMessage(LiquidationsMsg);
      }
      if (kontentCase_ == KontentOneofCase.FundingInfoMsg) {
        output.WriteRawTag(218, 35);
        output.WriteMessage(FundingInfoMsg);
      }
      if (kontentCase_ == KontentOneofCase.ErrorMsg) {
        output.WriteRawTag(226, 35);
        output.WriteMessage(ErrorMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Timestamp);
      }
      if (Serial != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Serial);
      }
      if (MarketId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MarketId);
      }
      if (TraderId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TraderId);
      }
      if (ClientId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(ClientId);
      }
      if (SessionId != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(SessionId);
      }
      if (Auth.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(Auth);
      }
      if (ErrorCode != 0) {
        output.WriteRawTag(216, 2);
        output.WriteUInt32(ErrorCode);
      }
      if (kontentCase_ == KontentOneofCase.PlaceOrderMsg) {
        output.WriteRawTag(138, 32);
        output.WriteMessage(PlaceOrderMsg);
      }
      if (kontentCase_ == KontentOneofCase.CancelOrderMsg) {
        output.WriteRawTag(146, 32);
        output.WriteMessage(CancelOrderMsg);
      }
      if (kontentCase_ == KontentOneofCase.CancelAllOrdersMsg) {
        output.WriteRawTag(154, 32);
        output.WriteMessage(CancelAllOrdersMsg);
      }
      if (kontentCase_ == KontentOneofCase.OrderStatusMsg) {
        output.WriteRawTag(170, 32);
        output.WriteMessage(OrderStatusMsg);
      }
      if (kontentCase_ == KontentOneofCase.OrderFilledMsg) {
        output.WriteRawTag(178, 32);
        output.WriteMessage(OrderFilledMsg);
      }
      if (kontentCase_ == KontentOneofCase.ChangeLeverageAllMsg) {
        output.WriteRawTag(186, 32);
        output.WriteMessage(ChangeLeverageAllMsg);
      }
      if (kontentCase_ == KontentOneofCase.TraderBalanceMsg) {
        output.WriteRawTag(210, 32);
        output.WriteMessage(TraderBalanceMsg);
      }
      if (kontentCase_ == KontentOneofCase.PositionEventMsg) {
        output.WriteRawTag(218, 32);
        output.WriteMessage(PositionEventMsg);
      }
      if (kontentCase_ == KontentOneofCase.LeverageMsg) {
        output.WriteRawTag(226, 32);
        output.WriteMessage(LeverageMsg);
      }
      if (kontentCase_ == KontentOneofCase.ExchangeRateMsg) {
        output.WriteRawTag(234, 32);
        output.WriteMessage(ExchangeRateMsg);
      }
      if (kontentCase_ == KontentOneofCase.OrderBookRequestMsg) {
        output.WriteRawTag(242, 32);
        output.WriteMessage(OrderBookRequestMsg);
      }
      if (kontentCase_ == KontentOneofCase.OrderBookMsg) {
        output.WriteRawTag(250, 32);
        output.WriteMessage(OrderBookMsg);
      }
      if (kontentCase_ == KontentOneofCase.OrderBookUpdatedMsg) {
        output.WriteRawTag(130, 33);
        output.WriteMessage(OrderBookUpdatedMsg);
      }
      if (kontentCase_ == KontentOneofCase.PingMsg) {
        output.WriteRawTag(138, 33);
        output.WriteMessage(PingMsg);
      }
      if (kontentCase_ == KontentOneofCase.PongMsg) {
        output.WriteRawTag(146, 33);
        output.WriteMessage(PongMsg);
      }
      if (kontentCase_ == KontentOneofCase.UpdateOrderMsg) {
        output.WriteRawTag(154, 33);
        output.WriteMessage(UpdateOrderMsg);
      }
      if (kontentCase_ == KontentOneofCase.GetTraderStatusMsg) {
        output.WriteRawTag(162, 33);
        output.WriteMessage(GetTraderStatusMsg);
      }
      if (kontentCase_ == KontentOneofCase.TraderStatusMsg) {
        output.WriteRawTag(170, 33);
        output.WriteMessage(TraderStatusMsg);
      }
      if (kontentCase_ == KontentOneofCase.FundingMsg) {
        output.WriteRawTag(186, 33);
        output.WriteMessage(FundingMsg);
      }
      if (kontentCase_ == KontentOneofCase.SubscribeMsg) {
        output.WriteRawTag(210, 33);
        output.WriteMessage(SubscribeMsg);
      }
      if (kontentCase_ == KontentOneofCase.SubscribeStatusMsg) {
        output.WriteRawTag(218, 33);
        output.WriteMessage(SubscribeStatusMsg);
      }
      if (kontentCase_ == KontentOneofCase.CloseContractMsg) {
        output.WriteRawTag(242, 33);
        output.WriteMessage(CloseContractMsg);
      }
      if (kontentCase_ == KontentOneofCase.CloseAllContractsMsg) {
        output.WriteRawTag(250, 33);
        output.WriteMessage(CloseAllContractsMsg);
      }
      if (kontentCase_ == KontentOneofCase.OrderCanceledMsg) {
        output.WriteRawTag(146, 34);
        output.WriteMessage(OrderCanceledMsg);
      }
      if (kontentCase_ == KontentOneofCase.GetMarketStateMsg) {
        output.WriteRawTag(162, 34);
        output.WriteMessage(GetMarketStateMsg);
      }
      if (kontentCase_ == KontentOneofCase.MarketStateMsg) {
        output.WriteRawTag(170, 34);
        output.WriteMessage(MarketStateMsg);
      }
      if (kontentCase_ == KontentOneofCase.GetExchangeRatesMsg) {
        output.WriteRawTag(178, 34);
        output.WriteMessage(GetExchangeRatesMsg);
      }
      if (kontentCase_ == KontentOneofCase.ExchangeRatesMsg) {
        output.WriteRawTag(186, 34);
        output.WriteMessage(ExchangeRatesMsg);
      }
      if (kontentCase_ == KontentOneofCase.MarketStateUpdateMsg) {
        output.WriteRawTag(194, 34);
        output.WriteMessage(MarketStateUpdateMsg);
      }
      if (kontentCase_ == KontentOneofCase.ContractClosedMsg) {
        output.WriteRawTag(202, 34);
        output.WriteMessage(ContractClosedMsg);
      }
      if (kontentCase_ == KontentOneofCase.GetTraderBalanceMsg) {
        output.WriteRawTag(146, 35);
        output.WriteMessage(GetTraderBalanceMsg);
      }
      if (kontentCase_ == KontentOneofCase.PlaceDelayedActionMsg) {
        output.WriteRawTag(178, 35);
        output.WriteMessage(PlaceDelayedActionMsg);
      }
      if (kontentCase_ == KontentOneofCase.UpdateDelayedActionMsg) {
        output.WriteRawTag(186, 35);
        output.WriteMessage(UpdateDelayedActionMsg);
      }
      if (kontentCase_ == KontentOneofCase.CancelDelayedActionMsg) {
        output.WriteRawTag(194, 35);
        output.WriteMessage(CancelDelayedActionMsg);
      }
      if (kontentCase_ == KontentOneofCase.DelayedActionStatusMsg) {
        output.WriteRawTag(202, 35);
        output.WriteMessage(DelayedActionStatusMsg);
      }
      if (kontentCase_ == KontentOneofCase.LiquidationsMsg) {
        output.WriteRawTag(210, 35);
        output.WriteMessage(LiquidationsMsg);
      }
      if (kontentCase_ == KontentOneofCase.FundingInfoMsg) {
        output.WriteRawTag(218, 35);
        output.WriteMessage(FundingInfoMsg);
      }
      if (kontentCase_ == KontentOneofCase.ErrorMsg) {
        output.WriteRawTag(226, 35);
        output.WriteMessage(ErrorMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Serial != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Serial);
      }
      if (MarketId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MarketId);
      }
      if (TraderId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TraderId);
      }
      if (ClientId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClientId);
      }
      if (ErrorCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ErrorCode);
      }
      if (SessionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SessionId);
      }
      if (Auth.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Auth);
      }
      if (kontentCase_ == KontentOneofCase.PlaceOrderMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PlaceOrderMsg);
      }
      if (kontentCase_ == KontentOneofCase.CancelOrderMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CancelOrderMsg);
      }
      if (kontentCase_ == KontentOneofCase.CancelAllOrdersMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CancelAllOrdersMsg);
      }
      if (kontentCase_ == KontentOneofCase.OrderStatusMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderStatusMsg);
      }
      if (kontentCase_ == KontentOneofCase.OrderFilledMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderFilledMsg);
      }
      if (kontentCase_ == KontentOneofCase.ChangeLeverageAllMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ChangeLeverageAllMsg);
      }
      if (kontentCase_ == KontentOneofCase.TraderBalanceMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TraderBalanceMsg);
      }
      if (kontentCase_ == KontentOneofCase.PositionEventMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PositionEventMsg);
      }
      if (kontentCase_ == KontentOneofCase.LeverageMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LeverageMsg);
      }
      if (kontentCase_ == KontentOneofCase.ExchangeRateMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExchangeRateMsg);
      }
      if (kontentCase_ == KontentOneofCase.OrderBookRequestMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderBookRequestMsg);
      }
      if (kontentCase_ == KontentOneofCase.OrderBookMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderBookMsg);
      }
      if (kontentCase_ == KontentOneofCase.OrderBookUpdatedMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderBookUpdatedMsg);
      }
      if (kontentCase_ == KontentOneofCase.PingMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PingMsg);
      }
      if (kontentCase_ == KontentOneofCase.PongMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PongMsg);
      }
      if (kontentCase_ == KontentOneofCase.UpdateOrderMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UpdateOrderMsg);
      }
      if (kontentCase_ == KontentOneofCase.GetTraderStatusMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetTraderStatusMsg);
      }
      if (kontentCase_ == KontentOneofCase.TraderStatusMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TraderStatusMsg);
      }
      if (kontentCase_ == KontentOneofCase.FundingMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FundingMsg);
      }
      if (kontentCase_ == KontentOneofCase.SubscribeMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SubscribeMsg);
      }
      if (kontentCase_ == KontentOneofCase.SubscribeStatusMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SubscribeStatusMsg);
      }
      if (kontentCase_ == KontentOneofCase.CloseContractMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CloseContractMsg);
      }
      if (kontentCase_ == KontentOneofCase.CloseAllContractsMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CloseAllContractsMsg);
      }
      if (kontentCase_ == KontentOneofCase.OrderCanceledMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderCanceledMsg);
      }
      if (kontentCase_ == KontentOneofCase.GetMarketStateMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetMarketStateMsg);
      }
      if (kontentCase_ == KontentOneofCase.MarketStateMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MarketStateMsg);
      }
      if (kontentCase_ == KontentOneofCase.GetExchangeRatesMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetExchangeRatesMsg);
      }
      if (kontentCase_ == KontentOneofCase.ExchangeRatesMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExchangeRatesMsg);
      }
      if (kontentCase_ == KontentOneofCase.MarketStateUpdateMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MarketStateUpdateMsg);
      }
      if (kontentCase_ == KontentOneofCase.ContractClosedMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ContractClosedMsg);
      }
      if (kontentCase_ == KontentOneofCase.GetTraderBalanceMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetTraderBalanceMsg);
      }
      if (kontentCase_ == KontentOneofCase.PlaceDelayedActionMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PlaceDelayedActionMsg);
      }
      if (kontentCase_ == KontentOneofCase.UpdateDelayedActionMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UpdateDelayedActionMsg);
      }
      if (kontentCase_ == KontentOneofCase.CancelDelayedActionMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CancelDelayedActionMsg);
      }
      if (kontentCase_ == KontentOneofCase.DelayedActionStatusMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DelayedActionStatusMsg);
      }
      if (kontentCase_ == KontentOneofCase.LiquidationsMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LiquidationsMsg);
      }
      if (kontentCase_ == KontentOneofCase.FundingInfoMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FundingInfoMsg);
      }
      if (kontentCase_ == KontentOneofCase.ErrorMsg) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ErrorMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Serial != 0UL) {
        Serial = other.Serial;
      }
      if (other.MarketId != 0) {
        MarketId = other.MarketId;
      }
      if (other.TraderId != 0) {
        TraderId = other.TraderId;
      }
      if (other.ClientId.Length != 0) {
        ClientId = other.ClientId;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.SessionId != 0L) {
        SessionId = other.SessionId;
      }
      if (other.Auth.Length != 0) {
        Auth = other.Auth;
      }
      switch (other.KontentCase) {
        case KontentOneofCase.PlaceOrderMsg:
          if (PlaceOrderMsg == null) {
            PlaceOrderMsg = new global::DigitexWire.PlaceOrderMessage();
          }
          PlaceOrderMsg.MergeFrom(other.PlaceOrderMsg);
          break;
        case KontentOneofCase.CancelOrderMsg:
          if (CancelOrderMsg == null) {
            CancelOrderMsg = new global::DigitexWire.CancelOrderMessage();
          }
          CancelOrderMsg.MergeFrom(other.CancelOrderMsg);
          break;
        case KontentOneofCase.CancelAllOrdersMsg:
          if (CancelAllOrdersMsg == null) {
            CancelAllOrdersMsg = new global::DigitexWire.CancelAllOrdersMessage();
          }
          CancelAllOrdersMsg.MergeFrom(other.CancelAllOrdersMsg);
          break;
        case KontentOneofCase.OrderStatusMsg:
          if (OrderStatusMsg == null) {
            OrderStatusMsg = new global::DigitexWire.OrderStatusMessage();
          }
          OrderStatusMsg.MergeFrom(other.OrderStatusMsg);
          break;
        case KontentOneofCase.OrderFilledMsg:
          if (OrderFilledMsg == null) {
            OrderFilledMsg = new global::DigitexWire.OrderFilledMessage();
          }
          OrderFilledMsg.MergeFrom(other.OrderFilledMsg);
          break;
        case KontentOneofCase.ChangeLeverageAllMsg:
          if (ChangeLeverageAllMsg == null) {
            ChangeLeverageAllMsg = new global::DigitexWire.ChangeLeverageAllMessage();
          }
          ChangeLeverageAllMsg.MergeFrom(other.ChangeLeverageAllMsg);
          break;
        case KontentOneofCase.TraderBalanceMsg:
          if (TraderBalanceMsg == null) {
            TraderBalanceMsg = new global::DigitexWire.TraderBalanceMessage();
          }
          TraderBalanceMsg.MergeFrom(other.TraderBalanceMsg);
          break;
        case KontentOneofCase.PositionEventMsg:
          if (PositionEventMsg == null) {
            PositionEventMsg = new global::DigitexWire.PositionEventMessage();
          }
          PositionEventMsg.MergeFrom(other.PositionEventMsg);
          break;
        case KontentOneofCase.LeverageMsg:
          if (LeverageMsg == null) {
            LeverageMsg = new global::DigitexWire.LeverageMessage();
          }
          LeverageMsg.MergeFrom(other.LeverageMsg);
          break;
        case KontentOneofCase.ExchangeRateMsg:
          if (ExchangeRateMsg == null) {
            ExchangeRateMsg = new global::DigitexWire.ExchangeRateMessage();
          }
          ExchangeRateMsg.MergeFrom(other.ExchangeRateMsg);
          break;
        case KontentOneofCase.OrderBookRequestMsg:
          if (OrderBookRequestMsg == null) {
            OrderBookRequestMsg = new global::DigitexWire.OrderBookRequestMessage();
          }
          OrderBookRequestMsg.MergeFrom(other.OrderBookRequestMsg);
          break;
        case KontentOneofCase.OrderBookMsg:
          if (OrderBookMsg == null) {
            OrderBookMsg = new global::DigitexWire.OrderBookMessage();
          }
          OrderBookMsg.MergeFrom(other.OrderBookMsg);
          break;
        case KontentOneofCase.OrderBookUpdatedMsg:
          if (OrderBookUpdatedMsg == null) {
            OrderBookUpdatedMsg = new global::DigitexWire.OrderBookUpdatedMessage();
          }
          OrderBookUpdatedMsg.MergeFrom(other.OrderBookUpdatedMsg);
          break;
        case KontentOneofCase.PingMsg:
          if (PingMsg == null) {
            PingMsg = new global::DigitexWire.PingMessage();
          }
          PingMsg.MergeFrom(other.PingMsg);
          break;
        case KontentOneofCase.PongMsg:
          if (PongMsg == null) {
            PongMsg = new global::DigitexWire.PongMessage();
          }
          PongMsg.MergeFrom(other.PongMsg);
          break;
        case KontentOneofCase.UpdateOrderMsg:
          if (UpdateOrderMsg == null) {
            UpdateOrderMsg = new global::DigitexWire.UpdateOrderMessage();
          }
          UpdateOrderMsg.MergeFrom(other.UpdateOrderMsg);
          break;
        case KontentOneofCase.GetTraderStatusMsg:
          if (GetTraderStatusMsg == null) {
            GetTraderStatusMsg = new global::DigitexWire.GetTraderStatusMessage();
          }
          GetTraderStatusMsg.MergeFrom(other.GetTraderStatusMsg);
          break;
        case KontentOneofCase.TraderStatusMsg:
          if (TraderStatusMsg == null) {
            TraderStatusMsg = new global::DigitexWire.TraderStatusMessage();
          }
          TraderStatusMsg.MergeFrom(other.TraderStatusMsg);
          break;
        case KontentOneofCase.FundingMsg:
          if (FundingMsg == null) {
            FundingMsg = new global::DigitexWire.FundingMessage();
          }
          FundingMsg.MergeFrom(other.FundingMsg);
          break;
        case KontentOneofCase.SubscribeMsg:
          if (SubscribeMsg == null) {
            SubscribeMsg = new global::DigitexWire.SubscribeMessage();
          }
          SubscribeMsg.MergeFrom(other.SubscribeMsg);
          break;
        case KontentOneofCase.SubscribeStatusMsg:
          if (SubscribeStatusMsg == null) {
            SubscribeStatusMsg = new global::DigitexWire.SubscribeStatusMessage();
          }
          SubscribeStatusMsg.MergeFrom(other.SubscribeStatusMsg);
          break;
        case KontentOneofCase.CloseContractMsg:
          if (CloseContractMsg == null) {
            CloseContractMsg = new global::DigitexWire.CloseContractMessage();
          }
          CloseContractMsg.MergeFrom(other.CloseContractMsg);
          break;
        case KontentOneofCase.CloseAllContractsMsg:
          if (CloseAllContractsMsg == null) {
            CloseAllContractsMsg = new global::DigitexWire.CloseAllContractsMessage();
          }
          CloseAllContractsMsg.MergeFrom(other.CloseAllContractsMsg);
          break;
        case KontentOneofCase.OrderCanceledMsg:
          if (OrderCanceledMsg == null) {
            OrderCanceledMsg = new global::DigitexWire.OrderCanceledMessage();
          }
          OrderCanceledMsg.MergeFrom(other.OrderCanceledMsg);
          break;
        case KontentOneofCase.GetMarketStateMsg:
          if (GetMarketStateMsg == null) {
            GetMarketStateMsg = new global::DigitexWire.GetMarketStateMessage();
          }
          GetMarketStateMsg.MergeFrom(other.GetMarketStateMsg);
          break;
        case KontentOneofCase.MarketStateMsg:
          if (MarketStateMsg == null) {
            MarketStateMsg = new global::DigitexWire.MarketStateMessage();
          }
          MarketStateMsg.MergeFrom(other.MarketStateMsg);
          break;
        case KontentOneofCase.GetExchangeRatesMsg:
          if (GetExchangeRatesMsg == null) {
            GetExchangeRatesMsg = new global::DigitexWire.GetExchangeRatesMessage();
          }
          GetExchangeRatesMsg.MergeFrom(other.GetExchangeRatesMsg);
          break;
        case KontentOneofCase.ExchangeRatesMsg:
          if (ExchangeRatesMsg == null) {
            ExchangeRatesMsg = new global::DigitexWire.ExchangeRatesMessage();
          }
          ExchangeRatesMsg.MergeFrom(other.ExchangeRatesMsg);
          break;
        case KontentOneofCase.MarketStateUpdateMsg:
          if (MarketStateUpdateMsg == null) {
            MarketStateUpdateMsg = new global::DigitexWire.MarketStateUpdateMessage();
          }
          MarketStateUpdateMsg.MergeFrom(other.MarketStateUpdateMsg);
          break;
        case KontentOneofCase.ContractClosedMsg:
          if (ContractClosedMsg == null) {
            ContractClosedMsg = new global::DigitexWire.ContractClosedMessage();
          }
          ContractClosedMsg.MergeFrom(other.ContractClosedMsg);
          break;
        case KontentOneofCase.GetTraderBalanceMsg:
          if (GetTraderBalanceMsg == null) {
            GetTraderBalanceMsg = new global::DigitexWire.GetTraderBalanceMessage();
          }
          GetTraderBalanceMsg.MergeFrom(other.GetTraderBalanceMsg);
          break;
        case KontentOneofCase.PlaceDelayedActionMsg:
          if (PlaceDelayedActionMsg == null) {
            PlaceDelayedActionMsg = new global::DigitexWire.PlaceDelayedActionMessage();
          }
          PlaceDelayedActionMsg.MergeFrom(other.PlaceDelayedActionMsg);
          break;
        case KontentOneofCase.UpdateDelayedActionMsg:
          if (UpdateDelayedActionMsg == null) {
            UpdateDelayedActionMsg = new global::DigitexWire.UpdateDelayedActionMessage();
          }
          UpdateDelayedActionMsg.MergeFrom(other.UpdateDelayedActionMsg);
          break;
        case KontentOneofCase.CancelDelayedActionMsg:
          if (CancelDelayedActionMsg == null) {
            CancelDelayedActionMsg = new global::DigitexWire.CancelDelayedActionMessage();
          }
          CancelDelayedActionMsg.MergeFrom(other.CancelDelayedActionMsg);
          break;
        case KontentOneofCase.DelayedActionStatusMsg:
          if (DelayedActionStatusMsg == null) {
            DelayedActionStatusMsg = new global::DigitexWire.DelayedActionStatusMessage();
          }
          DelayedActionStatusMsg.MergeFrom(other.DelayedActionStatusMsg);
          break;
        case KontentOneofCase.LiquidationsMsg:
          if (LiquidationsMsg == null) {
            LiquidationsMsg = new global::DigitexWire.LiquidationsMessage();
          }
          LiquidationsMsg.MergeFrom(other.LiquidationsMsg);
          break;
        case KontentOneofCase.FundingInfoMsg:
          if (FundingInfoMsg == null) {
            FundingInfoMsg = new global::DigitexWire.FundingInfoMessage();
          }
          FundingInfoMsg.MergeFrom(other.FundingInfoMsg);
          break;
        case KontentOneofCase.ErrorMsg:
          if (ErrorMsg == null) {
            ErrorMsg = new global::DigitexWire.ErrorMessage();
          }
          ErrorMsg.MergeFrom(other.ErrorMsg);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 32: {
            Serial = input.ReadUInt64();
            break;
          }
          case 40: {
            MarketId = input.ReadUInt32();
            break;
          }
          case 48: {
            TraderId = input.ReadUInt32();
            break;
          }
          case 58: {
            ClientId = input.ReadBytes();
            break;
          }
          case 64: {
            SessionId = input.ReadInt64();
            break;
          }
          case 74: {
            Auth = input.ReadBytes();
            break;
          }
          case 344: {
            ErrorCode = input.ReadUInt32();
            break;
          }
          case 4106: {
            global::DigitexWire.PlaceOrderMessage subBuilder = new global::DigitexWire.PlaceOrderMessage();
            if (kontentCase_ == KontentOneofCase.PlaceOrderMsg) {
              subBuilder.MergeFrom(PlaceOrderMsg);
            }
            input.ReadMessage(subBuilder);
            PlaceOrderMsg = subBuilder;
            break;
          }
          case 4114: {
            global::DigitexWire.CancelOrderMessage subBuilder = new global::DigitexWire.CancelOrderMessage();
            if (kontentCase_ == KontentOneofCase.CancelOrderMsg) {
              subBuilder.MergeFrom(CancelOrderMsg);
            }
            input.ReadMessage(subBuilder);
            CancelOrderMsg = subBuilder;
            break;
          }
          case 4122: {
            global::DigitexWire.CancelAllOrdersMessage subBuilder = new global::DigitexWire.CancelAllOrdersMessage();
            if (kontentCase_ == KontentOneofCase.CancelAllOrdersMsg) {
              subBuilder.MergeFrom(CancelAllOrdersMsg);
            }
            input.ReadMessage(subBuilder);
            CancelAllOrdersMsg = subBuilder;
            break;
          }
          case 4138: {
            global::DigitexWire.OrderStatusMessage subBuilder = new global::DigitexWire.OrderStatusMessage();
            if (kontentCase_ == KontentOneofCase.OrderStatusMsg) {
              subBuilder.MergeFrom(OrderStatusMsg);
            }
            input.ReadMessage(subBuilder);
            OrderStatusMsg = subBuilder;
            break;
          }
          case 4146: {
            global::DigitexWire.OrderFilledMessage subBuilder = new global::DigitexWire.OrderFilledMessage();
            if (kontentCase_ == KontentOneofCase.OrderFilledMsg) {
              subBuilder.MergeFrom(OrderFilledMsg);
            }
            input.ReadMessage(subBuilder);
            OrderFilledMsg = subBuilder;
            break;
          }
          case 4154: {
            global::DigitexWire.ChangeLeverageAllMessage subBuilder = new global::DigitexWire.ChangeLeverageAllMessage();
            if (kontentCase_ == KontentOneofCase.ChangeLeverageAllMsg) {
              subBuilder.MergeFrom(ChangeLeverageAllMsg);
            }
            input.ReadMessage(subBuilder);
            ChangeLeverageAllMsg = subBuilder;
            break;
          }
          case 4178: {
            global::DigitexWire.TraderBalanceMessage subBuilder = new global::DigitexWire.TraderBalanceMessage();
            if (kontentCase_ == KontentOneofCase.TraderBalanceMsg) {
              subBuilder.MergeFrom(TraderBalanceMsg);
            }
            input.ReadMessage(subBuilder);
            TraderBalanceMsg = subBuilder;
            break;
          }
          case 4186: {
            global::DigitexWire.PositionEventMessage subBuilder = new global::DigitexWire.PositionEventMessage();
            if (kontentCase_ == KontentOneofCase.PositionEventMsg) {
              subBuilder.MergeFrom(PositionEventMsg);
            }
            input.ReadMessage(subBuilder);
            PositionEventMsg = subBuilder;
            break;
          }
          case 4194: {
            global::DigitexWire.LeverageMessage subBuilder = new global::DigitexWire.LeverageMessage();
            if (kontentCase_ == KontentOneofCase.LeverageMsg) {
              subBuilder.MergeFrom(LeverageMsg);
            }
            input.ReadMessage(subBuilder);
            LeverageMsg = subBuilder;
            break;
          }
          case 4202: {
            global::DigitexWire.ExchangeRateMessage subBuilder = new global::DigitexWire.ExchangeRateMessage();
            if (kontentCase_ == KontentOneofCase.ExchangeRateMsg) {
              subBuilder.MergeFrom(ExchangeRateMsg);
            }
            input.ReadMessage(subBuilder);
            ExchangeRateMsg = subBuilder;
            break;
          }
          case 4210: {
            global::DigitexWire.OrderBookRequestMessage subBuilder = new global::DigitexWire.OrderBookRequestMessage();
            if (kontentCase_ == KontentOneofCase.OrderBookRequestMsg) {
              subBuilder.MergeFrom(OrderBookRequestMsg);
            }
            input.ReadMessage(subBuilder);
            OrderBookRequestMsg = subBuilder;
            break;
          }
          case 4218: {
            global::DigitexWire.OrderBookMessage subBuilder = new global::DigitexWire.OrderBookMessage();
            if (kontentCase_ == KontentOneofCase.OrderBookMsg) {
              subBuilder.MergeFrom(OrderBookMsg);
            }
            input.ReadMessage(subBuilder);
            OrderBookMsg = subBuilder;
            break;
          }
          case 4226: {
            global::DigitexWire.OrderBookUpdatedMessage subBuilder = new global::DigitexWire.OrderBookUpdatedMessage();
            if (kontentCase_ == KontentOneofCase.OrderBookUpdatedMsg) {
              subBuilder.MergeFrom(OrderBookUpdatedMsg);
            }
            input.ReadMessage(subBuilder);
            OrderBookUpdatedMsg = subBuilder;
            break;
          }
          case 4234: {
            global::DigitexWire.PingMessage subBuilder = new global::DigitexWire.PingMessage();
            if (kontentCase_ == KontentOneofCase.PingMsg) {
              subBuilder.MergeFrom(PingMsg);
            }
            input.ReadMessage(subBuilder);
            PingMsg = subBuilder;
            break;
          }
          case 4242: {
            global::DigitexWire.PongMessage subBuilder = new global::DigitexWire.PongMessage();
            if (kontentCase_ == KontentOneofCase.PongMsg) {
              subBuilder.MergeFrom(PongMsg);
            }
            input.ReadMessage(subBuilder);
            PongMsg = subBuilder;
            break;
          }
          case 4250: {
            global::DigitexWire.UpdateOrderMessage subBuilder = new global::DigitexWire.UpdateOrderMessage();
            if (kontentCase_ == KontentOneofCase.UpdateOrderMsg) {
              subBuilder.MergeFrom(UpdateOrderMsg);
            }
            input.ReadMessage(subBuilder);
            UpdateOrderMsg = subBuilder;
            break;
          }
          case 4258: {
            global::DigitexWire.GetTraderStatusMessage subBuilder = new global::DigitexWire.GetTraderStatusMessage();
            if (kontentCase_ == KontentOneofCase.GetTraderStatusMsg) {
              subBuilder.MergeFrom(GetTraderStatusMsg);
            }
            input.ReadMessage(subBuilder);
            GetTraderStatusMsg = subBuilder;
            break;
          }
          case 4266: {
            global::DigitexWire.TraderStatusMessage subBuilder = new global::DigitexWire.TraderStatusMessage();
            if (kontentCase_ == KontentOneofCase.TraderStatusMsg) {
              subBuilder.MergeFrom(TraderStatusMsg);
            }
            input.ReadMessage(subBuilder);
            TraderStatusMsg = subBuilder;
            break;
          }
          case 4282: {
            global::DigitexWire.FundingMessage subBuilder = new global::DigitexWire.FundingMessage();
            if (kontentCase_ == KontentOneofCase.FundingMsg) {
              subBuilder.MergeFrom(FundingMsg);
            }
            input.ReadMessage(subBuilder);
            FundingMsg = subBuilder;
            break;
          }
          case 4306: {
            global::DigitexWire.SubscribeMessage subBuilder = new global::DigitexWire.SubscribeMessage();
            if (kontentCase_ == KontentOneofCase.SubscribeMsg) {
              subBuilder.MergeFrom(SubscribeMsg);
            }
            input.ReadMessage(subBuilder);
            SubscribeMsg = subBuilder;
            break;
          }
          case 4314: {
            global::DigitexWire.SubscribeStatusMessage subBuilder = new global::DigitexWire.SubscribeStatusMessage();
            if (kontentCase_ == KontentOneofCase.SubscribeStatusMsg) {
              subBuilder.MergeFrom(SubscribeStatusMsg);
            }
            input.ReadMessage(subBuilder);
            SubscribeStatusMsg = subBuilder;
            break;
          }
          case 4338: {
            global::DigitexWire.CloseContractMessage subBuilder = new global::DigitexWire.CloseContractMessage();
            if (kontentCase_ == KontentOneofCase.CloseContractMsg) {
              subBuilder.MergeFrom(CloseContractMsg);
            }
            input.ReadMessage(subBuilder);
            CloseContractMsg = subBuilder;
            break;
          }
          case 4346: {
            global::DigitexWire.CloseAllContractsMessage subBuilder = new global::DigitexWire.CloseAllContractsMessage();
            if (kontentCase_ == KontentOneofCase.CloseAllContractsMsg) {
              subBuilder.MergeFrom(CloseAllContractsMsg);
            }
            input.ReadMessage(subBuilder);
            CloseAllContractsMsg = subBuilder;
            break;
          }
          case 4370: {
            global::DigitexWire.OrderCanceledMessage subBuilder = new global::DigitexWire.OrderCanceledMessage();
            if (kontentCase_ == KontentOneofCase.OrderCanceledMsg) {
              subBuilder.MergeFrom(OrderCanceledMsg);
            }
            input.ReadMessage(subBuilder);
            OrderCanceledMsg = subBuilder;
            break;
          }
          case 4386: {
            global::DigitexWire.GetMarketStateMessage subBuilder = new global::DigitexWire.GetMarketStateMessage();
            if (kontentCase_ == KontentOneofCase.GetMarketStateMsg) {
              subBuilder.MergeFrom(GetMarketStateMsg);
            }
            input.ReadMessage(subBuilder);
            GetMarketStateMsg = subBuilder;
            break;
          }
          case 4394: {
            global::DigitexWire.MarketStateMessage subBuilder = new global::DigitexWire.MarketStateMessage();
            if (kontentCase_ == KontentOneofCase.MarketStateMsg) {
              subBuilder.MergeFrom(MarketStateMsg);
            }
            input.ReadMessage(subBuilder);
            MarketStateMsg = subBuilder;
            break;
          }
          case 4402: {
            global::DigitexWire.GetExchangeRatesMessage subBuilder = new global::DigitexWire.GetExchangeRatesMessage();
            if (kontentCase_ == KontentOneofCase.GetExchangeRatesMsg) {
              subBuilder.MergeFrom(GetExchangeRatesMsg);
            }
            input.ReadMessage(subBuilder);
            GetExchangeRatesMsg = subBuilder;
            break;
          }
          case 4410: {
            global::DigitexWire.ExchangeRatesMessage subBuilder = new global::DigitexWire.ExchangeRatesMessage();
            if (kontentCase_ == KontentOneofCase.ExchangeRatesMsg) {
              subBuilder.MergeFrom(ExchangeRatesMsg);
            }
            input.ReadMessage(subBuilder);
            ExchangeRatesMsg = subBuilder;
            break;
          }
          case 4418: {
            global::DigitexWire.MarketStateUpdateMessage subBuilder = new global::DigitexWire.MarketStateUpdateMessage();
            if (kontentCase_ == KontentOneofCase.MarketStateUpdateMsg) {
              subBuilder.MergeFrom(MarketStateUpdateMsg);
            }
            input.ReadMessage(subBuilder);
            MarketStateUpdateMsg = subBuilder;
            break;
          }
          case 4426: {
            global::DigitexWire.ContractClosedMessage subBuilder = new global::DigitexWire.ContractClosedMessage();
            if (kontentCase_ == KontentOneofCase.ContractClosedMsg) {
              subBuilder.MergeFrom(ContractClosedMsg);
            }
            input.ReadMessage(subBuilder);
            ContractClosedMsg = subBuilder;
            break;
          }
          case 4498: {
            global::DigitexWire.GetTraderBalanceMessage subBuilder = new global::DigitexWire.GetTraderBalanceMessage();
            if (kontentCase_ == KontentOneofCase.GetTraderBalanceMsg) {
              subBuilder.MergeFrom(GetTraderBalanceMsg);
            }
            input.ReadMessage(subBuilder);
            GetTraderBalanceMsg = subBuilder;
            break;
          }
          case 4530: {
            global::DigitexWire.PlaceDelayedActionMessage subBuilder = new global::DigitexWire.PlaceDelayedActionMessage();
            if (kontentCase_ == KontentOneofCase.PlaceDelayedActionMsg) {
              subBuilder.MergeFrom(PlaceDelayedActionMsg);
            }
            input.ReadMessage(subBuilder);
            PlaceDelayedActionMsg = subBuilder;
            break;
          }
          case 4538: {
            global::DigitexWire.UpdateDelayedActionMessage subBuilder = new global::DigitexWire.UpdateDelayedActionMessage();
            if (kontentCase_ == KontentOneofCase.UpdateDelayedActionMsg) {
              subBuilder.MergeFrom(UpdateDelayedActionMsg);
            }
            input.ReadMessage(subBuilder);
            UpdateDelayedActionMsg = subBuilder;
            break;
          }
          case 4546: {
            global::DigitexWire.CancelDelayedActionMessage subBuilder = new global::DigitexWire.CancelDelayedActionMessage();
            if (kontentCase_ == KontentOneofCase.CancelDelayedActionMsg) {
              subBuilder.MergeFrom(CancelDelayedActionMsg);
            }
            input.ReadMessage(subBuilder);
            CancelDelayedActionMsg = subBuilder;
            break;
          }
          case 4554: {
            global::DigitexWire.DelayedActionStatusMessage subBuilder = new global::DigitexWire.DelayedActionStatusMessage();
            if (kontentCase_ == KontentOneofCase.DelayedActionStatusMsg) {
              subBuilder.MergeFrom(DelayedActionStatusMsg);
            }
            input.ReadMessage(subBuilder);
            DelayedActionStatusMsg = subBuilder;
            break;
          }
          case 4562: {
            global::DigitexWire.LiquidationsMessage subBuilder = new global::DigitexWire.LiquidationsMessage();
            if (kontentCase_ == KontentOneofCase.LiquidationsMsg) {
              subBuilder.MergeFrom(LiquidationsMsg);
            }
            input.ReadMessage(subBuilder);
            LiquidationsMsg = subBuilder;
            break;
          }
          case 4570: {
            global::DigitexWire.FundingInfoMessage subBuilder = new global::DigitexWire.FundingInfoMessage();
            if (kontentCase_ == KontentOneofCase.FundingInfoMsg) {
              subBuilder.MergeFrom(FundingInfoMsg);
            }
            input.ReadMessage(subBuilder);
            FundingInfoMsg = subBuilder;
            break;
          }
          case 4578: {
            global::DigitexWire.ErrorMessage subBuilder = new global::DigitexWire.ErrorMessage();
            if (kontentCase_ == KontentOneofCase.ErrorMsg) {
              subBuilder.MergeFrom(ErrorMsg);
            }
            input.ReadMessage(subBuilder);
            ErrorMsg = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 16: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 32: {
            Serial = input.ReadUInt64();
            break;
          }
          case 40: {
            MarketId = input.ReadUInt32();
            break;
          }
          case 48: {
            TraderId = input.ReadUInt32();
            break;
          }
          case 58: {
            ClientId = input.ReadBytes();
            break;
          }
          case 64: {
            SessionId = input.ReadInt64();
            break;
          }
          case 74: {
            Auth = input.ReadBytes();
            break;
          }
          case 344: {
            ErrorCode = input.ReadUInt32();
            break;
          }
          case 4106: {
            global::DigitexWire.PlaceOrderMessage subBuilder = new global::DigitexWire.PlaceOrderMessage();
            if (kontentCase_ == KontentOneofCase.PlaceOrderMsg) {
              subBuilder.MergeFrom(PlaceOrderMsg);
            }
            input.ReadMessage(subBuilder);
            PlaceOrderMsg = subBuilder;
            break;
          }
          case 4114: {
            global::DigitexWire.CancelOrderMessage subBuilder = new global::DigitexWire.CancelOrderMessage();
            if (kontentCase_ == KontentOneofCase.CancelOrderMsg) {
              subBuilder.MergeFrom(CancelOrderMsg);
            }
            input.ReadMessage(subBuilder);
            CancelOrderMsg = subBuilder;
            break;
          }
          case 4122: {
            global::DigitexWire.CancelAllOrdersMessage subBuilder = new global::DigitexWire.CancelAllOrdersMessage();
            if (kontentCase_ == KontentOneofCase.CancelAllOrdersMsg) {
              subBuilder.MergeFrom(CancelAllOrdersMsg);
            }
            input.ReadMessage(subBuilder);
            CancelAllOrdersMsg = subBuilder;
            break;
          }
          case 4138: {
            global::DigitexWire.OrderStatusMessage subBuilder = new global::DigitexWire.OrderStatusMessage();
            if (kontentCase_ == KontentOneofCase.OrderStatusMsg) {
              subBuilder.MergeFrom(OrderStatusMsg);
            }
            input.ReadMessage(subBuilder);
            OrderStatusMsg = subBuilder;
            break;
          }
          case 4146: {
            global::DigitexWire.OrderFilledMessage subBuilder = new global::DigitexWire.OrderFilledMessage();
            if (kontentCase_ == KontentOneofCase.OrderFilledMsg) {
              subBuilder.MergeFrom(OrderFilledMsg);
            }
            input.ReadMessage(subBuilder);
            OrderFilledMsg = subBuilder;
            break;
          }
          case 4154: {
            global::DigitexWire.ChangeLeverageAllMessage subBuilder = new global::DigitexWire.ChangeLeverageAllMessage();
            if (kontentCase_ == KontentOneofCase.ChangeLeverageAllMsg) {
              subBuilder.MergeFrom(ChangeLeverageAllMsg);
            }
            input.ReadMessage(subBuilder);
            ChangeLeverageAllMsg = subBuilder;
            break;
          }
          case 4178: {
            global::DigitexWire.TraderBalanceMessage subBuilder = new global::DigitexWire.TraderBalanceMessage();
            if (kontentCase_ == KontentOneofCase.TraderBalanceMsg) {
              subBuilder.MergeFrom(TraderBalanceMsg);
            }
            input.ReadMessage(subBuilder);
            TraderBalanceMsg = subBuilder;
            break;
          }
          case 4186: {
            global::DigitexWire.PositionEventMessage subBuilder = new global::DigitexWire.PositionEventMessage();
            if (kontentCase_ == KontentOneofCase.PositionEventMsg) {
              subBuilder.MergeFrom(PositionEventMsg);
            }
            input.ReadMessage(subBuilder);
            PositionEventMsg = subBuilder;
            break;
          }
          case 4194: {
            global::DigitexWire.LeverageMessage subBuilder = new global::DigitexWire.LeverageMessage();
            if (kontentCase_ == KontentOneofCase.LeverageMsg) {
              subBuilder.MergeFrom(LeverageMsg);
            }
            input.ReadMessage(subBuilder);
            LeverageMsg = subBuilder;
            break;
          }
          case 4202: {
            global::DigitexWire.ExchangeRateMessage subBuilder = new global::DigitexWire.ExchangeRateMessage();
            if (kontentCase_ == KontentOneofCase.ExchangeRateMsg) {
              subBuilder.MergeFrom(ExchangeRateMsg);
            }
            input.ReadMessage(subBuilder);
            ExchangeRateMsg = subBuilder;
            break;
          }
          case 4210: {
            global::DigitexWire.OrderBookRequestMessage subBuilder = new global::DigitexWire.OrderBookRequestMessage();
            if (kontentCase_ == KontentOneofCase.OrderBookRequestMsg) {
              subBuilder.MergeFrom(OrderBookRequestMsg);
            }
            input.ReadMessage(subBuilder);
            OrderBookRequestMsg = subBuilder;
            break;
          }
          case 4218: {
            global::DigitexWire.OrderBookMessage subBuilder = new global::DigitexWire.OrderBookMessage();
            if (kontentCase_ == KontentOneofCase.OrderBookMsg) {
              subBuilder.MergeFrom(OrderBookMsg);
            }
            input.ReadMessage(subBuilder);
            OrderBookMsg = subBuilder;
            break;
          }
          case 4226: {
            global::DigitexWire.OrderBookUpdatedMessage subBuilder = new global::DigitexWire.OrderBookUpdatedMessage();
            if (kontentCase_ == KontentOneofCase.OrderBookUpdatedMsg) {
              subBuilder.MergeFrom(OrderBookUpdatedMsg);
            }
            input.ReadMessage(subBuilder);
            OrderBookUpdatedMsg = subBuilder;
            break;
          }
          case 4234: {
            global::DigitexWire.PingMessage subBuilder = new global::DigitexWire.PingMessage();
            if (kontentCase_ == KontentOneofCase.PingMsg) {
              subBuilder.MergeFrom(PingMsg);
            }
            input.ReadMessage(subBuilder);
            PingMsg = subBuilder;
            break;
          }
          case 4242: {
            global::DigitexWire.PongMessage subBuilder = new global::DigitexWire.PongMessage();
            if (kontentCase_ == KontentOneofCase.PongMsg) {
              subBuilder.MergeFrom(PongMsg);
            }
            input.ReadMessage(subBuilder);
            PongMsg = subBuilder;
            break;
          }
          case 4250: {
            global::DigitexWire.UpdateOrderMessage subBuilder = new global::DigitexWire.UpdateOrderMessage();
            if (kontentCase_ == KontentOneofCase.UpdateOrderMsg) {
              subBuilder.MergeFrom(UpdateOrderMsg);
            }
            input.ReadMessage(subBuilder);
            UpdateOrderMsg = subBuilder;
            break;
          }
          case 4258: {
            global::DigitexWire.GetTraderStatusMessage subBuilder = new global::DigitexWire.GetTraderStatusMessage();
            if (kontentCase_ == KontentOneofCase.GetTraderStatusMsg) {
              subBuilder.MergeFrom(GetTraderStatusMsg);
            }
            input.ReadMessage(subBuilder);
            GetTraderStatusMsg = subBuilder;
            break;
          }
          case 4266: {
            global::DigitexWire.TraderStatusMessage subBuilder = new global::DigitexWire.TraderStatusMessage();
            if (kontentCase_ == KontentOneofCase.TraderStatusMsg) {
              subBuilder.MergeFrom(TraderStatusMsg);
            }
            input.ReadMessage(subBuilder);
            TraderStatusMsg = subBuilder;
            break;
          }
          case 4282: {
            global::DigitexWire.FundingMessage subBuilder = new global::DigitexWire.FundingMessage();
            if (kontentCase_ == KontentOneofCase.FundingMsg) {
              subBuilder.MergeFrom(FundingMsg);
            }
            input.ReadMessage(subBuilder);
            FundingMsg = subBuilder;
            break;
          }
          case 4306: {
            global::DigitexWire.SubscribeMessage subBuilder = new global::DigitexWire.SubscribeMessage();
            if (kontentCase_ == KontentOneofCase.SubscribeMsg) {
              subBuilder.MergeFrom(SubscribeMsg);
            }
            input.ReadMessage(subBuilder);
            SubscribeMsg = subBuilder;
            break;
          }
          case 4314: {
            global::DigitexWire.SubscribeStatusMessage subBuilder = new global::DigitexWire.SubscribeStatusMessage();
            if (kontentCase_ == KontentOneofCase.SubscribeStatusMsg) {
              subBuilder.MergeFrom(SubscribeStatusMsg);
            }
            input.ReadMessage(subBuilder);
            SubscribeStatusMsg = subBuilder;
            break;
          }
          case 4338: {
            global::DigitexWire.CloseContractMessage subBuilder = new global::DigitexWire.CloseContractMessage();
            if (kontentCase_ == KontentOneofCase.CloseContractMsg) {
              subBuilder.MergeFrom(CloseContractMsg);
            }
            input.ReadMessage(subBuilder);
            CloseContractMsg = subBuilder;
            break;
          }
          case 4346: {
            global::DigitexWire.CloseAllContractsMessage subBuilder = new global::DigitexWire.CloseAllContractsMessage();
            if (kontentCase_ == KontentOneofCase.CloseAllContractsMsg) {
              subBuilder.MergeFrom(CloseAllContractsMsg);
            }
            input.ReadMessage(subBuilder);
            CloseAllContractsMsg = subBuilder;
            break;
          }
          case 4370: {
            global::DigitexWire.OrderCanceledMessage subBuilder = new global::DigitexWire.OrderCanceledMessage();
            if (kontentCase_ == KontentOneofCase.OrderCanceledMsg) {
              subBuilder.MergeFrom(OrderCanceledMsg);
            }
            input.ReadMessage(subBuilder);
            OrderCanceledMsg = subBuilder;
            break;
          }
          case 4386: {
            global::DigitexWire.GetMarketStateMessage subBuilder = new global::DigitexWire.GetMarketStateMessage();
            if (kontentCase_ == KontentOneofCase.GetMarketStateMsg) {
              subBuilder.MergeFrom(GetMarketStateMsg);
            }
            input.ReadMessage(subBuilder);
            GetMarketStateMsg = subBuilder;
            break;
          }
          case 4394: {
            global::DigitexWire.MarketStateMessage subBuilder = new global::DigitexWire.MarketStateMessage();
            if (kontentCase_ == KontentOneofCase.MarketStateMsg) {
              subBuilder.MergeFrom(MarketStateMsg);
            }
            input.ReadMessage(subBuilder);
            MarketStateMsg = subBuilder;
            break;
          }
          case 4402: {
            global::DigitexWire.GetExchangeRatesMessage subBuilder = new global::DigitexWire.GetExchangeRatesMessage();
            if (kontentCase_ == KontentOneofCase.GetExchangeRatesMsg) {
              subBuilder.MergeFrom(GetExchangeRatesMsg);
            }
            input.ReadMessage(subBuilder);
            GetExchangeRatesMsg = subBuilder;
            break;
          }
          case 4410: {
            global::DigitexWire.ExchangeRatesMessage subBuilder = new global::DigitexWire.ExchangeRatesMessage();
            if (kontentCase_ == KontentOneofCase.ExchangeRatesMsg) {
              subBuilder.MergeFrom(ExchangeRatesMsg);
            }
            input.ReadMessage(subBuilder);
            ExchangeRatesMsg = subBuilder;
            break;
          }
          case 4418: {
            global::DigitexWire.MarketStateUpdateMessage subBuilder = new global::DigitexWire.MarketStateUpdateMessage();
            if (kontentCase_ == KontentOneofCase.MarketStateUpdateMsg) {
              subBuilder.MergeFrom(MarketStateUpdateMsg);
            }
            input.ReadMessage(subBuilder);
            MarketStateUpdateMsg = subBuilder;
            break;
          }
          case 4426: {
            global::DigitexWire.ContractClosedMessage subBuilder = new global::DigitexWire.ContractClosedMessage();
            if (kontentCase_ == KontentOneofCase.ContractClosedMsg) {
              subBuilder.MergeFrom(ContractClosedMsg);
            }
            input.ReadMessage(subBuilder);
            ContractClosedMsg = subBuilder;
            break;
          }
          case 4498: {
            global::DigitexWire.GetTraderBalanceMessage subBuilder = new global::DigitexWire.GetTraderBalanceMessage();
            if (kontentCase_ == KontentOneofCase.GetTraderBalanceMsg) {
              subBuilder.MergeFrom(GetTraderBalanceMsg);
            }
            input.ReadMessage(subBuilder);
            GetTraderBalanceMsg = subBuilder;
            break;
          }
          case 4530: {
            global::DigitexWire.PlaceDelayedActionMessage subBuilder = new global::DigitexWire.PlaceDelayedActionMessage();
            if (kontentCase_ == KontentOneofCase.PlaceDelayedActionMsg) {
              subBuilder.MergeFrom(PlaceDelayedActionMsg);
            }
            input.ReadMessage(subBuilder);
            PlaceDelayedActionMsg = subBuilder;
            break;
          }
          case 4538: {
            global::DigitexWire.UpdateDelayedActionMessage subBuilder = new global::DigitexWire.UpdateDelayedActionMessage();
            if (kontentCase_ == KontentOneofCase.UpdateDelayedActionMsg) {
              subBuilder.MergeFrom(UpdateDelayedActionMsg);
            }
            input.ReadMessage(subBuilder);
            UpdateDelayedActionMsg = subBuilder;
            break;
          }
          case 4546: {
            global::DigitexWire.CancelDelayedActionMessage subBuilder = new global::DigitexWire.CancelDelayedActionMessage();
            if (kontentCase_ == KontentOneofCase.CancelDelayedActionMsg) {
              subBuilder.MergeFrom(CancelDelayedActionMsg);
            }
            input.ReadMessage(subBuilder);
            CancelDelayedActionMsg = subBuilder;
            break;
          }
          case 4554: {
            global::DigitexWire.DelayedActionStatusMessage subBuilder = new global::DigitexWire.DelayedActionStatusMessage();
            if (kontentCase_ == KontentOneofCase.DelayedActionStatusMsg) {
              subBuilder.MergeFrom(DelayedActionStatusMsg);
            }
            input.ReadMessage(subBuilder);
            DelayedActionStatusMsg = subBuilder;
            break;
          }
          case 4562: {
            global::DigitexWire.LiquidationsMessage subBuilder = new global::DigitexWire.LiquidationsMessage();
            if (kontentCase_ == KontentOneofCase.LiquidationsMsg) {
              subBuilder.MergeFrom(LiquidationsMsg);
            }
            input.ReadMessage(subBuilder);
            LiquidationsMsg = subBuilder;
            break;
          }
          case 4570: {
            global::DigitexWire.FundingInfoMessage subBuilder = new global::DigitexWire.FundingInfoMessage();
            if (kontentCase_ == KontentOneofCase.FundingInfoMsg) {
              subBuilder.MergeFrom(FundingInfoMsg);
            }
            input.ReadMessage(subBuilder);
            FundingInfoMsg = subBuilder;
            break;
          }
          case 4578: {
            global::DigitexWire.ErrorMessage subBuilder = new global::DigitexWire.ErrorMessage();
            if (kontentCase_ == KontentOneofCase.ErrorMsg) {
              subBuilder.MergeFrom(ErrorMsg);
            }
            input.ReadMessage(subBuilder);
            ErrorMsg = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
